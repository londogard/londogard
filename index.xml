<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Londogard Blog</title>
<link>https://blog.londogard.com/</link>
<atom:link href="https://blog.londogard.com/index.xml" rel="self" type="application/rss+xml"/>
<description>A blog which majorly focuses on Data Science, Data Engineering and sometimes Kotlin / Scala.</description>
<generator>quarto-1.6.42</generator>
<lastBuildDate>Fri, 07 Mar 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Mini: DeepSeek‚Äôs smallpond - a distributed duckdb</title>
  <dc:creator>Hampus Lond√∂g√•rd</dc:creator>
  <link>https://blog.londogard.com/posts/2025-03-07-deepseek-smallpond/</link>
  <description><![CDATA[ 





<p>There has been a lot of buss around <a href="https://www.deepseek.com/">DeepSeek</a> (R1) and their Open Source mission, and lately they released their full stack to train State-of-the-Art LLM‚Äôs.<br>
One of the tools is a <em>Distributed Data Processing</em> framework named <a href="https://github.com/deepseek-ai/smallpond"><em>‚Äúsmallpond‚Äù</em></a> built on top of <a href="https://duckdb.org/"><em>DuckDB</em></a> <em>&amp;</em> <a href="https://www.ray.io/"><em>Ray</em></a>.<br>
Mike made an excellent write-up on his <a href="https://www.definite.app/blog/smallpond">blog.</a></p>
<p><strong>The summary?</strong> It‚Äôs a tool that you can‚Äôt even <a href="https://x.com/suchenzang/status/1895437762427560236">buy with millions $</a>, insanely valuable Open Source code! Draw-back? A lot of setup, early days with few (if any) guides.<br>
<strong>When should I use it?</strong> When you start to have more than 10 TB of data to query, especially above 1 PB.</p>
<p><strong>My thoughts</strong> are that</p>
<ol type="1">
<li><em>smallpond</em> brings the ‚Äúmodern data stack‚Äù closer to end-user for truly Big Data, but not close enough.
<ul>
<li>We see <em>Apache Arrow</em> and <em>Ray</em> (a lot more lean than say <a href="https://airflow.apache.org/">Apache Airflow</a>) as key technologies, and the engines are interchangable between DuckDB and Polars.</li>
</ul></li>
<li>There‚Äôs other competition trying similar, e.g.&nbsp;<a href="https://pola.rs/posts/polars-cloud-what-we-are-building/">Polars Cloud</a> (albeit potentially not Open Source it‚Äôs an exciting future)!</li>
<li>There‚Äôs other competition rather looking at vertical scaling, e.g.&nbsp;<a href="https://motherduck.com/">Motherduck</a> .</li>
</ol>
<p>At the end of the day Motherducks approach resonates a lot more to me, by storing data cleverly we can easily query huge amount of data efficiently on a single machine through metadata scanning, especially with vertical scaling. <em>It‚Äôs also the simplest approach.</em></p>
<p>But some days you might be in need of that <em>brute-force</em> because there isn‚Äôt time, competence or your problem simply requires loading and working with <em>insane amounts of data</em>, i.e.&nbsp;LLM training.</p>
<p>All in all <em>smallpond</em> and <em>3FS</em> are great additions to the open source community and extends the ‚Äúdistributed truly big data processing‚Äù which is a valuable target. Though I can‚Äôt help but think and hope that there‚Äôll be even simpler tools moving forward.</p>



 ]]></description>
  <category>python</category>
  <category>data</category>
  <category>distributed</category>
  <guid>https://blog.londogard.com/posts/2025-03-07-deepseek-smallpond/</guid>
  <pubDate>Fri, 07 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Marimo WASM Apps</title>
  <dc:creator>Hampus Lond√∂g√•rd</dc:creator>
  <link>https://blog.londogard.com/posts/2025-03-02-marimo-spreadsheets/</link>
  <description><![CDATA[ 





<p>This post will be short, I recently built a WASM app that allows you to 1) convert between Parquet/CSV/JSON and 2) explore the data using Marimos built-in tooling.</p>
<p>I shared an initial introduction to marimo in a <a href="../../posts/2025-02-17-marimo">blog earlier</a>.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>In short <strong>marimo</strong> is an up-and-coming Notebook that also have ‚ÄúApp-mode‚Äù and can run using WASM.</p>
</div>
</div>
<section id="appconverter" class="level2">
<h2 class="anchored" data-anchor-id="appconverter">App:Converter</h2>
<p>There‚Äôs multiple libraries suppoted in Pyodide, Python WASM, among them: <code>polars</code>, <code>duckdb</code> and <code>pandas</code>.<br>
All these libraries are exceptional, with <code>pandas</code> as a exception üòâ, to do Data Science and work with tabular data. They also have read/write support for <code>JSON</code>, <code>CSV</code> and <code>parquet</code> files.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>Parquet</strong> is an awesome format for reading data, it‚Äôs <em>small, fast &amp; efficient</em> which in turn enables magnitudes better performance (10-100x easily).</p>
</div>
</div>
<p>These tools enable my simple <em>converter</em> that allows more people to easily move <em>from CSV/JSON to Parquet</em>, and in turn have faster plotting!</p>
<p>As always there‚Äôs some problems implementing:</p>
<ul>
<li><code>polars</code> doesn‚Äôt support parquet/JSON in WASM
<ul>
<li>‚Äì&gt; fall-back to <code>duckdb</code>.</li>
<li><code>duckdb</code> can‚Äôt read parquet from<code>io.BytesIO</code>
<ul>
<li>‚Äì&gt; fall-back to‚Ä¶ <code>pandas</code> ü§¶‚Äç‚ôÇÔ∏è.</li>
<li>Luckily we can quickly call <code>pl.from_pandas</code> to run <code>polars</code>!</li>
</ul></li>
</ul></li>
</ul>
<p>I hope to add more formats moving forwards, such as <code>ndjson</code> and <code>xlsx</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2025-03-02-marimo-spreadsheets/image.png" class="img-fluid figure-img"></p>
<figcaption>Convert (src: parquet-file) that automatically infer available targets</figcaption>
</figure>
</div>
</section>
<section id="appexplore" class="level2">
<h2 class="anchored" data-anchor-id="appexplore">App:Explore</h2>
<p>Data Exploration - a important part and initial step when working with data of any type.<br>
When exploring your dataset it‚Äôs good to have a streamlined way of working. Marimo has some excellent tooling to quickly structure your data. <strong>I‚Äôve added all these tools in my simple WASM app</strong>, things include like:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2025-03-02-marimo-spreadsheets/image-1.png" class="img-fluid figure-img"></p>
<figcaption><strong>DataFrame with Statistics in the header</strong></figcaption>
</figure>
</div>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2025-03-02-marimo-spreadsheets/image-2.png" class="img-fluid figure-img"></p>
<figcaption><strong>‚ÄúClick‚Äù Plotting - select X,Y, ‚Ä¶</strong></figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2025-03-02-marimo-spreadsheets/image-3.png" class="img-fluid figure-img"></p>
<figcaption>Another example</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>These tools combine into a quite neat exploration app. If you run this notebook locally you can easily hit up the <em>code cells</em> and modify the DataFrames manually and keep utilizing the nifty UI features such as statistics in DataFrame columns or visualization.</p>
<p>All in all this is a simple quick-starter, I think this app can be helpful for those who wants to explore their data, advaned or simple.</p>
</section>
<section id="result" class="level2">
<h2 class="anchored" data-anchor-id="result">Result</h2>
<div class="callout callout-style-simple callout-tip no-icon callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
WASM Spreadsheet Explorer/Converter (CSV, JSON &amp; Parquet) App
</div>
</div>
<div class="callout-body-container callout-body">
<p><a href="../../pages/app_spreadsheet.html">Also available as stand-alone</a></p>

<iframe width="100%" height="720" src="../../assets/wasm/spreadsheet/app/index.html"></iframe>
</div>
</div>
</section>
<section id="outro" class="level1">
<h1>Outro</h1>
<p>I‚Äôll keep adding more WASM apps with time. I love Pyodide.</p>
<p>Combining WASM with Marimo, or <code>stlite</code>, feels like such a natural fit.<br>
Marimo to me combines the perfection of Notebook Exploration with Apps, hence I opted for Marimo now.</p>
<p>Moving on I‚Äôll add more in-depth blogs about Marimo and why it‚Äôs awesome, embedding WASM snippets and more.</p>
<p>Thanks for this time,<br>
Hampus Lond√∂g√•rd</p>


</section>

 ]]></description>
  <category>python</category>
  <category>wasm</category>
  <category>app</category>
  <guid>https://blog.londogard.com/posts/2025-03-02-marimo-spreadsheets/</guid>
  <pubDate>Sun, 02 Mar 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>TIL: Programatically Fetch Python Class/File Dependencies</title>
  <dc:creator>Hampus Lond√∂g√•rd</dc:creator>
  <link>https://blog.londogard.com/posts/2025-02-27-python-dependency-collector/</link>
  <description><![CDATA[ 





<section id="importcollector" class="level1">
<h1>ImportCollector</h1>
<p>It‚Äôs simple and requires 0 dependencies outside of the standard library.</p>
<p>This script will recursively traverse the dependencies of a <code>Class</code> or <em>python-script</em> and find all relevant dependencies from your local project.<br>
It‚Äôs useful in multiple types of project, such as (remote) Machine Learning training jobs and serverless deployments, where you don‚Äôt want to include irrelevant files.</p>
{{&lt; gist Lundez 097753678fe475a6bc30ca31f4624536 &gt;}}
</section>
<section id="why-i-built-this" class="level1">
<h1>Why I built this</h1>
<p>When I was deploying/building a <code>MLFlow Model</code> I found that their <code>infer_code_paths</code> functionality is bugged, as shared in <a href="https://github.com/mlflow/mlflow/issues/14071">mlflow/issues/14071</a> and my <a href="../../posts/2025-02-25-mlflow-model">blog about MLFlow Models</a>, and that I needed something better to really recursively fetch dependencies.</p>
<p>I found that through my nifty little script I could do this better than <code>mlflow</code> themselves. By updating the <code>load_context</code> function we could infer the <code>modules</code> by importing them, assisting <code>mlflow</code>‚Äôs <code>infer_code_paths</code> function.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> load_context(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, context):</span>
<span id="cb1-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MLFlow bug where parent class is not added to `infer_code_paths`.</span></span>
<span id="cb1-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://github.com/mlflow/mlflow/issues/14071</span></span>
<span id="cb1-4">    imports <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_dependencies(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>))</span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> module <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> imports.modules:</span>
<span id="cb1-6">        importlib.import_module(module)</span></code></pre></div>
<p>This is it for this time,<br>
Hampus Lond√∂g√•rd</p>


</section>

 ]]></description>
  <category>python</category>
  <category>dependencies</category>
  <guid>https://blog.londogard.com/posts/2025-02-27-python-dependency-collector/</guid>
  <pubDate>Thu, 27 Feb 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>MLFlow Models: Self-Contained ML Models with MLFlow</title>
  <dc:creator>Hampus Lond√∂g√•rd</dc:creator>
  <link>https://blog.londogard.com/posts/2025-02-25-mlflow-model/</link>
  <description><![CDATA[ 





<section id="mlflow-models" class="level1">
<h1>MLFlow Models</h1>
<p>MLFlow is a popular tool to track your experiment to compare metrics, parameters and much more. It helps streamlining your job as a <em>data scientist</em> and <em>machine learning engineers</em>. Their <em>MLFlow Models</em> is a sub-project that helps making deployments smooth and integrates with their <em>Model Registry</em> that has versioned and tagged models which ties together with MLFlow Experiments.</p>
<p>All in all the MLFlow Models project helps building self-contained models in a streamlined fashion that integrates very well in the MLFlow ecosystem.</p>
<section id="mlflow-model" class="level2">
<h2 class="anchored" data-anchor-id="mlflow-model">MLFlow Model</h2>
<p>MLFlow Models is MLFlows ‚Äúself-contained model‚Äù that can automatically build a Docker Container and run <em>inference</em> through the built-in <code>mlflow serve</code> command.<br>
It‚Äôs an interesting concept that‚Äôs not ‚Äúphenomenal‚Äù or ‚Äúinnovating‚Äù but helps streamlining our lives, just like the ‚Äúbread and butter‚Äù MLFlow Experiments. I love projects that make the average persons life easier. Advanced user, like I‚Äôd call myself, might find it ‚Äúblocking‚Äù but the <code>PythonModel</code> concept I explain later is likely helpful for anyone out there!</p>
<p>MLFlow really hits that sweet point of keeping things simple and not going too far, except perhaps in the current LLM tracing which feels like the shot-gun methodology.</p>
<section id="why" class="level3">
<h3 class="anchored" data-anchor-id="why">Why?</h3>
<p>Keeping it short:</p>
<ol type="1">
<li>A <strong>‚Äúself-contained model‚Äù</strong> with all the code files and dependencies in a simple package</li>
<li><strong>Natively Integrated in MLFlow</strong> which is one of the biggest ‚ÄúMLOps‚Äù systems</li>
<li>All the MLFLow goodies enabled, such as <code>ModelRegistry</code>, <code>model-evaluation</code>, and <code>auto-Apache Spark UDF</code>.</li>
</ol>
</section>
<section id="flavours" class="level3">
<h3 class="anchored" data-anchor-id="flavours">Flavours</h3>
<p>MLFlow Model automatically support multiple formats: <em>Keras</em>, <em>PyTorch</em>, <em>scikit-learn</em>, and many more (<a href="https://mlflow.org/docs/latest/models.html#built-in-model-flavors">full list</a>).<br>
More interestingly they really support <em>ANY</em> model through their <code>PytonModel</code> which is what I opt to use.</p>
<section id="why-pythonmodel" class="level4">
<h4 class="anchored" data-anchor-id="why-pythonmodel">Why PythonModel</h4>
<p><code>PythonModel</code> allows you to get a streamlined format that supports custom models, including <em>Preprocessing</em> and <em>Postprocessing</em>. Quite excellent!</p>
<p>To keep it simple you define a <code>PythonModel</code> as follows:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MyModel(mlflow.pyfunc.PythonModel):</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> predict(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, context, model_input: np.ndarray, params: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb1-3">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model_input can also be pd.DataFrame, dict[str, np.ndarray], ...</span></span>
<span id="cb1-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model_input</span></code></pre></div>
<p>There‚Äôs additionally a <code>load_context</code> method which lets you write how to load your model and other things. It‚Äôs run when ‚Äúbooting up‚Äù.</p>
<p>To log and load a model:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mlflow</span>
<span id="cb2-2"></span>
<span id="cb2-3">model_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_model.py"</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> mlflow.start_run():</span>
<span id="cb2-6">    model_info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mlflow.pyfunc.log_model(</span>
<span id="cb2-7">        python_model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>MyModel(),</span>
<span id="cb2-8">        artifact_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_model"</span>,</span>
<span id="cb2-9">    )</span>
<span id="cb2-10"></span>
<span id="cb2-11">my_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mlflow.pyfunc.load_model(model_info.model_uri)</span></code></pre></div>
</section>
<section id="a-bugged-infer_code_paths" class="level4">
<h4 class="anchored" data-anchor-id="a-bugged-infer_code_paths">A bugged <code>infer_code_paths</code></h4>
<p>If you find, like me, that <code>infer_code_paths</code> don‚Äôt work well see my fix in this <a href="../../posts/2025-02-27-python-dependency-collector">blog-post</a>.</p>
<p>This problem seems to be very common if you use sub-classing or have custom dependencies that are called outside <code>load_context</code>, but my simple script helps you out!</p>
</section>
</section>
<section id="docker-containerization" class="level3">
<h3 class="anchored" data-anchor-id="docker-containerization">Docker Containerization</h3>
<p>It‚Äôs easily containerized calling the CLI or Python:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mlflow</span> models build-docker <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> runs:/<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>/model <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>image_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> --enable-mlserver</span></code></pre></div>
<p>and</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mlflow</span>
<span id="cb4-2"></span>
<span id="cb4-3">mlflow.models.build_docker(</span>
<span id="cb4-4">    model_uri<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"runs:/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>run_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/model"</span>,</span>
<span id="cb4-5">    name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;image_name&gt;"</span>,</span>
<span id="cb4-6">    enable_mlserver<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb4-7">)</span></code></pre></div>
<p>Smooth! Obviously this might not be an optimal image, but it‚Äôll be sufficient and it‚Äôs very easy for people to build <em>good enough</em> images. All in all a helpful feature!</p>
</section>
</section>
</section>
<section id="outro" class="level1">
<h1>Outro</h1>
<p>MLFlow Models provide a simple way to deploy models in a self-contained way.</p>
<p>I hope you try out MLFlow Models as they could end up helping you a lot.</p>
<p>~Hampus Lond√∂g√•rd</p>


</section>

 ]]></description>
  <category>python</category>
  <category>mlflow</category>
  <category>deployment</category>
  <category>machine-learning</category>
  <guid>https://blog.londogard.com/posts/2025-02-25-mlflow-model/</guid>
  <pubDate>Tue, 25 Feb 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Gradio Client - An intro</title>
  <dc:creator>Hampus Lond√∂g√•rd</dc:creator>
  <link>https://blog.londogard.com/posts/2025-02-20-gradio-client/</link>
  <description><![CDATA[ 





<section id="gradio-client" class="level1">
<h1>Gradio Client</h1>
<p>Most people in the AI-sphere (Deep Learning, LLM‚Äôs) are aware of the <a href="https://www.gradio.app/">Gradio</a> project (now under the <a href="https://huggingface.co/">huggingface</a> umbrella).</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Gradio in short
</div>
</div>
<div class="callout-body-container callout-body">
<p>Gradio is a simple Machine Learning App framework that provides easy components and reactivity. See for yourself:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gradio <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> gr</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> greet(name):</span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"!"</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">demo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gr.Interface(fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>greet, inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>)</span>
<span id="cb1-7">demo.launch()</span></code></pre></div>
<p>One drawback is that <em>input, output</em>, and <em>function</em> are separated which reduces type-safety and removes all intellisense. This is a big one for me and makes me highly prefer <code>streamlit</code> &amp; <code>solara</code>. Though I can‚Äôt deny all the greatness Gradio provides to the table.</p>
</div>
</div>
<p>Even though Gradio is well-known some people might‚Äôve missed that they‚Äôve added two new projects in their fast pace!</p>
<ol type="1">
<li><a href="https://www.gradio.app/guides/getting-started-with-the-python-client"><strong><code>gradio_client</code></strong></a>: A client that can call any Gradio Application (!)
<ol type="1">
<li>Gradio clients are easily deployed on HuggingFace, and there exist a ton of them. All are now accessible in a REST-like interface (including the compute)!</li>
</ol></li>
<li><a href="https://www.gradio.app/guides/gradio-lite"><strong><code>gradio_lite</code></strong></a>: A WASM version of Gradio.
<ol type="1">
<li>Very simple to embed a Gradio app inside a HTML file or JS app.</li>
<li>They‚Äôve implemented smooth solutions for things like Multi File, PIP Requirements and more.</li>
<li>WASM brings <em>Serverless</em> deployment with <em>Low Latency</em> and high <em>Privacy</em>.</li>
</ol></li>
</ol>
<section id="how-do-i-use-gradio-client" class="level2">
<h2 class="anchored" data-anchor-id="how-do-i-use-gradio-client">How do I use Gradio Client?</h2>
<p><strong>Step 1: Connect to a Client</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> gradio_client <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Client, handle_file</span>
<span id="cb2-2"></span>
<span id="cb2-3">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Client(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abidlabs/whisper"</span>)</span></code></pre></div>
<p><strong>Step 2: Predict</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">client.predict(</span>
<span id="cb3-2">    audio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>handle_file(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"audio_sample.wav"</span>)</span>
<span id="cb3-3">)</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is a test of the whisper speech recognition model."</span> </span></code></pre></div>
<p>Easy right?!</p>
<p>If we have multiple boxes / steps in the Gradio App we can call each of the components. The client usage of any Gradio App is <strong>easily found at the bottom.</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://images.amplenote.com/627f2784-ef96-11ef-a1f4-4f6319174ddb/0c668288-7e63-4469-9d64-946abf665652.png" class="img-fluid figure-img"></p>
<figcaption>Gradio Client Button in Gradio Apps (to the left)</figcaption>
</figure>
</div>
<p>And that opens a new menu which shows how to use each box of the App.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://images.amplenote.com/627f2784-ef96-11ef-a1f4-4f6319174ddb/5dd37151-9c78-4e80-af48-94d9e78ca5a0.png" class="img-fluid figure-img"></p>
<figcaption>The API documentation and How-To-Guide after clicking</figcaption>
</figure>
</div>
</section>
<section id="available-clients" class="level2">
<h2 class="anchored" data-anchor-id="available-clients">Available Clients</h2>
<p>Anyone can run this as it supports <em>regular REST requests</em>! They supply a <code>curl</code> sample on how to query the App. But they‚Äôve got a <em>Python and JS native client.</em></p>
</section>
<section id="possibilities" class="level2">
<h2 class="anchored" data-anchor-id="possibilities">Possibilities</h2>
<p>Gradio implemented the whole thing in a way where you don‚Äôt need to do anything at all. In turn we now get user-friendly App that is easily deployed with an <em>automatically included REST API</em>. It‚Äôs two birds with one stone!</p>
<p>Combining this ‚ÄúApp+API‚Äù deployment with the free, or paid, <a href="https://huggingface.co/spaces">HuggingFace Spaces</a> creates a high-value package!</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
HuggingFace Spaces
</div>
</div>
<div class="callout-body-container callout-body">
<p>HuggingFace (HF) Spaces is as simple deployments get:</p>
<ul>
<li>Free compute<sup>1</sup>
<ul>
<li><em>ZeroGPU available using Gradio SDK</em></li>
</ul></li>
<li>Natively Support <em>streamlit, Gradio, static (webapp)</em></li>
<li>Support any app via Docker<sup>2</sup></li>
</ul>
<p>HF Spaces can deploy apps via <em>Client</em>, <em>git</em>, or <em>Drag n‚Äô Drop</em>.<br>
You get a public pretty URL <code>huggingface.co/spaces/&lt;USER&gt;/&lt;APP_NAME&gt;</code> to share. All in all a great tool that puts the power into developers hands!</p>
</div>
</div>
</section>
</section>
<section id="outro" class="level1">
<h1>Outro</h1>
<p>This blog is really short and to the point. The Gradio Client is sweet and I really wanted to share the experience.<br>
The combination of App+API written at the same time is exciting, when enhancing it with HuggingFace Spaces it all becomes magical. And Gradio‚Äôs ‚Äúauto-share‚Äù when running locally that can then provide an API too is not too shabby üòâ</p>
<p>This is it for this time,<br>
Hampus Lond√∂g√•rd</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Pay for GPU and/or better CPU‚Ü©Ô∏é</p></li>
<li id="fn2"><p>Multiple templates to get started fast‚Ü©Ô∏é</p></li>
</ol>
</section></div> ]]></description>
  <category>python</category>
  <category>app</category>
  <category>rest</category>
  <category>machine-learning</category>
  <guid>https://blog.londogard.com/posts/2025-02-20-gradio-client/</guid>
  <pubDate>Mon, 17 Feb 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Marimo - A new Notebook/App on the block!</title>
  <dc:creator>Hampus Lond√∂g√•rd</dc:creator>
  <link>https://blog.londogard.com/posts/2025-02-17-marimo/</link>
  <description><![CDATA[ 





<section id="marimo" class="level1 page-columns page-full">
<h1>Marimo</h1>
<p>Marimo is the ‚Äúnew‚Äù kid on the block. Based on what Marimo tries to achieve you can‚Äôt help yourself but comparing it too other frameworks such as <em>Gradio, Jupyter, Streamlit, Solara &amp; Panel</em>.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
A multitude of options
</div>
</div>
<div class="callout-body-container callout-body">
<p><strong>The fact that there‚Äôs a plethora of options</strong> to build WASM apps/tools and ‚Äú<em>literate programming‚Äù</em> through notebook-style <strong>is nothing short of amazing</strong><br>
We‚Äôre in for a great time!</p>
<p>Drawback? What do I choose!</p>
</div>
</div>
<p>I‚Äôll put a little focus on comparing, especially their WASM usage via <a href="https://pyodide.org/">pyodide</a>, where I the first time wrote about <a href="https://stlite.net/">stlite</a> in my <a href="https://blog.londogard.com/posts/2024-02-22-stlite/">blog</a> (Feb, 2024). Since I discovered WASM deployments via <em>base64-URLs</em> and <em>standalone-HTML-file</em> I was amazed at the opportunity to deploy simple-to-use tools for your colleagues.</p>
<p>Marimo is a reactive notebook with built-in UI components that can be turned into an app easily. It tries to become great at additional battles, such as WASM.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
My Final Thoughts
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><em>Marimo does great, it handles App use-case, Notebook and WASM phenomenally.</em> The UI components are sleek and combines in a smooth way. The one draw-back? You‚Äôll have to rewire your brain a bit with <em>reactivity</em> rather than sequential execution!</p>
<p>Interested to learn more? Read on!</p>
</div>
</div>
</div>
<section id="usage" class="level2">
<h2 class="anchored" data-anchor-id="usage">Usage</h2>
<p>I‚Äôll start by sharing <strong>my current go-to tool(s)</strong> for each area of use, and then try to fit Marimo into this.</p>
<ul>
<li><strong>Heavy Applications</strong>: <a href="https://solara.dev/">Solara</a>
<ul>
<li>Pros: ‚ÄòReact‚Äô style of programming, very efficient bindings and updates</li>
<li>Cons: Not the most modern UI,</li>
</ul></li>
<li><strong>Simple Applications</strong>: <a href="https://streamlit.io/">Streamlit</a>
<ul>
<li>Pros: Simple, Modern UI, Large Community</li>
<li>Cons: The ‚Äúexecute everything on each change‚Äù execution is quite inefficient and with caching reasoning grows harder with time</li>
</ul></li>
<li><strong>WASM Apps</strong>: Streamlit via stlite</li>
<li><strong>ML Demos with API</strong>: Gradio (and Streamlit)
<ul>
<li>Pros: Simple, provides <code>gradio_client</code> REST API by default (AMAZING)</li>
<li>Cons: I hate building Gradio apps</li>
</ul></li>
<li><strong>Notebook</strong>: Jupyter</li>
</ul>
<p><em>Marimo could possibly replace most in the list</em>, but especially WASM Apps and Notebook. Potentially it can take on ML Demos and Simple Applications too, and why not Heavy?</p>
<p>Marimo is perhaps too bold at trying to achieve it all, let‚Äôs dive into it!</p>
</section>
<section id="quick-subjective-rankings" class="level2">
<h2 class="anchored" data-anchor-id="quick-subjective-rankings">Quick (Subjective) Rankings</h2>
<table class="caption-top table">
<colgroup>
<col style="width: 12%">
<col style="width: 23%">
<col style="width: 46%">
<col style="width: 17%">
</colgroup>
<tbody>
<tr class="odd">
<td><strong>Action</strong></td>
<td>ü•á</td>
<td>ü•à</td>
<td>ü•â</td>
</tr>
<tr class="even">
<td>WASM</td>
<td>stlite, Marimo</td>
<td>py.cafe (streamlit &amp; solara), gradio</td>
<td>jupyter lite</td>
</tr>
<tr class="odd">
<td>Notebook</td>
<td>Jupyter &amp; Marimo</td>
<td>Streamlit</td>
<td>Solara, gradio</td>
</tr>
<tr class="even">
<td>App</td>
<td>Streamlit &amp; Solara</td>
<td>Marimo, gradio</td>
<td>Jupyter</td>
</tr>
</tbody>
</table>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
WASM Details on each tool
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><code>stlite</code> can be deploy as single HTML file, but depends on network then (fetching CDN resources).</li>
<li><code>marimo</code> can be deployed as a HTML folder that needs to be server, but requires no network.</li>
<li><code>stlite</code>, <code>marimo</code>, and <code>py.cafe</code> all enable ‚Äúbase64-url-apps‚Äù, i.e.&nbsp;you can have a single URL that contains the full application and can run on their webpage!</li>
<li><code>jupyterlite</code> is really good as a tool, but the share-ability is awful.</li>
<li><code>gradio</code> works decently in WASM, but it has a big pro which is its API when running the real app. The - <code>gradio_client</code> is an amazing initiative.</li>
</ul>
<p>All in all I‚Äôm amazed regarding the tools that are available to run sandboxed in your browser (all based on <a href="https://pyodide.org/en/stable/">pyodide</a>). We‚Äôre programming in a really cool part of history!</p>
</div>
</div>
</div>
<p>If we put scores on each (3,2,1 for 1st, 2nd, and 3rd) we end up with the following:</p>
<ol type="1">
<li><p><strong>Marimo &amp; Streamlit:</strong> <strong>8pts</strong></p></li>
<li><p><strong>Solara:</strong> 6pts</p></li>
<li><p><strong>Jupyter &amp; Gradio:</strong> 5pts</p></li>
</ol>
<p>It seems Marimo ends up covering all needs quite well based on my initial research.<br>
Streamlit ends up in the top because of its strong community, and <code>stlite</code> really helps the WASM story-line.</p>
<p>But how do you actually use Marimo, <strong><em>and can it beat Streamlit by having a smarter execution system?</em></strong></p>
</section>
<section id="marimo-intro" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="marimo-intro">Marimo Intro</h2>
<p>Marimo has two execution ‚Äúenvironments‚Äù, Python and WASM.</p>
<section id="python" class="level3">
<h3 class="anchored" data-anchor-id="python">Python</h3>
<p>This is essentially like running a Jupyter Notebook in your local python environment. It starts a marimo kernel that handles your execution:</p>
<pre><code>marimo edit # open marimo editor and app</code></pre>
</section>
<section id="wasm" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="wasm">WASM</h3>
<p>Running in a sandboxed Python (pyodide) environment <em>inside</em> your browser! ü§Ø</p>
<p>I‚Äôm amazed at how easy you can share ‚Äútools‚Äù with internal teams today using WASM.</p>
<ol type="1">
<li>A single HTML file without serving needs (√° la <code>stlite</code>, utilizing CDN assets)</li>
<li>A single URL that contains the code using base64-encoded string in the URL (√° la <code>stlite</code>, <code>py.cafe</code>, and <code>marimo</code>)</li>
<li>A stand-alone web app (folder with HTML file and assets) that you serve</li>
</ol>
<p>It‚Äôs such an easy way to deploy tools, and everything is sandboxed inside the browser. No need to go through IT security or have an deployment done - an amazing feat!</p>

<div class="no-row-height column-margin column-container"><div class="">
<p><strong>Resource Comparison</strong></p>
<table class="caption-top table">
<tbody>
<tr class="odd">
<td>WASM App</td>
<td>RAM</td>
</tr>
<tr class="even">
<td>Marimo</td>
<td><strong>400 MB</strong></td>
</tr>
<tr class="odd">
<td>stlite</td>
<td>600 MB</td>
</tr>
<tr class="even">
<td>jupyterlite</td>
<td>&gt;1GB</td>
</tr>
<tr class="odd">
<td>gradio_lite</td>
<td>522 MB</td>
</tr>
<tr class="even">
<td>pyodide (via <a href="https://pydantic.run/">pydantic.run</a> no UI or dependencies)</td>
<td><strong>200 MB</strong></td>
</tr>
</tbody>
</table>
</div></div><section id="marimo-wasm" class="level4">
<h4 class="anchored" data-anchor-id="marimo-wasm">Marimo WASM</h4>
<p>Marimo solves WASM quite brilliantly. Their built-in package handler makes it a breeze to add dependencies.<br>
The app looks just the same, compared to say <code>gradio</code> that degrades quite a lot with <code>gradio_lite</code>.</p>
<p>Finally as shared in the margin the resources used by Marimo is in the lower span compared to other similar apps.</p>
</section>
</section>
</section>
</section>
<section id="marimo-1" class="level1">
<h1>Marimo</h1>
<p>Marimo is easy, you simply define and use a component like following:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cell 1</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> marimo <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mo</span>
<span id="cb2-3">slider <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mo.ui.slider(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Select your step: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>slider<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb2-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">---</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cell 2</span></span>
<span id="cb2-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"You've selected </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>slider<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> which doubled is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>slider<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<p>Here we defined a slider component, we display it using markdown and in our second cell it‚Äôs neatly displayed and updated automatically because of reactivity!<br>
Bonus? You can swap the order of the cells and the code will still be valid, because of said reactivity. This is also what enforces the <em>reproducibility</em>. The code follows a DAG based on the variables.<br>
Drawback? You can‚Äôt update a variable outside the cell that defines it.</p>
<section id="a-basic-app-example" class="level2">
<h2 class="anchored" data-anchor-id="a-basic-app-example">A basic App Example</h2>
<p>I‚Äôll share examples from <a href="https://docs.marimo.io/#a-reactive-programming-environment">docs.marimo.io</a> which is a great resource to get started.</p>
<p><strong>UI Components:</strong><br>
<video src="https://docs.marimo.io/_static/readme-ui.mp4" class="img-fluid" controls=""><a href="https://docs.marimo.io/_static/readme-ui.mp4">Marimo Slider &amp; Reactivity</a></video></p>
<p><strong>DataFrame Explorer:</strong><br>
<video src="https://docs.marimo.io/_static/docs-df.mp4" class="img-fluid" controls=""><a href="https://docs.marimo.io/_static/docs-df.mp4">Marimo DataFrame Explorer - I love it!</a></video><br>
<strong>SQL Mixin</strong><br>
<img src="https://raw.githubusercontent.com/marimo-team/marimo/main/docs/_static/readme-sql-cell.png" class="img-fluid" alt="Mixing DataFrame‚Äôs and SQL in Marimo"></p>
<p><strong>Plotting Callbacks</strong><br>
<video src="https://cms.marimo.io/landing/3.mp4" class="img-fluid" controls=""><a href="https://cms.marimo.io/landing/3.mp4">Embedding Selection Callback</a></video></p>
<p><strong>Standouts:</strong></p>
<ol type="1">
<li>Deterministic Execution Order (annoying but helpful)
<ol type="1">
<li>It‚Äôs a tad bit confusing to have it possible to have cells in random order, but <strong>at least it‚Äôs reproducible</strong> compared to Jupyter!</li>
</ol></li>
<li>Built-in Package Management (especially handy for WASM)</li>
<li>Pretty elements for a notebook (comparing with ipywidgets..)
<ol type="1">
<li>What‚Äôs even cooler is that you can easily combine UI components in a markdown string. Making a seamless flow!</li>
</ol></li>
</ol>
</section>
<section id="marimo-editor" class="level2">
<h2 class="anchored" data-anchor-id="marimo-editor">Marimo Editor</h2>
<p>While the editor is excellent I found it quite poor in picking up local project files outside the script itself for auto-completion. This is where <a href="https://docs.marimo.io/guides/editor_features/watching/">watching</a> helps:</p>
<pre><code>marimo edit --watch </code></pre>
<p><br>
Which enables editing in your local IDE and watch changes in the browser. I think this is a nice balance where you can opt to edit directly in IDE or in browser depending on your current need. But VS Code / PyCharm‚Äôs built in Notebooks are unbeatable in the User Experience (i.e.&nbsp;Autocompletion + Visualization)! ü§ì</p>
<p><strong>If Marimo could pick up IntelliSense from the IDE that‚Äôd be a great improvement!</strong> Marimo handles ‚Äúproject‚Äù IntelliSense especially poor.</p>
</section>
<section id="marimo-gotchas" class="level2">
<h2 class="anchored" data-anchor-id="marimo-gotchas">Marimo Gotchas</h2>
<p>There‚Äôs a few things one need to think about when developing a Marimo app/notebook.</p>
<section id="reactive-execution" class="level3">
<h3 class="anchored" data-anchor-id="reactive-execution">Reactive Execution</h3>
<p>The reactive nature of Marimo makes it reproducible, but building Apps with reactive execution makes it simple to accidentally ‚Äútrigger‚Äù actions when you didn‚Äôt anticipate to. Especially as you might be used to Jupyter and not having ‚Äúauto-run‚Äù.</p>
<p><strong>Fixes:</strong></p>
<ol type="1">
<li>Set expensive/dangerous actions behind a button (define it in a function)</li>
<li>Apply <code>mo.stop</code> to stop execution.</li>
<li>Disable cell (<a href="https://docs.marimo.io/guides/reactivity/#disabling-cells">example</a>)</li>
<li>Make ‚Äúlazy execution‚Äù of cell or all cells. This will neatly gray cells that are out-of-sync</li>
</ol>
<p><img src="https://images.amplenote.com/384cdeec-d88b-11ef-b6ab-a76117c9f257/ec4f09a0-44df-433b-a0b1-f49b1c295418.png" class="img-fluid"></p>
<p><img src="https://images.amplenote.com/384cdeec-d88b-11ef-b6ab-a76117c9f257/08977551-7517-40c8-bf57-829cf7167b9c.png" class="img-fluid"></p>
</section>
<section id="ui-vs-root-namespace" class="level3">
<h3 class="anchored" data-anchor-id="ui-vs-root-namespace">UI vs root namespace</h3>
<p>Marimo mixes <code>mo.ui.\*</code> and <code>mo.\*</code> namespace for different things.</p>
<p><code>mo.ui.\*</code> includes reactive UI components, e.g.&nbsp;button &amp; slider, while <code>mo.\*</code> includes display UI components such as image or video.</p>
<p>This is quite confusing and I think the namespacing issue is a larger one than one might anticipate, as you tend to get lost on where to find what you wish to draw.</p>
<p>What‚Äôs cool though is that, just like Jupyter, Marimo tries to auto-display element using nice visualization.</p>
</section>
<section id="only-final-element-is-visible" class="level3">
<h3 class="anchored" data-anchor-id="only-final-element-is-visible">Only final element is visible</h3>
<p>Only the final component added is actually displayed, in my opinion all <code>mo.ui</code> components should be displayed if they‚Äôre added. It‚Äôd make more sense.</p>
<p>One can wrap elements inside a markdown text, accordion or other type of ‚Äúdisplay multiple elements‚Äù.</p>
</section>
</section>
</section>
<section id="outro" class="level1">
<h1>Outro</h1>
<p>I think Marimo all in all does really well, there‚Äôs a few sharp edges to resolve but I might replace Jupyter really soon with this. The DataFrame Explorer - Amazing. The callbacks for charts and more - Superb!</p>
<p>It‚Äôs like a harder-to-reason but better Streamlit if that makes sense? With more components it‚Äôll be golden!</p>
<p>Thanks for this time,<br>
Hampus Lond√∂g√•rd</p>


</section>

 ]]></description>
  <category>python</category>
  <category>app</category>
  <category>notebook</category>
  <guid>https://blog.londogard.com/posts/2025-02-17-marimo/</guid>
  <pubDate>Mon, 17 Feb 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Image to Lego (Xmas Project)</title>
  <dc:creator>Hampus Lond√∂g√•rd</dc:creator>
  <link>https://blog.londogard.com/posts/2025-01-09-img-2-lego/</link>
  <description><![CDATA[ 





<p>Merry Christmas, Happy Holidays and a Good New Year! ü•≥</p>
<blockquote class="blockquote">
<p>Disclaimer: I‚Äôm not affiliated with LEGO and this is a personal project.</p>
</blockquote>
<p>Ever wished you could turn a photo into a LEGO masterpiece? This holiday season, while my son napped, I did!<br>
I‚Äôve been passionately working on what might be my most entertaining project since I built my own Baby Monitor (<a href="../../posts/2022-11-06-babymonitor-pt-1">1</a>, <a href="../../posts/2023-02-06-baby-monitor-pt-p2">2</a>): <strong>a tool that transforms any image into a buildable 3D LEGO model, complete with layer-by-layer instructions, basically like a real LEGO set!</strong></p>
<p>The idea had been brewing in my mind for a few years, but a recent request from my friend Oscar J finally gave me the motivation to bring it to life!</p>
<section id="result-demo" class="level1">
<h1>Result / Demo</h1>
<p>I built an Gradio application, mainly as a learning excercise. Usually I prefer Streamlit or Solara for my applications, but Gradio is growing fast and I wanted to try it in a ‚Äúreal project‚Äù.</p>
<div>

</div>
<div class="quarto-layout-panel" data-layout="[[2,1], [1,1]]">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 66.7%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2025-01-09-img-2-lego/build_img.png" class="img-fluid figure-img"></p>
<figcaption>Visualization of the Image to LEGO Flow</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2025-01-09-img-2-lego/lego_build_instruct.gif" class="img-fluid figure-img"></p>
<figcaption>LEGO Build Instruction GIF</figcaption>
</figure>
</div>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2025-01-09-img-2-lego/lego_bricks_1.png" class="img-fluid figure-img"></p>
<figcaption>Visualization of LEGO Bricks (notice how it‚Äôs bricks and not Voxels)</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2025-01-09-img-2-lego/lego_bricks_2.png" class="img-fluid figure-img"></p>
<figcaption>Visualization of LEGO Bricks (notice how it‚Äôs bricks and not Voxels)</figcaption>
</figure>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Complete walkthrough: From image input to 3D LEGO model with instructions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="quarto-video"><video id="video_shortcode_videojs_video1" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="full_flow.mp4"></video></div>
</div>
</div>
</div>
<p>Not to brag, but the results are quite magical in my opinion.<br>
Intrigued? Keep reading to learn how I built this image-to-LEGO generator!</p>
</section>
<section id="project-layout" class="level1">
<h1>Project Layout</h1>
<p>My first step was to research existing solutions. While there are tools for image-to-3D model conversion and voxelization, I couldn‚Äôt find anything specifically to build LEGO models with accurate, buildable bricks and ‚Äúinstructions‚Äù. This meant I had to build most of the pipeline from scratch. Here‚Äôs the steps I identified:</p>
<ol type="1">
<li><strong>Turn image into 3D object (Deep Learning):</strong> Use a deep learning model to generate a 3D mesh from a single 2D image.</li>
<li><strong>Voxelize Mesh (Algorithmic):</strong> Convert the 3D mesh into a voxelized representation, essentially breaking it down into cubes.</li>
<li><strong>Colorize Voxels with LEGO approved colors (Algorithmic):</strong> Map the colors of the voxels to the closest matching colors from a predefined LEGO color palette.</li>
<li><strong>Merge Voxels into LEGO sized bricks (Algorithmic):</strong> Combine adjacent voxels into standard LEGO brick shapes, optimizing for larger bricks while preserving the overall shape.
<ol type="a">
<li>This involves finding the right balance between using larger, more efficient bricks and accurately representing the details of the original model.</li>
</ol></li>
</ol>
<p>This list might make it sound easy, but it really is an interesting and challenging problem!</p>
<section id="image-to-mesh-from-2d-photo-to-3d-model" class="level2">
<h2 class="anchored" data-anchor-id="image-to-mesh-from-2d-photo-to-3d-model">Image to Mesh: From 2D Photo to 3D Model</h2>
<p>Getting from a single 2D image to a 3D model isn‚Äôt exactly a walk in the park. Traditionally, people have done this by algorithmically stitching together a bunch of photos taken from different angles, creating a 3D point cloud.</p>
<p>That multi-image approach might work for professionals, but for your average LEGO builder? I don‚Äôt think so.<br>
It‚Äôs a hassle to take all those photos, and getting them to stitch together correctly? Not fun.</p>
<p>I wanted a smoother experience, one where you can just use a <strong>single image</strong> to get your 3D model, and that‚Äôs why I went with deep learning. Basically, you train a model on tons of images and their corresponding 3D models. Then, when you give it a new image, it can make educated guesses about the 3D shape, even the parts you can‚Äôt see. We‚Äôre shifting the heavy lifting of data collection from the user during the model‚Äôs use to the training phase, which makes things much easier. For this project I‚Äôm using a two-step process:</p>
<ol type="1">
<li><strong>Generate Multi-View Images:</strong> A diffusion model takes the single input image and generates multiple views of the object as if it were photographed from different angles.</li>
<li><strong>Reconstruct 3D Mesh from Multi-View Images:</strong> Another deep learning model takes these generated views and creates a coherent 3D mesh, essentially filling in the gaps between the different perspectives.</li>
</ol>
<p>It‚Äôs not perfect, and the model might struggle with unusual objects or bad lighting. But, it‚Äôs a lot better than manually stitching images, and it gets us closer to that one-click LEGO dream. Now, with a 3D mesh in hand, we can move on to the next steps!</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The perfect dataset easily available
</div>
</div>
<div class="callout-body-container callout-body">
<blockquote class="blockquote">
<p>A <em>sweet bonus</em> is that we can build our dataset inside Game Engines very easily! Combining real data and synthetic data built in a Game Engine is perfect and makes it easy to have a <em>great</em> dataset.</p>
</blockquote>
</div>
</div>
<section id="steps-for-a-deep-learning-approach" class="level3">
<h3 class="anchored" data-anchor-id="steps-for-a-deep-learning-approach">Steps for a Deep Learning approach</h3>
<p>How do we actually turn a image into a mesh through Deep Learning? The idea is quite straight-forward and people without knowledge should understand what is happening under-the-hood, though not mathematically.</p>
<section id="step-1-turn-image-into-multi-angle-images" class="level4">
<h4 class="anchored" data-anchor-id="step-1-turn-image-into-multi-angle-images">Step 1: Turn image into multi-angle images</h4>
<p>To get around the need for multiple input images, the first step in my approach is to generate them artificially. We use a Diffusion Model for this. This model is able to look at your single image and create new images of the same object, but from different angles, by generalizing from a large diverse dataset that it has trained on.</p>
</section>
<section id="step-2-generate-mesh-model-from-multi-angle-images" class="level4">
<h4 class="anchored" data-anchor-id="step-2-generate-mesh-model-from-multi-angle-images">Step 2: Generate mesh (model) from multi-angle images</h4>
<p>With the generated multi-angle, e.g.&nbsp;6, images we stitch/generate a mesh structure to work with through another Deep Learning Model! The model at hands needs to fill the sparse data into a 3D mesh. This can be done in multiple ways depending on how you‚Äôd like to define the resulting mesh.</p>
<p>Once we have our 3D mesh we can head to the next step, i.e.&nbsp;voxelation.</p>
</section>
<section id="step-3-mesh-to-voxels" class="level4">
<h4 class="anchored" data-anchor-id="step-3-mesh-to-voxels">Step 3: Mesh to Voxels</h4>
<p>This is a ‚Äúsolved‚Äù problem and it‚Äôs easy to voxelize using <em>trimesh</em>, a python library. Trimesh delivers the voxels, or cubes, in grey-scale and we need to add colors ourselves.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> voxelize(mesh_path: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> Path, resolution: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb1-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Voxelize the mesh based on a resolution parameter. Resolution is how many bricks it should contain, i.e. 16 creates a 16x16 base plate."""</span></span>
<span id="cb1-3">    mesh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trimesh.load(mesh_path)</span>
<span id="cb1-4">    bounds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mesh.bounds</span>
<span id="cb1-5">    voxel_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (bounds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> bounds[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> resolution  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pitch</span></span>
<span id="cb1-6">    voxels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mesh.voxelized(pitch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>voxel_size)</span></code></pre></div>
</section>
<section id="step-4-colorize-voxels" class="level4">
<h4 class="anchored" data-anchor-id="step-4-colorize-voxels">Step 4: Colorize Voxels</h4>
<p>With the voxels in place, we need to color them. We start by assigning each voxel the ‚Äòtrue‚Äô color from the original mesh, found by identifying the nearest point on the mesh‚Äôs surface to the voxel‚Äôs center. That is the color won‚Äôt be an ‚Äúapproved‚Äù LEGO color for now.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> tree_knearest_colors(mesh, voxels):</span>
<span id="cb2-2">    tree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cKDTree(mesh.vertices)</span>
<span id="cb2-3">    _, vertex_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tree.query(voxels.points, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> mesh.visual.vertex_colors[vertex_indices]</span></code></pre></div>
<p>The <code>cKDTree</code> is an <em>approximate nearest neighbour</em>, which means it‚Äôs fast and good enough.</p>
</section>
<section id="step-5-quantize-colors-into-lego-palette" class="level4">
<h4 class="anchored" data-anchor-id="step-5-quantize-colors-into-lego-palette">Step 5: Quantize Colors into LEGO palette</h4>
<p>As mentioned our colors is based on the 3D model rather than the LEGO palette, we need to transform them into LEGO palette to be able to order have LEGO bricks.<br>
This task could be done in multiple ways, I opted for the simple Euclidean distance of the RGB array. A better approach would be to utilize <a href="https://en.wikipedia.org/wiki/CIELAB_color_space">LAB</a> color-space as that‚Äôs more similar to what humans perceive. LAB conversion isn‚Äôt as smooth as I had hoped (possible via <code>colormath</code>), and I wanted to wrap up my application, hence the RGB Euclidean Distance.</p>
<blockquote class="blockquote">
<p>I did try LAB and didn‚Äôt see a better result, but I didn‚Äôt put too much effort into it and there might be a better way to make it work.</p>
</blockquote>
</section>
<section id="step-6-merge-voxels-into-lego-bricks" class="level4">
<h4 class="anchored" data-anchor-id="step-6-merge-voxels-into-lego-bricks">Step 6: Merge Voxels into LEGO Bricks</h4>
<p>Our final step is to go from voxels (1x1 bricks) into bigger LEGO bricks. No sane person would enjoy building a LEGO with only 1x1 bricks! üòÇ</p>
<p>My current approach is dead simple, greedy starting from largest area bricks and iteratively trying smaller sizes. I‚Äôm utilizing a vectorized approach rather than the traitional ‚Äúgraph-based‚Äù one, e.g.&nbsp;Depth-First-Search (DFS).</p>
<p>Our problem has some constraints which means that it fits vectorized approaches very well. The constraints to merge voxels follows:</p>
<ol type="1">
<li>Same color</li>
<li>Same z-level</li>
</ol>
<p>The code is quite simple when treating it as a vectorized problem and utilizing numpy indexing.</p>
<ol type="1">
<li>Treat each Z-level as a matrix</li>
<li>Treat each color as a number inside the matrix</li>
<li>Apply equality</li>
<li>Validate if we can fit our brick, say 2x6, if <code>np.all()</code> then it‚Äôs true
<ol type="a">
<li>Only apply this validation starting from an existing coordinate of the voxels</li>
</ol></li>
<li>Place brick when a brick found, iteratively moving down in size</li>
</ol>
</section>
</section>
</section>
</section>
<section id="future-work" class="level1">
<h1>Future Work</h1>
<p>There‚Äôs still a lot of work to improve the resulting lego model. The biggest flaws are that there‚Äôs too many small bricks and that the colors are not great‚Ä¶</p>
<section id="improve-colors" class="level2">
<h2 class="anchored" data-anchor-id="improve-colors">Improve colors</h2>
<p>The first problem that would solve a lot is to have better colors.</p>
<p>With better colors we‚Äôd be able to merge into bigger bricks, as we‚Äôre not allowed to put different colors into the same brick. The end-goal would be to reduce A) Shadows and B) Gradients, simplifying the model into something of lower color resolution.</p>
<p>I have a hard time seeing that I can solve this fully through algorithms (already having tried LAB color space) and believe that I‚Äôd need to train a new Deep/Machine Learning model to achieve better results. That model would be able to better opt for which color to use and potentially even reduce weird colors that don‚Äôt fit the greater picture. Additionally it could have higher resolution for small important things like eyes.</p>
<p>That is potential fixes:</p>
<ul>
<li>Apply ML to predict fewer colors</li>
<li>Apply some type of kernel that remove gradients but keep edges</li>
<li>‚Ä¶and probably something else not in my mind right now!</li>
</ul>
</section>
<section id="bigger-bricks" class="level2">
<h2 class="anchored" data-anchor-id="bigger-bricks">Bigger bricks</h2>
<p><strong>First fix: Better Colors</strong><br>
See previous section.</p>
<p><strong>Second fix: Filling Empty Space</strong><br>
Our 3D model is currently empty in the middle, this void could be filled to enable larger bricks. Sometimes we fill with 2 1x1 bricks rather than using a larger brick because we‚Äôre not allowed to place it in the empty void.</p>
<p>This task is most likely simple to solve algorithmically, but some ‚Äúvoids‚Äù we wouldn‚Äôt want to fill. It should only be filled if hidden from most angles, i.e.&nbsp;we wouldn‚Äôt want to fill the void inside a leg of the Eifel Tower as that‚Äôs supposed to be a empty void rather than filled.</p>
</section>
</section>
<section id="outro" class="level1">
<h1>Outro</h1>
<p>This was (and is) a very exciting project that I‚Äôll keep on working on whenever I get a short burst of time. There‚Äôs some important improvements to add before the project is truly <em>User Friendly‚Ñ¢</em>.</p>
<p>The research in what type of approaches are available was a fun one and to implement the algorithms brought me back to my time at Apple, but with the knowledge gained from working in a more mathematical setting later, i.e.&nbsp;applying vectorization.</p>
<p>Finally the result is impressive and something I can use already today. I can‚Äôt wait to order bricks for my first LEGO build!</p>
<p>Thanks for this time,<br>
Hampus Lond√∂g√•rd</p>


</section>

 ]]></description>
  <category>python</category>
  <category>project</category>
  <category>packaging</category>
  <guid>https://blog.londogard.com/posts/2025-01-09-img-2-lego/</guid>
  <pubDate>Thu, 09 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Pixi - Real World Usage</title>
  <dc:creator>Hampus Lond√∂g√•rd</dc:creator>
  <link>https://blog.londogard.com/posts/2024-12-17-pixi-real-usage/</link>
  <description><![CDATA[ 





<p>Managing dependencies and environments across multiple platforms can be a nightmare. That‚Äôs why I was thrilled to discover <a href="pixi.sh/dev/">Pixi</a>. I‚Äôve previous talked about Pixi on LinkedIn/Twitter, but haven‚Äôt used it in any ‚Äúserious‚Äù project until recently and so far it has worked exceptional!</p>
<p>Imagine a tool that combines the speed and efficiency of <a href="https://github.com/astral-sh/uv"><em>uv</em></a> with the robust package management of <a href="https://github.com/mamba-org/mamba"><em>mamba</em></a>. That‚Äôs Pixi in a nutshell. Built from the expertise drawn from as the mamba creators and utilizing <code>uv</code> for PyPi dependenciess, Pixi offers a streamlined, powerful way to manage Python environments. Compared to <em>mamba</em>, <em>pixi</em> takes things one step further as their PyPi-dependencies are tested with conda on top of the additional tools brought by pixi, such as <em>tasks</em>.</p>
<p>Cherry on top? Pixi is lightning fast and enables multi-platform &amp; multi-environment inside a single file where everything is synced together.</p>
<blockquote class="blockquote">
<p>Multi-platform, multi-environment means that we can sync dependencies between osx-arm64, linux-64, CUDA, CPU, ‚Ä¶ - a standout feature!</p>
</blockquote>
<section id="pixi-docker-builds" class="level2">
<h2 class="anchored" data-anchor-id="pixi-docker-builds">Pixi Docker Builds</h2>
<p>After solving your local environment in a easy yet producible manner the next step is to solve it for your cloud workloads - <em>containerization</em>.</p>
<p>Containerization is an important part of a developers toolkit in the modern world. To run cloud workloads it‚Äôs very common to deploy as a container, in Data Science this is for everything like Training, Inference and Data Pipelines.</p>
<p>With pixi it‚Äôs quite straight-forward and they provide ready-to-use images through the <a href="https://github.com/prefix-dev/pixi-docker">pixi-docker</a> registry. There‚Äôs multiple base-images, including CUDA, to get started - it can‚Äôt be any simpler!</p>
<section id="pixi-sample-docker-builds" class="level3">
<h3 class="anchored" data-anchor-id="pixi-sample-docker-builds">Pixi Sample Docker Builds</h3>
<p>Simple starter:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> pull ghcr.io/prefix-dev/pixi:latest</span></code></pre></div>
<p>Find the different tags on <a href="https://github.com/prefix-dev/pixi-docker?tab=readme-ov-file#pulling-the-images">Pixi Docker tags page</a>.</p>
<p>Efficient Production build by using Docker Multi-Stage Build: <a href="https://github.com/prefix-dev/pixi-docker?tab=readme-ov-file#usage-with-shell-hook">prefix-docker/shell-hook</a>.</p>
</section>
<section id="pixi-docker-build-on-aws-sagemaker" class="level3">
<h3 class="anchored" data-anchor-id="pixi-docker-build-on-aws-sagemaker">Pixi Docker Build on AWS Sagemaker</h3>
<p>Sagemaker can be quite challenging to work with. While deploying custom Docker builds is easiest using their own base image, this image is often bloated with unnecessary dependencies. Additionally, to run <code>@remote</code> jobs on AWS, you need to include a <code>conda</code> or <code>mamba</code> environment - something that <code>pixi</code> doesn‚Äôt inherently use.</p>
<p><strong>So, how do we integrate Pixi with Sagemaker?</strong></p>
<p>Here‚Äôs a workaround to make them play nicely together:</p>
<ol type="1">
<li><strong>Include <code>micromamba</code>:</strong> Add <code>micromamba</code> (available on <code>conda-forge</code>) as a dependency in your <code>pixi.toml</code>. This will allow us to create a conda-like environment within our Pixi setup.
<ul>
<li>In the future this could be done using a simple shell script, which is a planned improvement in my own projects.</li>
</ul></li>
<li><strong>Add <code>micromamba</code> to <code>$PATH</code>:</strong> Ensure that the <code>micromamba</code> executable installed by Pixi is added to your system‚Äôs <code>$PATH</code>. This will make it accessible to Sagemaker.</li>
<li><strong>Set Environment Variables:</strong> Configure necessary environment variables like <code>CONDA_PREFIX</code> to point to the appropriate location where <code>micromamba</code> will manage your environment.</li>
</ol>
<p>With these steps, you‚Äôre ready to run your Pixi-managed projects on Sagemaker!</p>
<p>In my experiments, this approach significantly reduced the size of my CUDA images from around 12 GB down to 4.5 GB - a massive improvement in terms of storage and deployment speed!</p>
</section>
</section>
<section id="pixi-multi-platformenvironment" class="level2">
<h2 class="anchored" data-anchor-id="pixi-multi-platformenvironment">Pixi Multi-Platform/Environment</h2>
<p>One of Pixi‚Äôs standout features is its seamless support for multi-platform and multi-environment projects. While I initially planned to delve deeper into this, prefix.dev recently published an excellent guide on the topic. I highly recommend checking out their documentation on <a href="https://pixi.sh/dev/features/pytorch/#mixing-macos-and-cuda-with-pypi-dependencies">combining different OS‚Äôs and environments (CPU, CUDA) with PyTorch</a> for a comprehensive overview.</p>
<section id="some-personal-comments" class="level3">
<h3 class="anchored" data-anchor-id="some-personal-comments">Some Personal Comments</h3>
<p>Personally I find this part of pixi one of the biggest strengths, especially how easy it is to work with! To build a docker image you simply follow the basic example above, opting for <code>--feature=cuda</code>.<br>
The part of keeping lock-files on everything, while allowing certain OS:es missing out on dependencies makes it very practical in real-world scenarios!</p>
</section>
</section>
<section id="pixi-build-slimmming" class="level2">
<h2 class="anchored" data-anchor-id="pixi-build-slimmming">Pixi Build Slimmming</h2>
<p>When containerizing your code, it‚Äôs crucial to keep builds slim. Here are a few tricks to help you minimize your Pixi-based Docker images:</p>
<ol type="1">
<li><strong>Leverage <code>.dockerignore</code>:</strong> Create a <code>.dockerignore</code> file to exclude unnecessary files and directories (e.g., <code>.git</code>, <code>__pycache__</code>, tests) from your Docker build context.</li>
<li><strong>Optimize Dependencies:</strong>
<ul>
<li>Carefully consider each dependency and remove any that are not strictly required for production.</li>
<li>Utilize multiple environments within your <code>pixi.toml</code>, e.g.&nbsp;<code>prod</code> and <code>dev</code> environments. This allows you to exclude dev-specific dependencies (test, lint, ..) from your production container.</li>
</ul></li>
<li><strong>Employ Multi-Stage Docker Builds:</strong> Multi-stage builds reduces the image size. Use a build stage to install dependencies and compile your application, and then copy only the necessary artifacts to a smaller, leaner final image. The <code>pixi-docker</code> project provides guidance on using <a href="https://github.com/prefix-dev/pixi-docker?tab=readme-ov-file#usage-with-shell-hook">multi-stage builds with shell-hook</a>.</li>
</ol>
</section>
<section id="pixi-vs-uv" class="level1">
<h1>Pixi vs uv</h1>
<p>While <em>uv</em> has gained significant traction in the Python community, I believe <em>Pixi</em> offers a more compelling solution for my specific needs, especially when it comes to complex, real-world projects.</p>
<p>Why?</p>
<ol type="1">
<li><strong><code>tasks</code> are awesome.</strong> They might not be perfect but they‚Äôre great to me!</li>
<li><strong>Multi-platform and Multi-environment projects</strong> (personal opinion) somehow ends up easier in Pixi
<ul>
<li>I really tried to embrace the <code>uv</code> approach as I appreciate it as more lightweight. But Pixi is somehow ‚Äúsmoother‚Äù.</li>
</ul></li>
<li><strong>Pixi has base-images with CUDA</strong>
<ul>
<li>Both tools are easy to build from a raw base-image too, so it‚Äôs not a huge problem</li>
</ul></li>
<li><strong>Access to <code>conda</code> packages</strong>
<ul>
<li>Some hate it, but I like getting pre-built binaries.</li>
<li>It‚Äôs quite interesting to install shell tools via <code>conda</code> for container deployment.</li>
</ul></li>
<li><strong>Possible to work with other languages than Python</strong></li>
</ol>
<section id="what-is-the-one-big-uv-pro" class="level3">
<h3 class="anchored" data-anchor-id="what-is-the-one-big-uv-pro">What is the one big <code>uv</code> pro?</h3>
<p><a href="https://docs.astral.sh/uv/guides/scripts/#declaring-script-dependencies">UV‚Äôs Inline Script Dependencies</a></p>
<p>I think this feature is really cool, <del>but as pixi utilize <code>uv</code> you can use it in <code>pixi</code> too! ;)</del> but it‚Äôs quite easy to replicate in <code>pixi</code> as well (including with <code>uv</code>)! ;)</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
How to run in ‚Äòinline script‚Äô in Pixi
</div>
</div>
<div class="callout-body-container callout-body">
<p>Simply call <code>pixi exec uv run a.py</code>. See the <a href="https://pixi.sh/latest/reference/cli/#exec">docs (cli/#exec)</a> where you‚Äôre able to also run shell-scripts with a <a href="https://pixi.sh/latest/advanced/shebang/">shebang</a>. This will actually install <code>uv</code> in a temporary env, and then use that <code>uv</code>.</p>
<p>A bonus of <code>exec</code> is that if you instead use the ‚Äúpixi-native‚Äù <del><code>--scope</code></del> <code>--spec</code> it supports conda too, e.g.&nbsp;<code>pixi exec -s polars -s altair python</code> to run a temporary python venv with <code>polars</code> &amp; <code>altair</code>.</p>
<p><strong>Edit:</strong> Added this callout 2025-03-07 and updated 2025-03-10 based on feedback from <em>markusschlenker</em>.</p>
</div>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># /// script</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dependencies = [</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   "requests&lt;3",</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   "rich",</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ]</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ///</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb2-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rich.pretty <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pprint</span>
<span id="cb2-10"></span>
<span id="cb2-11">resp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://peps.python.org/api/peps.json"</span>)</span>
<span id="cb2-12">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resp.json()</span>
<span id="cb2-13">pprint([(k, v[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data.items()][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>])</span></code></pre></div>
</section>
</section>
<section id="outro" class="level1">
<h1>Outro</h1>
<p>If you‚Äôre a Python developer struggling with dependency management, environment inconsistencies, or cumbersome container builds, I urge you to give Pixi a try. It‚Äôs a powerful tool that has the potential to streamline your workflow and make you a happier developer. Pixi has certainly made a significant difference in mine!</p>
<p>Thanks for this time, Hampus Lond√∂g√•rd</p>


</section>

 ]]></description>
  <category>python</category>
  <category>dependencies</category>
  <category>packaging</category>
  <guid>https://blog.londogard.com/posts/2024-12-17-pixi-real-usage/</guid>
  <pubDate>Tue, 17 Dec 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Loading - Comparing Common Tooling</title>
  <dc:creator>Hampus Lond√∂g√•rd</dc:creator>
  <link>https://blog.londogard.com/posts/2024-12-03-data-loading-comparison/</link>
  <description><![CDATA[ 





<p>This blog was supposed to be more in-depth but my enthusiasm was drastically cut and I felt like splitting it up into multiple smaller one, whereas <a href="../../posts/2024-10-24-data-loading-daft/">daft one</a> is already uploaded.</p>
<blockquote class="blockquote">
<p>I started writing a ‚Äúrecipe-book‚Äù for <code>daft</code> where I realized it wasn‚Äôt as smoothly integrated as a lot of other tools. I believe that the <code>DataFrame</code> format is both a winning and loosing concept, it‚Äôs very helpful but when you need to use two columns the way <code>Ray</code>, <code>HuggingFace Datasets</code> and others map data using <code>dict</code> is a winning concept for both <em>element by element</em> and <em>batch</em> mapping. With a <code>dict</code> way to map <code>DataFrame</code> I think that <code>daft</code> might end up the perfect tool.</p>
<p>For now I believe Daft is better utilized as an ETL framework, but in the near future it might become great for ML too.</p>
</blockquote>
<p>Anyhow, today I‚Äôll compare the developer experience and performance of different tools for data loading.</p>
<ol type="1">
<li><a href="https://huggingface.co/docs/datasets/index">HuggingFace Datasets</a></li>
<li><a href="https://docs.ray.io/en/latest/data/data.html">Ray Data</a></li>
<li><a href="https://getdaft.io/">Daft</a></li>
<li><a href="https://pytorch.org/">‚ÄúPyTorch Native‚Äù (Dataset &amp; DataLoader)</a></li>
</ol>
<p>All of the chosen tools are quite awesome, but HuggingFace and Ray can export to TensorFlow additionally. Although Ray currently cannot handle <code>RaggedTensor</code> which is required for models with variable output - a letdown!</p>
<section id="quick-introduction" class="level2">
<h2 class="anchored" data-anchor-id="quick-introduction">Quick Introduction</h2>
<p><strong>Hugging Face Datasets</strong> offers easy access to a vast library of datasets, with efficient memory handling through streaming and memory-mapping. Its API simplifies data loading and transformation for direct use with PyTorch and TensorFlow.</p>
<p><strong>Ray Data</strong> enables scalable, distributed data processing across multiple nodes, ideal for large datasets. It integrates with Ray‚Äôs ML tools for parallel training and distributed transformations. It‚Äôs the tool for Large Language Model training, even embraced by OpenAI in their ChatGPT <a href="https://thenewstack.io/how-ray-a-distributed-ai-framework-helps-power-chatgpt/">source</a>.</p>
<p><strong>Daft</strong> is a high-performance data processing library with lazy evaluation, optimized for structured data formats like Parquet and Arrow. It‚Äôs a strong choice for single-node and multi-node data preparation with PyTorch compatibility. It utilizes Ray to achieve multi-node behavior.</p>
<p><strong>PyTorch‚Äôs Dataset and DataLoader</strong> offer a simple and flexible way to load data with minimal memory overhead, ideal for in-memory and custom datasets. It‚Äôs lightweight but lacks distributed and lazy loading features.</p>
<table class="caption-top table">
<caption>Table Summarization</caption>
<colgroup>
<col style="width: 28%">
<col style="width: 24%">
<col style="width: 9%">
<col style="width: 4%">
<col style="width: 32%">
</colgroup>
<thead>
<tr class="header">
<th>Feature</th>
<th>Hugging Face Datasets</th>
<th>Ray Data</th>
<th>Daft</th>
<th>PyTorch Dataset + DataLoader</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Parallel Processing</td>
<td>+</td>
<td>+++</td>
<td>++</td>
<td>+</td>
</tr>
<tr class="even">
<td>Distributed Processing</td>
<td>0</td>
<td>+++</td>
<td>+++</td>
<td>0</td>
</tr>
<tr class="odd">
<td>Caching &amp; Memory Mapping</td>
<td>+++</td>
<td>+</td>
<td>+</td>
<td>0</td>
</tr>
<tr class="even">
<td>Lazy Loading</td>
<td>+++</td>
<td>++</td>
<td>+++</td>
<td>+++ (depends)</td>
</tr>
<tr class="odd">
<td>Simple to Use</td>
<td>+++</td>
<td>+</td>
<td>++</td>
<td>+++</td>
</tr>
<tr class="even">
<td>Built-in Dataset Access</td>
<td>+++</td>
<td>0</td>
<td>0</td>
<td>+++</td>
</tr>
<tr class="odd">
<td>Custom Transformations</td>
<td>++</td>
<td>+++</td>
<td>+++</td>
<td>+++</td>
</tr>
<tr class="even">
<td>ML Framework Support</td>
<td>+++</td>
<td>+++</td>
<td>++</td>
<td>++</td>
</tr>
</tbody>
</table>
</section>
<section id="mini-benchmark" class="level2">
<h2 class="anchored" data-anchor-id="mini-benchmark">Mini Benchmark</h2>
<table class="caption-top table">
<colgroup>
<col style="width: 32%">
<col style="width: 13%">
<col style="width: 13%">
<col style="width: 6%">
<col style="width: 20%">
<col style="width: 12%">
</colgroup>
<thead>
<tr class="header">
<th>Tool</th>
<th>Num_worker</th>
<th>Pin_memory</th>
<th>Cache</th>
<th>Configuration</th>
<th>Time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>HF Element</strong></td>
<td>None</td>
<td>None</td>
<td>False</td>
<td>.map</td>
<td>6m48s</td>
</tr>
<tr class="even">
<td></td>
<td>None</td>
<td>None</td>
<td>True</td>
<td>.with_transform</td>
<td><strong>3m23s</strong></td>
</tr>
<tr class="odd">
<td><strong>HF Batched</strong></td>
<td>None</td>
<td>None</td>
<td>False</td>
<td>.map</td>
<td>7m14s</td>
</tr>
<tr class="even">
<td></td>
<td>None</td>
<td>None</td>
<td>True</td>
<td>.map</td>
<td><strong>3m22s</strong></td>
</tr>
<tr class="odd">
<td><strong>Torch Dataset/Loader</strong></td>
<td>None</td>
<td>None</td>
<td>-</td>
<td>Default</td>
<td><strong>3m20s</strong></td>
</tr>
<tr class="even">
<td><strong>Daft</strong></td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>daft-default</td>
<td>14m55s</td>
</tr>
<tr class="odd">
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>daft-native</td>
<td><strong>3m30s</strong></td>
</tr>
<tr class="even">
<td><strong>Ray</strong></td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>Default</td>
<td>7m41s</td>
</tr>
</tbody>
</table>
<p>Running on full sized images we get a bit more interesting results:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 25%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 6%">
<col style="width: 17%">
<col style="width: 25%">
</colgroup>
<thead>
<tr class="header">
<th>Tool</th>
<th>Num_worker</th>
<th>Pin_memory</th>
<th>Cache</th>
<th>Configuration</th>
<th>Time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Additional Tests</strong></td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>torch</td>
<td>4m19s</td>
</tr>
<tr class="even">
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>hf_with_transf</td>
<td>4m40s</td>
</tr>
<tr class="odd">
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>hf_map</td>
<td>8m14s, cached: 7m21s</td>
</tr>
<tr class="even">
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>daft</td>
<td><strong>3m49s</strong></td>
</tr>
</tbody>
</table>
</section>
<section id="developer-experience-dx" class="level2">
<h2 class="anchored" data-anchor-id="developer-experience-dx">Developer Experience (DX)</h2>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">HuggingFace Datasets</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">PyTorch ‚Äúnative‚Äù</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Daft</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-4" aria-controls="tabset-1-4" aria-selected="false">Ray</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> test_elem_by_elem(num_workers: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, pin_memory: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, cache: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>):</span>
<span id="cb1-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> cache:</span>
<span id="cb1-3">        datasets.disable_caching()</span>
<span id="cb1-4"></span>
<span id="cb1-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _preprocess(data: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb1-6">        imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [utils.PREPROCESS_TRANSFORMS(x.convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RGB"</span>)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>]]</span>
<span id="cb1-7">        data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> imgs</span>
<span id="cb1-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> data</span>
<span id="cb1-9"></span>
<span id="cb1-10">    ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.load_from_disk(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./imagenette_full_size"</span>)</span>
<span id="cb1-11"></span>
<span id="cb1-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _augment(data: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb1-13">        tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _preprocess(data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>])</span>
<span id="cb1-14">        data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> utils.AUGMENTATIONS(tensor)</span>
<span id="cb1-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> data</span>
<span id="cb1-16"></span>
<span id="cb1-17">    ds_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>].with_transform(_augment)</span>
<span id="cb1-18">    ds_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"validation"</span>].with_transform(_preprocess)</span>
<span id="cb1-19"></span>
<span id="cb1-20">    kwargs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(</span>
<span id="cb1-21">        num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_workers <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb1-22">        persistent_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(num_workers),</span>
<span id="cb1-23">        pin_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pin_memory,</span>
<span id="cb1-24">        batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,</span>
<span id="cb1-25">    )</span>
<span id="cb1-26">    dls_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(ds_train, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb1-27">    dls_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(ds_valid, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb1-28">    </span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ImagenetteDataset(Dataset):</span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, hf_dataset, preprocess<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, augment<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb2-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hf_dataset</span>
<span id="cb2-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.preprocess <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preprocess</span>
<span id="cb2-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.augment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> augment</span>
<span id="cb2-6"></span>
<span id="cb2-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hf_dataset)</span>
<span id="cb2-9"></span>
<span id="cb2-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, idx):</span>
<span id="cb2-11">        data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hf_dataset[idx]</span>
<span id="cb2-12"></span>
<span id="cb2-13">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>].convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RGB"</span>)</span>
<span id="cb2-14"></span>
<span id="cb2-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply preprocessing and augmentation if specified</span></span>
<span id="cb2-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.preprocess:</span>
<span id="cb2-17">            image: torch.Tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.preprocess(image)</span>
<span id="cb2-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.augment:</span>
<span id="cb2-19">            image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.augment(image)</span>
<span id="cb2-20"></span>
<span id="cb2-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb2-22">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>: image,</span>
<span id="cb2-23">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>: data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>],</span>
<span id="cb2-24">        }</span>
<span id="cb2-25">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImagenetteDataset(</span>
<span id="cb2-26">    ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>], preprocess<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>utils.PREPROCESS_TRANSFORMS</span>
<span id="cb2-27">)</span>
<span id="cb2-28"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataset))</span>
<span id="cb2-29">valid_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImagenetteDataset(</span>
<span id="cb2-30">    ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"validation"</span>], preprocess<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>utils.PREPROCESS_TRANSFORMS</span>
<span id="cb2-31">)</span>
<span id="cb2-32"></span>
<span id="cb2-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create DataLoader instances</span></span>
<span id="cb2-34">kwargs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(</span>
<span id="cb2-35">    num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_workers <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb2-36">    persistent_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(num_workers),</span>
<span id="cb2-37">    pin_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pin_memory,</span>
<span id="cb2-38">    batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,</span>
<span id="cb2-39">)</span>
<span id="cb2-40">dls_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(train_dataset, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb2-41">dls_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(valid_dataset, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span></code></pre></div>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> load_imagenette_datasets_daft(dataset_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./imagenette_full_size"</span>):</span>
<span id="cb3-2">    ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.load_from_disk(dataset_path)</span>
<span id="cb3-3">    extract_img_bytes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> daft.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>).struct.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bytes"</span>).alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>)</span>
<span id="cb3-4">    ds_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> daft.from_arrow(ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>].data.table).select(</span>
<span id="cb3-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>, extract_img_bytes</span>
<span id="cb3-6">    )</span>
<span id="cb3-7"></span>
<span id="cb3-8">    ds_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> daft.from_arrow(ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"validation"</span>].data.table).select(</span>
<span id="cb3-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>, extract_img_bytes</span>
<span id="cb3-10">    )</span>
<span id="cb3-11"></span>
<span id="cb3-12">    img_decode_resize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb3-13">        daft.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>).image.decode(mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RGB"</span>).image.resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>)</span>
<span id="cb3-14">    )</span>
<span id="cb3-15"></span>
<span id="cb3-16">    ds_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_train.with_column(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>, img_decode_resize)</span>
<span id="cb3-17">    ds_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_valid.with_column(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>, img_decode_resize)</span>
<span id="cb3-18"></span>
<span id="cb3-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> to_f32_tensor(ds: daft.DataFrame):</span>
<span id="cb3-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ds.with_column(</span>
<span id="cb3-21">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>,</span>
<span id="cb3-22">            daft.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(</span>
<span id="cb3-23">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span>).transpose(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb3-24">                return_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>daft.DataType.tensor(daft.DataType.float32()),</span>
<span id="cb3-25">            ),</span>
<span id="cb3-26">        )</span>
<span id="cb3-27"></span>
<span id="cb3-28">    ds_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_f32_tensor(ds_train)</span>
<span id="cb3-29">    ds_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_f32_tensor(ds_valid)</span>
<span id="cb3-30"></span>
<span id="cb3-31">    ds_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_train.to_torch_iter_dataset()</span>
<span id="cb3-32">    ds_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_valid.to_torch_iter_dataset()</span>
<span id="cb3-33"></span>
<span id="cb3-34">    dls_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(ds_train, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb3-35">    dls_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(ds_valid, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span>
<span id="cb3-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> dls_train, dls_valid</span></code></pre></div>
</div>
<div id="tabset-1-4" class="tab-pane" aria-labelledby="tabset-1-4-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> load_imagenette_datasets_ray(dataset_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./imagenette_full_size"</span>):</span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the Arrow dataset with Ray</span></span>
<span id="cb4-3">    ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.load_from_disk(dataset_path)</span>
<span id="cb4-4"></span>
<span id="cb4-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> extract_img_to_pil(data):</span>
<span id="cb4-6">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bytes"</span>]</span>
<span id="cb4-7">        data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PIL.Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(io.BytesIO(image)).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RGB"</span>)</span>
<span id="cb4-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> data</span>
<span id="cb4-9"></span>
<span id="cb4-10">    ds_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ray.data.from_huggingface(ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(extract_img_to_pil)</span>
<span id="cb4-11">    ds_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ray.data.from_huggingface(ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"validation"</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(extract_img_to_pil)</span>
<span id="cb4-12"></span>
<span id="cb4-13">    preprocess_transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(</span>
<span id="cb4-14">        [</span>
<span id="cb4-15">            utils.PREPROCESS_TRANSFORMS,</span>
<span id="cb4-16">        ]</span>
<span id="cb4-17">    )</span>
<span id="cb4-18">    augmentation_transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> utils.AUGMENTATIONS</span>
<span id="cb4-19"></span>
<span id="cb4-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply transformations in Ray</span></span>
<span id="cb4-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> preprocess_image(batch):</span>
<span id="cb4-22">        batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [preprocess_transforms(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>]]</span>
<span id="cb4-23"></span>
<span id="cb4-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> batch</span>
<span id="cb4-25"></span>
<span id="cb4-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> augment_image(elem):</span>
<span id="cb4-27">        elem[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> augmentation_transforms(elem[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>])</span>
<span id="cb4-28"></span>
<span id="cb4-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> batch</span>
<span id="cb4-30"></span>
<span id="cb4-31">    ds_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_train.map_batches(preprocess_image).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(augment_image)</span>
<span id="cb4-32"></span>
<span id="cb4-33">    ds_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_val.map_batches(preprocess_image)</span>
<span id="cb4-34"></span>
<span id="cb4-35">    d_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_train.to_torch(</span>
<span id="cb4-36">        label_column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>,</span>
<span id="cb4-37">        batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,</span>
<span id="cb4-38">        local_shuffle_buffer_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>,</span>
<span id="cb4-39">        prefetch_batches<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb4-40">    )</span>
<span id="cb4-41">    d_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_val.to_torch(label_column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, prefetch_batches<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb4-42"></span>
<span id="cb4-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> d_train, d_valid</span></code></pre></div>
</div>
</div>
</div>
<p>I think most of the frameworks ends up at a similar place in the experience.</p>
<p><strong>Quick DX Ranking</strong></p>
<ol type="1">
<li>PyTorch &amp; HuggingFace Datasets</li>
<li>Daft</li>
<li>Ray (albeit I believe it to be the most scalable solution as you can truly tinker in detail)</li>
</ol>
<p>I enjoyed <em>Daft</em> a lot with its multi-modal syntax, inspired by polars with namespaces (e.g.&nbsp;<code>.image.decode()</code>), which can be phenomenal. Working with DataFrame‚Äôs is a cool addition, where you can drop into python simply by using <code>apply</code>.<br>
Working with <em>Daft</em> more and more I noticed that the DataFrame syntax sometimes becomes a big blocker and the simplicity of HF Datasets and Ray using <code>dict</code>‚Äôs in <code>.map</code> statements results in easier code and smoother integration with existing libraries.<br>
Additionally HF Datasets / PyTorch DataLoaders feels more pythonic, where the latter is real simple. I can‚Äôt put my finger on it but they just seem easier to debug and understand.</p>
<p>It‚Äôll sure be interesting to follow the progress being made, and I‚Äôm happy the dust isn‚Äôt settled yet!</p>


</section>

 ]]></description>
  <category>data</category>
  <category>loading</category>
  <guid>https://blog.londogard.com/posts/2024-12-03-data-loading-comparison/</guid>
  <pubDate>Tue, 03 Dec 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Loading - Daft</title>
  <dc:creator>Hampus Lond√∂g√•rd</dc:creator>
  <link>https://blog.londogard.com/posts/2024-10-24-data-loading-daft/</link>
  <description><![CDATA[ 





<p>I know I‚Äôve been praising <code>polars</code> a lot lately, and I‚Äôm still in love. <code>polars</code> will be my continued go-to library for Data Analysis of Tabular data, and when building ETL (data pipelines) in 99% of the cases.</p>
<p>However, when you work with Deep Learning and multi-modal data you need something to take the data from your Delta Lake, or wherever you store your data, and supply it to the model. That‚Äôs where tools like <code>daft</code> can shine.</p>
<p>This Data Loading and Processing steps needs to be highly optimized to utilize the underlying compute optimally, not wasting $$ on unused GPU‚Äôs. The jobs should keep a high % utilization and not be bound by I/O or CPU. In other words: <em>you want to always have data ready when the GPU has time to process more data</em>.</p>
<p>There‚Äôs a lot of tools to do the job, I‚Äôll go through a few of them in upcoming blogs with a simple yet common workload: <em>Image Classification</em>. Image Classification is simple but the data can quickly grow large to not fit in-memory anymore.</p>
<ol type="1">
<li>Can‚Äôt fit in-memory =&gt; I/O needs to be optimized</li>
<li>Expensive transforms &amp; augmenations =&gt; CPU needs to be optimized</li>
</ol>
<p>An even better example would be <em>Object Detection</em> as it has ragged (variable) dimensions, i.e.&nbsp;one image has 2 people and another as 1, but it‚Äôs a bit more complex data processing. I‚Äôll include this in my next blog where I give ‚Äúrecipes‚Äù on how to use Daft.</p>
<p>Finally, this blog will be quite brief and not as in-depth as I hoped, but there‚Äôll be more blogs coming later!</p>
<section id="daft" class="level1">
<h1>Daft</h1>
<p>Today I‚Äôll introduce one of the newer alternatives in the field, <a href="https://getdaft.io/">daft</a>.</p>
<p>Daft is what you can only call a merger between <code>polars</code>, <code>spark</code> and Deep Learning. If they had been more inspired by <code>polars</code> in the Developer Experience (DX) I‚Äôd have called it a ‚Äúlovechild‚Äù, but for now they don‚Äôt have the nice-to-haves like <code>pl.with_column(new_col_name=pl.col("other_col")*2)</code> named syntax and other things like <code>pl.col("col").replace(dict_to_replace)</code> and a lot of other things.</p>
<p>What <em>daft</em> does have is a <em>multi-modal</em> namespace, unlike <code>polars</code> which solely focuses on traditional data-types. This is <em>really</em> interesting albeit not that fleshed out yet. It‚Äôs enjoyable and has potential to grow!</p>
<p>Further, to quote <em>daft</em> themselves:</p>
<blockquote class="blockquote">
<p><em>Daft provides a snappy and delightful local interactive experience, but also seamlessly scales to petabyte-scale distributed workloads.</em></p>
</blockquote>
<p>The <em>petabyte-scale</em> comes from the fact that you can run <em>daft</em> on top of <em>Ray</em> which is a distributed framework that tries to take on Spark. It‚Äôs famously used at OpenAI while training their models.</p>
</section>
<section id="coding-with-daft" class="level1">
<h1>Coding with Daft</h1>
<p>Coding with <code>daft</code> is an experience. I only ran locally but it held up really well to ‚Äúnative‚Äù PyTorch, even surpassing it in one case!</p>
<p>I‚Äôll share my experience and implementations below!</p>
<section id="reading-data" class="level2">
<h2 class="anchored" data-anchor-id="reading-data">Reading Data</h2>
<p>Like most modern project <em>daft</em> includes a smooth integration to <em>Apache Arrow</em>.</p>
<blockquote class="blockquote">
<p>Apache Arrow is ‚ÄúThe universal columnar format and multi-language toolbox for fast data interchange and in-memory analytics‚Äù</p>
</blockquote>
<p>The Arrow integration gives <em>daft</em> multiple ways in to read a dataset, and the dataset doesn‚Äôt even have to be in-memory because of the Arrow data structure which can easily be stream ‚Äúmemory-map-mode‚Äù (<code>mmap</code>).</p>
<p>To ‚Äúread‚Äù a Arrow table you simply call <code>from_arrow</code>, as I do below reading a HuggingFace Datasets Arrow Table.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">ds_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> daft.from_arrow(ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train"</span>].data.table)</span></code></pre></div>
<p>To ‚Äúread‚Äù other formats from disk you simply use <code>read_(delta|csv|...)</code>, as below.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> daft.read_deltalake(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some-table-uri"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read_(csv|parquet|json|...)</span></span></code></pre></div>
<p>Finally it has very tight integration with Ray, which is very neat when you wish to scale to Big Data.</p>
</section>
<section id="data-transforms---multi-modal-and-whatnot" class="level2">
<h2 class="anchored" data-anchor-id="data-transforms---multi-modal-and-whatnot">Data Transforms - multi-modal and whatnot</h2>
<p>To modify a DataFrame you work very similar to <code>polars</code>. There‚Äôs <code>Expression</code>‚Äôs which is a way to have a lazy non-evaluated expression, like a SQL query before you run it. I‚Äôve spoken about <code>Expression</code>‚Äôs before and I really love them, they make code decoupling a lot easier and can simplify a query to something beautiful.</p>
<p>See my example of extracting image from a struct that has a field with bytes.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># expression: lazy non-executed method</span></span>
<span id="cb3-2">extract_img_bytes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> daft.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>).struct.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bytes"</span>).alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>)</span>
<span id="cb3-3"></span>
<span id="cb3-4">ds_train.select(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>, extract_img_bytes)</span></code></pre></div>
<blockquote class="blockquote">
<p>Select column <code>label</code> and <code>image</code>, where <code>image</code> extracts <code>image.bytes</code> into <code>image</code>.</p>
</blockquote>
<p>From here I‚Äôd like to decode the image into something which we can work with, unlike bytes, and that‚Äôs easy using the multi-modal namespace (<code>.image</code>).</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">img_decode_resize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> daft.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>).image.decode(mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RGB"</span>).image.resize(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>)</span>
<span id="cb4-2"></span>
<span id="cb4-3">ds_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_train.with_column(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>, img_decode_resize)</span></code></pre></div>
<blockquote class="blockquote">
<p>Transforms <code>image</code> by decoding it into <code>RGB</code> and then resizing to <code>224x224</code>.</p>
</blockquote>
<p>Quite cool right? There‚Äôs some great potential here!</p>
<p>How do we apply more complex operations? UDF‚Äôs! It‚Äôs just as easy as in <code>polars</code>, simply call <code>apply</code>.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> rescale_transpose(x: np.array):</span>
<span id="cb5-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.0</span>).transpose(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-3"></span>
<span id="cb5-4">ds_train.with_column(</span>
<span id="cb5-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>,</span>
<span id="cb5-6">    daft.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(</span>
<span id="cb5-7">        rescale_transpose,</span>
<span id="cb5-8">        return_dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>daft.DataType.tensor(daft.DataType.float32()),</span>
<span id="cb5-9">    ),</span>
<span id="cb5-10">)</span></code></pre></div>
<blockquote class="blockquote">
<p>Applying a custom transformation. Images are represented as <code>np.array</code> and you need to define <code>return_dtype</code>.</p>
</blockquote>
<p>With all this available we‚Äôre good to go for a Deep Learning training pipeline!</p>
</section>
<section id="producing-a-pytorch-dataset" class="level2">
<h2 class="anchored" data-anchor-id="producing-a-pytorch-dataset">Producing a PyTorch Dataset</h2>
<p>The final part of our pipeline is to move the data into <code>torch.Tensor</code>. There‚Äôs one big gotcha - don‚Äôt apply <code>num_workers</code> as <em>daft</em> already apply multi-thread/processing optimizations!</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">ds_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_train.to_torch_iter_dataset()</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">NOTE</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: don't apply num_workers even though PyTorch warns!</span></span>
<span id="cb6-4">dls_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(ds_train, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>)</span></code></pre></div>
<p>And that‚Äôs a wrap! We got all the steps to finalize the deal. How about a comparison?</p>
</section>
</section>
<section id="mini-benchmark" class="level1">
<h1>Mini Benchmark</h1>
<p>Comparing speeds with ‚Äúnative‚Äù PyTorch DataLoaders is interesting and shows that Daft is on-par in speed when using their new <em>native execution engine</em> (<em>swordfish</em>). When I increase image size, i.e.&nbsp;larger data to process, I see Daft even surpassing PyTorch DataLoaders (!).</p>
<p><strong>N.B.</strong> I‚Äôm running the full training from a HuggingFace Dataset backed by Arrow. It‚Äôs the same underlying data structure for all tests except ‚ÄúFolder File‚Äù one, but things might just be different if we start discussing file-loading (rather than from bytes) or even remote data.</p>
<section id="numbers" class="level2">
<h2 class="anchored" data-anchor-id="numbers">Numbers</h2>
<table class="caption-top table">
<colgroup>
<col style="width: 33%">
<col style="width: 13%">
<col style="width: 13%">
<col style="width: 6%">
<col style="width: 18%">
<col style="width: 13%">
</colgroup>
<thead>
<tr class="header">
<th>Tool</th>
<th>Num_worker</th>
<th>Pin_memory</th>
<th>Cache</th>
<th>Configuration</th>
<th>Time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Torch Dataset/Loader</strong></td>
<td>None</td>
<td>None</td>
<td>-</td>
<td>Default</td>
<td><strong>3m20s</strong></td>
</tr>
<tr class="even">
<td></td>
<td>None</td>
<td>None</td>
<td>-</td>
<td>Default</td>
<td>3m26s</td>
</tr>
<tr class="odd">
<td></td>
<td>4</td>
<td>True</td>
<td>-</td>
<td>Default</td>
<td>4m9s</td>
</tr>
<tr class="even">
<td></td>
<td>2</td>
<td>True</td>
<td>-</td>
<td>Default</td>
<td>3m44s</td>
</tr>
<tr class="odd">
<td><strong>Daft</strong></td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>daft-default</td>
<td><strong>14m55s</strong></td>
</tr>
<tr class="even">
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>daft-native</td>
<td><strong>3m30s</strong></td>
</tr>
</tbody>
</table>
<p>Running on full sized images we get a bit more interesting results:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 39%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 6%">
<col style="width: 16%">
<col style="width: 11%">
</colgroup>
<thead>
<tr class="header">
<th>Tool</th>
<th>Num_worker</th>
<th>Pin_memory</th>
<th>Cache</th>
<th>Configuration</th>
<th>Time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Full Size</strong></td>
<td>4</td>
<td>True</td>
<td>-</td>
<td>torch</td>
<td>4m19s</td>
</tr>
<tr class="even">
<td><strong>Full Size</strong></td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>daft</td>
<td><strong>3m49s</strong></td>
</tr>
<tr class="odd">
<td><strong>Image Folder &amp; Files (160p)</strong></td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>torch</td>
<td><strong>3m31s</strong></td>
</tr>
<tr class="even">
<td><strong>Image Folder &amp; Files (160p)</strong></td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>daft</td>
<td><strong>3m26s</strong></td>
</tr>
</tbody>
</table>
<p>To read a file locally using <em>daft</em> you simply do the same as you‚Äôd do with remote.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">df.with_column(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image"</span>, daft.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"path"</span>).url.download())</span></code></pre></div>
</section>
</section>
<section id="remote-data" class="level1">
<h1>Remote data</h1>
<p>Working with remote data is a common and interesting use-case. I think based on this research that <em>daft</em> has a good chance of performing really well, as the local files also did great.</p>
</section>
<section id="final-thoughts" class="level1">
<h1>Final Thoughts</h1>
<p>Even if <em>daft</em> has a way to go for Deep Learning training it really holds great promise. If they make the export easier to PyTorch and perhaps add TensorFlow I believe it could grow into a valuable competitor to HuggingFace Datasets et. al.</p>
<p>As Ray is what drives OpenAI‚Äôs training I believe Daft stands on some really good scalable underlying tech and can perhaps be what joins Data Engineering and Data Science together as one, for real - a big leap forward!</p>
<p>Thanks for this time, Hampus</p>
<p><strong>Extra:</strong> all code is available on the git-repo for this blog, see <code>code/data_loading</code>.</p>


</section>

 ]]></description>
  <category>TIL</category>
  <category>daft</category>
  <category>data</category>
  <guid>https://blog.londogard.com/posts/2024-10-24-data-loading-daft/</guid>
  <pubDate>Tue, 19 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>ZenML or ClearML? Which MLOps tool strikes best?</title>
  <dc:creator>Hampus Lond√∂g√•rd</dc:creator>
  <link>https://blog.londogard.com/posts/2024-05-05-zenml-vs-clearml/</link>
  <description><![CDATA[ 





<p>Making it as few words as possible.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 33%">
<col style="width: 33%">
<col style="width: 33%">
</colgroup>
<thead>
<tr class="header">
<th><strong>Tool</strong></th>
<th><strong>Pro</strong></th>
<th><strong>Con</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>ClearML</strong></td>
<td>Simple &amp; Everything ‚Äúfits‚Äù</td>
<td>Locked into ClearML, i.e.&nbsp;cannot use best tool for the job</td>
</tr>
<tr class="even">
<td><strong>ZenML</strong></td>
<td>Composable &amp; Extendable</td>
<td>Multiple tools to get job done (e.g.&nbsp;MLFlow not visualized in UI)</td>
</tr>
</tbody>
</table>
<section id="similarities" class="level2">
<h2 class="anchored" data-anchor-id="similarities">Similarities:</h2>
<p>There‚Äôs a lot of similarities, it‚Äôs quite easy to get started.</p>
<section id="building-pipelines" class="level3">
<h3 class="anchored" data-anchor-id="building-pipelines">Building Pipelines</h3>
<p>They both have the possibility to use decorators which makes the code very simple to read, alas the ClearML way of doing things is not quite as smooth as ZenML.</p>
<blockquote class="blockquote">
<p><strong>ZenML</strong> builds <em>pipelines</em> and <em>tasks/components</em> in a simpler better way.</p>
</blockquote>
</section>
<section id="tracking-experiments" class="level3">
<h3 class="anchored" data-anchor-id="tracking-experiments">Tracking Experiments</h3>
<p>To track experiments I believe both solutions got you covered. ClearML‚Äôs experiment tracker is quite good and works as you‚Äôd expect, while ZenML you decide which tool you want to use (I opted to MLFlow).</p>
<p>ZenML supports: Comet, MLFlow, Neptune, WandB, &amp; Custom. ClearML supports: ClearML.</p>
<blockquote class="blockquote">
<p>It‚Äôs a <strong>draw</strong>, ZenML supports ‚Äúbetter‚Äù trackers BUT <strong>ClearML has a native integration which makes things a lot easier.</strong></p>
</blockquote>
</section>
<section id="orchestrators" class="level3">
<h3 class="anchored" data-anchor-id="orchestrators">Orchestrators</h3>
<p>Both have a simple to use orchestrator. Once again ZenML leans back towards the giants while ClearML uses a built-in native orchestrator that binds everything together.</p>
<blockquote class="blockquote">
<p>It‚Äôs a <strong>draw</strong>.</p>
</blockquote>
</section>
</section>
<section id="ui" class="level2">
<h2 class="anchored" data-anchor-id="ui">UI</h2>
<p>One of the more important parts of a tool is the UI. Here I believe in a way ZenML is strong as they ‚Äúoff-load‚Äù each components UI to the component itself, i.e.&nbsp;MLFlow tracing is shown in MLFlow UI.</p>
<p>The UI itself of each tool, i.e.&nbsp;WandB, is much better than ClearML‚Äôs offering in my opinion.<br>
<strong>But</strong> the integration of ClearML as a tool ‚Äúsolve all‚Äù is a HUGE timesaver and I think could outweigh using the ‚Äúbetter‚Äù tooling. Integrating everything from Experiment Comparison to Report Building is an quite amazing feat that I think is worthwhile applauding.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>First and foremost, I see both Open Source offering moving more and more towards a SaaS. This is clearly visible by locking certain features in the UI (ZenML, the new UI is beautiful but locked down without your Cloud offering). It‚Äôs also shown by supplying additional superb features even when self-hosted. I do understand the need to pay your bills, but it‚Äôs sad to see Open Source moving to this either way.</p>
<p>See <a href="https://www.zenml.io/open-source-vs-cloud">ZenML comparison (Open Source &lt;&gt; Cloud)</a> and <a href="https://clear.ml/pricing">ClearML one</a>.</p>
<p>Sometimes the best option is to opt for the ‚Äúcloud-native‚Äù one, i.e.&nbsp;AWS/Azure/GCP tools. But I love open source‚Ä¶ :)</p>
<p><strong>Anyhow, to finalize here‚Äôs my judgement:</strong></p>
<ul>
<li>If you prefer to keep your stack as simple as possible: ClearML.</li>
<li>If you prefer to keep your stack customized having the best tool for each part: ZenML.</li>
</ul>
<p>I cannot pick a winner, ZenML enables simpler transition and better tooling all in all, but the full-on integration of ClearML with ‚Äúeverything working together‚Äù is quite magical and similar to the cloud-native options (AWS Sagemaker/Azure MLStudio/GCP Vertex).</p>
<p>Find the code for each framework running MNIST: ‚Ä¶.</p>
<p>Thanks for this time, Hampus</p>
<section id="clearml" class="level3">
<h3 class="anchored" data-anchor-id="clearml">ClearML</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">task <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Task.init(</span>
<span id="cb1-2">    project_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MNIST Digit Recognition"</span>,</span>
<span id="cb1-3">    task_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Simple NN model with PyTorch Lightning"</span>,</span>
<span id="cb1-4">    task_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Task.TaskTypes.training,</span>
<span id="cb1-5">    output_uri<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb1-6">)</span>
<span id="cb1-7"></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SimpleNN(pl.LightningModule):</span>
<span id="cb1-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(SimpleNN, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb1-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">784</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>)</span>
<span id="cb1-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dropout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Dropout(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)</span>
<span id="cb1-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-15"></span>
<span id="cb1-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb1-17">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.flatten(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-18">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc1(x)</span>
<span id="cb1-19">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.relu(x)</span>
<span id="cb1-20">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dropout(x)</span>
<span id="cb1-21">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc2(x)</span>
<span id="cb1-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> torch.log_softmax(x, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-23"></span>
<span id="cb1-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> training_step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, batch, batch_idx):</span>
<span id="cb1-25">        data, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch</span>
<span id="cb1-26">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>(data)</span>
<span id="cb1-27">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.functional.cross_entropy(output, target)</span>
<span id="cb1-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train_loss"</span>, loss)</span>
<span id="cb1-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> loss</span>
<span id="cb1-30"></span>
<span id="cb1-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> test_step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, batch, batch_idx):</span>
<span id="cb1-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>(batch[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb1-33"></span>
<span id="cb1-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> configure_optimizers(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> optim.Adam(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb1-36"></span>
<span id="cb1-37"></span>
<span id="cb1-38">params_dictionary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"epochs"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>}</span>
<span id="cb1-39">task.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(params_dictionary)</span>
<span id="cb1-40"></span>
<span id="cb1-41">transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(</span>
<span id="cb1-42">    [transforms.ToTensor(), transforms.Normalize((<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,), (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,))]</span>
<span id="cb1-43">)</span>
<span id="cb1-44"></span>
<span id="cb1-45">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.MNIST(</span>
<span id="cb1-46">    root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data"</span>, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transform, download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-47">)</span>
<span id="cb1-48">test_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.MNIST(root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./data"</span>, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transform)</span>
<span id="cb1-49"></span>
<span id="cb1-50">train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(</span>
<span id="cb1-51">    dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb1-52">)</span>
<span id="cb1-53">test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.utils.data.DataLoader(</span>
<span id="cb1-54">    dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb1-55">)</span>
<span id="cb1-56"></span>
<span id="cb1-57">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SimpleNN()</span>
<span id="cb1-58">trainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.Trainer(max_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params_dictionary[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"epochs"</span>])</span>
<span id="cb1-59">trainer.fit(model, train_loader)</span>
<span id="cb1-60">trainer.test(dataloaders<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_loader)</span></code></pre></div>
</section>
<section id="zenml" class="level3">
<h3 class="anchored" data-anchor-id="zenml">ZenML</h3>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@zenml.step</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> load_mnist() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Tuple[</span>
<span id="cb2-3">    Annotated[torch.utils.data.DataLoader, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train_loader"</span>],</span>
<span id="cb2-4">    Annotated[torch.utils.data.DataLoader, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test_loader"</span>],</span>
<span id="cb2-5">]:</span>
<span id="cb2-6">    ...</span>
<span id="cb2-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> train_loader, test_loader</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@zenml.step</span></span>
<span id="cb2-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train_model(</span>
<span id="cb2-11">    train_loader: torch.utils.data.DataLoader, test_loader: torch.utils.data.DataLoader</span>
<span id="cb2-12">):</span>
<span id="cb2-13">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SimpleNN()</span>
<span id="cb2-14">    trainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.Trainer()</span>
<span id="cb2-15">    trainer.fit(model, train_loader)</span>
<span id="cb2-16">    trainer.test(dataloaders<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_loader)</span>
<span id="cb2-17"></span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@zenml.pipeline</span></span>
<span id="cb2-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train_pipeline():</span>
<span id="cb2-21">    train_loader, test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_mnist()</span>
<span id="cb2-22">    train_model(train_loader, test_loader)</span>
<span id="cb2-23"></span>
<span id="cb2-24"></span>
<span id="cb2-25"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb2-26">    train_pipeline()</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://blog.londogard.com/posts/2024-05-05-zenml-vs-clearml/</guid>
  <pubDate>Sun, 05 May 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Streamlit Fragments - Make the Dashboard Dream come true</title>
  <dc:creator>Hampus Lond√∂g√•rd</dc:creator>
  <link>https://blog.londogard.com/posts/2024-04-17-streamlit-fragments/</link>
  <description><![CDATA[ 





<p>An old coworker gave me a shout-out that <a href="https://docs.streamlit.io/develop/quick-reference/changelog">Streamlits latest (1.33.0)</a> release added Fragments.</p>
<p>Fragments simply put enables creation of <em>indepedently updated</em> fragments inside your streamlit application. Further they add a simple <code>run_every</code>which simplify dashboards (continuously fetching data).</p>
<p>As always, the <a href="https://docs.streamlit.io/develop/api-reference/execution-flow/st.fragment">documentation</a> explains a lot of how it works.</p>
<section id="play-around" class="level2">
<h2 class="anchored" data-anchor-id="play-around">Play Around</h2>
<p>First I play around with fragments, testing the most simple use-case ‚Äì and I‚Äôm sold!</p>
<blockquote class="blockquote">
<p><strong>N.B.</strong> this is already possible in other tools such as Solara that has a better reactive approach, but streamlit has a bigger user-base and I love to see a solution to this long-standing problem!</p>
</blockquote>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
The code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> streamlit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> st</span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main():</span>
<span id="cb1-6">    st.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# Main Function"</span>)</span>
<span id="cb1-7">    st.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, World! (main)"</span>)</span>
<span id="cb1-8">    st.toggle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Toggle me!"</span>)</span>
<span id="cb1-9"></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@st.experimental_fragment</span>()</span>
<span id="cb1-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> first_fragment():</span>
<span id="cb1-13">    st.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"## First Fragment"</span>)</span>
<span id="cb1-14">    random_choice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>])</span>
<span id="cb1-15">    st.write(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Random choice: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>random_choice<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-16">    st.toggle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Toggle me! (1st Fragment)"</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@st.experimental_fragment</span>(run_every<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2s"</span>)</span>
<span id="cb1-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> second_fragment():</span>
<span id="cb1-21">    st.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"## Second Fragment"</span>)</span>
<span id="cb1-22">    st.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, World! (2nd Fragment)"</span>)</span>
<span id="cb1-23">    random_choice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>])</span>
<span id="cb1-24">    st.write(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Random choice: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>random_choice<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-25">    st.toggle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Toggle me! (2nd Fragment)"</span>)</span>
<span id="cb1-26"></span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb1-29">    main()</span>
<span id="cb1-30">    c1, c2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.columns(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-31"></span>
<span id="cb1-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> c1:</span>
<span id="cb1-33">        first_fragment()</span>
<span id="cb1-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> c2:</span>
<span id="cb1-35">        second_fragment()</span></code></pre></div>
</div>
</div>
</div>
<p>This enables the following behavior:</p>
<ol type="1">
<li>Toggling ‚Äúmain‚Äù will refresh everything</li>
<li>Toggling a fragment will <em>only</em> refresh that fragment</li>
<li>Second fragment will refresh every 2 seconds</li>
</ol>
<blockquote class="blockquote">
<p><strong>What is refreshed?</strong> The <em>Random choice</em> letter is updated to a random letter (a, b, or c).</p>
</blockquote>
<p>All in all this is what we‚Äôd probably do in a Dashboard. See the following GIF‚Äôs:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2024-04-17-streamlit-fragments/assets/toggle_fragments.gif" class="img-fluid figure-img"></p>
<figcaption>Streamlit Fragments and Toggling (simplest use-case) - note the ‚ÄòRandom Choice‚Äô changing.</figcaption>
</figure>
</div>
</section>
<section id="adding-complexity" class="level2">
<h2 class="anchored" data-anchor-id="adding-complexity">Adding Complexity</h2>
<p>As always it‚Äôs a lot more fun to test these things in scenarios that are closer to real-life, and that‚Äôs what I intend to do!</p>
<ol type="1">
<li>Fetching data from a data storage</li>
<li>Displaying different graphs</li>
<li>Sharing state from main</li>
</ol>
<p>In this graph we have a <em>Amplitude Multiplier</em> (main) that affects both fragments, additionally we have a sine wave where the frequency is editable and will only re-render (re-compute) that fragment (first). Finally there‚Äôs a Stock Fragment (second) which automatically updates every 2 seconds, unless locked it‚Äôll randomly select a stock, if locked we can still change stock and it‚Äôll only re-render that fragment (second).</p>
<p>See the GIF below! üëá</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2024-04-17-streamlit-fragments/assets/complex_fragments.gif" class="img-fluid figure-img"></p>
<figcaption>Sine wave and Stocks, with automatic Stock Refresh</figcaption>
</figure>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> streamlit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> st</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.express <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> px</span>
<span id="cb2-5"></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> main() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb2-8">    st.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# Main Function"</span>)</span>
<span id="cb2-9">    st.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, World! (main)"</span>)</span>
<span id="cb2-10">    multiplier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.slider(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Amplitude Multiplier"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb2-11"></span>
<span id="cb2-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> multiplier</span>
<span id="cb2-13"></span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@st.cache_resource</span></span>
<span id="cb2-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_stocks() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pl.DataFrame:</span>
<span id="cb2-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pl.read_csv(</span>
<span id="cb2-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/vega/datalib/master/test/data/stocks.csv"</span></span>
<span id="cb2-19">    )</span>
<span id="cb2-20"></span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@st.experimental_fragment</span>()</span>
<span id="cb2-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> first_fragment(multiplier: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>):</span>
<span id="cb2-24">    st.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"## First Fragment"</span>)</span>
<span id="cb2-25">    sine_frequency <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.slider(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sine Frequency"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb2-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create sine wave with multiplier height and sine_frequency as frequency</span></span>
<span id="cb2-27">    t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sine_frequency, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb2-28">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multiplier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sin(t)</span>
<span id="cb2-29"></span>
<span id="cb2-30">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span>: t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: y})</span>
<span id="cb2-31">    st.plotly_chart(</span>
<span id="cb2-32">        px.line(df, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sine wave"</span>), use_container_width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb2-33">    )</span>
<span id="cb2-34"></span>
<span id="cb2-35"></span>
<span id="cb2-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@st.experimental_fragment</span>(run_every<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2s"</span>)</span>
<span id="cb2-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> second_fragment(multiplier: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>):</span>
<span id="cb2-38">    st.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"## Second Fragment"</span>)</span>
<span id="cb2-39">    c1, c2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.columns(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-40"></span>
<span id="cb2-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> c1:</span>
<span id="cb2-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> st.checkbox(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lock company"</span>):</span>
<span id="cb2-43">            st.session_state[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ticker_select"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(</span>
<span id="cb2-44">                [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AAPL"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GOOG"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AMZN"</span>]</span>
<span id="cb2-45">            )</span>
<span id="cb2-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> c2:</span>
<span id="cb2-47">        ticker <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.selectbox(</span>
<span id="cb2-48">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Company (symbol)"</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AAPL"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GOOG"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AMZN"</span>], key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ticker_select"</span></span>
<span id="cb2-49">        )</span>
<span id="cb2-50">    stocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_stocks()</span>
<span id="cb2-51">    stocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stocks.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"symbol"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> ticker).with_columns(</span>
<span id="cb2-52">        pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> multiplier</span>
<span id="cb2-53">    )</span>
<span id="cb2-54"></span>
<span id="cb2-55">    st.plotly_chart(</span>
<span id="cb2-56">        px.line(stocks, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Stock price (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ticker<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>),</span>
<span id="cb2-57">        use_container_width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb2-58">    )</span>
<span id="cb2-59"></span>
<span id="cb2-60"></span>
<span id="cb2-61"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb2-62">    multiplier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> main()</span>
<span id="cb2-63">    c1, c2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.columns(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-64"></span>
<span id="cb2-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> c1:</span>
<span id="cb2-66">        first_fragment(multiplier)</span>
<span id="cb2-67">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> c2:</span>
<span id="cb2-68">        second_fragment(multiplier)</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="drawbacks" class="level2">
<h2 class="anchored" data-anchor-id="drawbacks">Drawbacks</h2>
<p>This solution doesn‚Äôt fit every scenario, and as usual with Streamlit, integrating it introduces complexity via state management. Fragments add another level atop the existing <code>st.state</code>, potentially introducing more intricacies and headaches.</p>
<p>Other solutions such as Solara and Panel has this more built into the solution, but then again their entry threshold is a lot higher!</p>
</section>
<section id="outro" class="level1">
<h1>Outro</h1>
<p>Any other questions? Please go ahead and ask!</p>
<p>This development is exciting and will for sure give Streamlit new life in ‚Äúefficiency‚Äù. I, for one, am happy to see all new Data Apps fighting!</p>
<p>Finally, all the code is available on this blogs <a href="https://github.com/londogard/londogard">github</a> under <em>code_snippets</em>.</p>
<p>/ Hampus Lond√∂g√•rd</p>


</section>

 ]]></description>
  <category>streamlit</category>
  <guid>https://blog.londogard.com/posts/2024-04-17-streamlit-fragments/</guid>
  <pubDate>Wed, 17 Apr 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>TIL: Pixi by prefix.dev</title>
  <dc:creator>Hampus Lond√∂g√•rd</dc:creator>
  <link>https://blog.londogard.com/posts/2024-03-20-til-pixi.html</link>
  <description><![CDATA[ 





<p>This is a very short one. Keeping it for myself!</p>
<p>For my recent minor projects I‚Äôve been utilizing Pixi to run my virtual environments and it actually works great!</p>
<p>It‚Äôs simple to start and keep going. What‚Äôs even better?</p>
<ol type="1">
<li>Supports <a href="https://prefix.dev/blog/introducing_multi_env_pixi">multiple environments</a> (e.g.&nbsp;CUDA + CPU)</li>
<li>Supports <a href="https://pixi.sh/latest/advanced/multi_platform_configuration/">multiple platforms</a> (e.g.&nbsp;osx-arm64 and linux-64)!</li>
<li>Fast (3x faster than micromamba, 10x faster than conda!)</li>
<li>Integrates better with pypi</li>
<li>Has tasks (e.g.&nbsp;<code>pixi run test</code> or <code>pixi run inference</code>) that you define yourself</li>
<li>Lockfiles, it‚Äôs painful to use micromambas lockfiles. Hence dual file system as in poetry/nodeJS etc is great!</li>
</ol>
<p>Helpful right? Indeed!</p>
<section id="simple-get-started" class="level1">
<h1>Simple get-started</h1>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> init <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create toml and lock files</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> add python polars <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add python and polars as dependencies</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> shell <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># activates the virtual environment</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alternatively, "pixi run python ..."</span></span></code></pre></div>
</section>
<section id="add-task" class="level1">
<h1>Add Task</h1>
<p>Tasks are really awesome to reduce the threshold to enter projects. It‚Äôs simpler than a spread of bash-scripts or other things.</p>
<p>One standardized way to do things! :)</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> task add gui <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"solara run app.py"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adds task</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pixi</span> run gui <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># runs Solara App</span></span></code></pre></div>
</section>
<section id="outro" class="level1">
<h1>Outro</h1>
<p>Please read the <a href="https://pixi.sh/latest/">docs</a> to learn more!</p>


</section>

 ]]></description>
  <category>TIL</category>
  <guid>https://blog.londogard.com/posts/2024-03-20-til-pixi.html</guid>
  <pubDate>Wed, 20 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>TIL: Stlite - running streamlit in WASM through b64-encoded URL‚Äôs</title>
  <dc:creator>Hampus Lond√∂g√•rd</dc:creator>
  <link>https://blog.londogard.com/posts/2024-02-22-stlite/</link>
  <description><![CDATA[ 





<p><strong>Amazing one-off tools deployed as a URL that embeds a WASM app is officially here! ü§Ø</strong></p>
<p>Wow, that was a mouthful! There‚Äôs a mini-breakdown of the tech utilized to enable this at the bottom.üëá</p>
<p>What does this mean? It means that I can build assistive apps that has the following properties:</p>
<ol type="1">
<li>Deplyed as a URL - <strong>no server, no nothing</strong>, simply share away ü¶∏</li>
<li>Runs completely inside browser, on the user-device üíª</li>
<li>Requires NO developer or developer environment to run! üòá</li>
</ol>
<p>This is what I call truly Serverless! Because code and everything is embedded in the URL and runs inside a contained environemnt in the browser it cannot be simpler to share one-off tools! I‚Äôm excited to utilize this a lot more to enable my colleagues in sister-teams!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2024-02-22-stlite/sample.jpeg" class="img-fluid figure-img"></p>
<figcaption>Sample image of internal app I made</figcaption>
</figure>
</div>
<p>Here is a URL for a tool that does real-time image processing <strong>in the browser</strong>: <a href="https://edit.share.stlite.net/?sampleAppId=realtime_image_processing">stlite.net</a>! Here‚Äôs where you can work inside the browser to build a script: <a href="https://edit.share.stlite.net/">edit.share.stlite.net</a>.</p>
<p><strong>Tech breakdown that enables everything:</strong> 1. Emscripten/WASM enables C code running efficiently in the browser 2. Pyodide is a cPython port to Emscripten/WASM that works brilliantly, including micropip that enables a bunch of libraries 3. Stlite is a Streamlit port to Pyodide (with few caveats)</p>
<p>P.S. I heard that Solara is potentially working on the same functionality natively üòâ</p>



 ]]></description>
  <category>TIL</category>
  <guid>https://blog.londogard.com/posts/2024-02-22-stlite/</guid>
  <pubDate>Sun, 18 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>TIL: Building Docker Images with Conda and Custom Users (and devcontainers!)</title>
  <dc:creator>Hampus Lond√∂g√•rd</dc:creator>
  <link>https://blog.londogard.com/posts/2024-02-18-docker-build.html</link>
  <description><![CDATA[ 





<p>When building Docker containers there‚Äôs a few things to clarify:</p>
<ol type="1">
<li>You‚Äôre building something layer by layer</li>
<li>Things you do in Docker is not kept in <code>docker run</code> unless you specify it through special commands.
<ul>
<li>That is, it isn‚Äôt a stateful operation to run <code>RUN conda activate highlights</code>.</li>
</ul></li>
<li>Docker can be run as multiple users, but is built by default as <code>root</code></li>
<li>The original container X, <code>FROM X</code>, can have an environment with magic enabled</li>
</ol>
<p>I found a few problems based on all this when trying to deploy my Solara application using Docker.</p>
<ol type="1">
<li><code>conda</code> path is not enabled by default, even if I modified <code>.bashrc</code>.</li>
<li>User permissions where not available, i.e.&nbsp;I wasn‚Äôt allowed to create folders.</li>
<li><code>devcontainer</code> as base image added a ‚Äúdefault user‚Äù called <code>vscode</code>.</li>
</ol>
<p>Let‚Äôs go through each one step-by-step!</p>
<section id="problem-1.-enabling-conda-in-docker-run-.." class="level2">
<h2 class="anchored" data-anchor-id="problem-1.-enabling-conda-in-docker-run-..">Problem 1. Enabling <code>conda</code> in <code>docker run ..</code></h2>
<p>When running <code>docker run</code> no shell is applied by default. Additionally Docker defaults to <code>/bin/sh</code> because <code>bash</code> is not available in all images. This means that <code>.bashrc</code> modifications and similar <strong>not applied</strong> when starting your container!</p>
<p>There‚Äôs a few ways to make the <code>conda env</code> available by default in your shell, I opted for what I found simplest - modifying <code>$PATH</code>.</p>
<p>See the following edit in <code>Dockerfile</code></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ENV</span> PATH /opt/conda/envs/<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>ENV_NAME<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>/bin/:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PATH</span></span></code></pre></div>
<p>Through this when my <code>CMD</code> I can call <code>solara run</code> (<code>solara</code> is a python library available in my env).</p>
</section>
<section id="problem-2.-enabling-permission-to-do-os-changes-e.g.-os.mkdir" class="level2">
<h2 class="anchored" data-anchor-id="problem-2.-enabling-permission-to-do-os-changes-e.g.-os.mkdir">Problem 2. Enabling permission to do OS changes, e.g.&nbsp;<code>os.mkdir</code></h2>
<p>As mentioned Docker is built using <code>root</code> user. From my understanding it is later run as any user depending on how you can <code>docker run</code>, this can deactivate capabilities to modify os. One such capability that I use is to run <code>mkdir</code> and creating files.</p>
<p>The simplest solution I found was to:</p>
<ol type="1">
<li>Create a new user
<ul>
<li>For HuggingFace spaces it‚Äôs ID should be set as <code>-u 1000</code></li>
</ul></li>
<li>Allow new user to control the folder where you app resides <code>COPY --chown=user</code></li>
<li>Default to running as <code>user</code> (<code>USER user</code>)</li>
</ol>
<p>In a Dockerfile it ends up as follows.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">useradd</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-u</span> 1000 user</span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">USER</span> user</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--chown=user</span> . /app</span>
<span id="cb2-5">...</span></code></pre></div>
<p>Voila! That should make it work!</p>
<p>‚Ä¶unless you have a weird base-image that modifies the OS, i.e.&nbsp;<code>devcontainer</code> as base-image. More about this in the section below! üëá</p>
</section>
<section id="problem-3.-vscode-user" class="level2">
<h2 class="anchored" data-anchor-id="problem-3.-vscode-user">Problem 3. vscode user</h2>
<p>I mentioned that my base-image, <code>FROM mcr.microsoft.com/vscode/devcontainers/miniconda:latest</code>, there already is a user on <code>id=1000</code>. This user is apparently called <code>vscode</code>!</p>
<blockquote class="blockquote">
<p>I found this by running <code>docker run -it &lt;img_name&gt; /bin/bash</code> and grokking around in the terminal.</p>
</blockquote>
<p>This was a huge blocker for me and took a long while to understand. To enable my deployment I instead of creating a custom user hijacked the existing user <code>vscode</code>. See the final <code>Dockerfile</code>.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> mcr.microsoft.com/vscode/devcontainers/miniconda:latest</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">USER</span> vscode</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--chown=vscode</span> . /app</span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> env create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> env.yml</span>
<span id="cb3-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> clean <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-a</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb3-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> init</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">EXPOSE</span> 8765</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENV</span> PATH /opt/conda/envs/highlights/bin/:$PATH</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CMD</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"solara"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"run"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sol_app.py"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--host=0.0.0.0"</span>]</span></code></pre></div>
<p>And that makes everything work!</p>


</section>

 ]]></description>
  <category>TIL</category>
  <guid>https://blog.londogard.com/posts/2024-02-18-docker-build.html</guid>
  <pubDate>Sun, 18 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>TIL: Multiple Git Remotes</title>
  <dc:creator>Hampus Lond√∂g√•rd</dc:creator>
  <link>https://blog.londogard.com/posts/2024-02-18-git-remote.html</link>
  <description><![CDATA[ 





<p>It is really simple actually. Simply call the following command:</p>
<p><code>git remote add &lt;ALIAS&gt; &lt;GIT_URL_SSH&gt;</code></p>
<p>To then push it is as simple as <code>git push &lt;ALIAS&gt;</code>.</p>
<p>I use this to keep my repository in HuggingFace Spaces and GitHub at the same time.</p>
<p>That‚Äôs it!</p>



 ]]></description>
  <category>TIL</category>
  <guid>https://blog.londogard.com/posts/2024-02-18-git-remote.html</guid>
  <pubDate>Sun, 18 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Solara, League of Legends and Deep Learning to extract E-Sport Highlights</title>
  <dc:creator>Hampus Lond√∂g√•rd</dc:creator>
  <link>https://blog.londogard.com/posts/2024-02-11-solara-esport-highlights/</link>
  <description><![CDATA[ 





<section id="solara-league-of-legends-and-deep-learning-to-extract-e-sport-highlights" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="solara-league-of-legends-and-deep-learning-to-extract-e-sport-highlights">Solara, League of Legends and Deep Learning to extract E-Sport Highlights</h2>
<p>Hi all! üëã</p>
<p>I‚Äôm back with a New Years Resolution to release at least 6 blogs in 2024, focusing on interesting content that‚Äôs unique and not simple click-bait.</p>
<p>Today I‚Äôm sharing the continuation of a presentation I did at Foo Caf√©. I have built a complex yet user-friendly <em>Data App</em> using <a href="https://solara.dev/"><em>solara</em></a>.</p>
<p>There‚Äôs two parts that creates this complexity.</p>
<ol type="1">
<li><strong>Heavy processing</strong> that requires threading
<ul>
<li>Deep Learning &amp; ffmpeg processing</li>
</ul></li>
<li><strong>Multi-stage app</strong>&nbsp;that requires state
<ul>
<li>This will be clear when you view the video of the app</li>
</ul></li>
</ol>
<p>My presentation at Foo Caf√© focused more on the training process and exploring option to deploy my tool. This blog rather focuses on the Data App itself! üöÄ</p>
<p>Code is available on GitHub<sup>1</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><div class=""><sup>1</sup>&nbsp;
<p>Code available on <a href="https://github.com/londogard/lol_highlight_detection/">github.com/londogard/lol_highlight_detection</a>.</p>
</div>
</div></div><section id="quick-backstory" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="quick-backstory">Quick Backstory</h3>
<p>My kid brother asked me to help him earn some quick bucks through automating a process to build highlight-videos of E-Sports to upload on YouTube. The emphasis was on a single streamer,&nbsp;<a href="https://www.twitch.tv/thebausffs/">TheBausFFS</a><sup>2</sup>.</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;TheBausFFS is a famous Swedish streamer in League of Legends (LoL). He‚Äôs focusing on being fun and speaking as much ‚Äúswenglish‚Äù (svengelska) as possible.</p></div></div><p>When I set out my brother had a hope to earn cash, myself I was happy to learn more about new tools and being able assist my family with my expertise in Deep Learning. üí™</p>
</section>
</section>
<section id="choices-during-my-journey" class="level2">
<h2 class="anchored" data-anchor-id="choices-during-my-journey">Choices during my Journey</h2>
<p>I was contemplating four (4) options to deploy my resulting model.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 13%">
<col style="width: 31%">
<col style="width: 54%">
</colgroup>
<tbody>
<tr class="odd">
<td><h1 id="tool">Tool</h1>
<p>Streamlit</p></td>
<td><h1 id="pro">Pro</h1>
<ul>
<li><p>(I‚Äôm) Experienced</p></li>
<li><p>Beautiful</p></li>
<li><p>Simple</p></li>
</ul></td>
<td><h1 id="con">Con</h1>
<ul>
<li>Doesn‚Äôt support the dynamic nature of app without extreme state hacking</li>
</ul></td>
</tr>
<tr class="even">
<td>Solara</td>
<td><ul>
<li><p>React Data Flow, supports our use-case</p></li>
<li><p>Complexity grows logarithmically</p></li>
</ul></td>
<td><ul>
<li>Uglier</li>
<li>(I‚Äôm) less experienced</li>
<li>It‚Äôs the ‚Äúnew kid on the block‚Äù</li>
</ul></td>
</tr>
<tr class="odd">
<td>Jupyter Notebook</td>
<td><ul>
<li>Easy GPU</li>
</ul></td>
<td><ul>
<li><p>@ where I coNot User-Friendly (for non-tech persons)</p></li>
<li><p>Not as dynamic/stateful as needed (i.e.&nbsp;everything is a flow)</p></li>
</ul></td>
</tr>
<tr class="even">
<td>Gradio</td>
<td><ul>
<li>Simple</li>
</ul></td>
<td><ul>
<li>Complexity grows exponentially</li>
</ul></td>
</tr>
</tbody>
</table>
<p>Other tools such as Panel was briefly considered and rejected due to time and non-composability. For technical details such as model and more see my previous <a href="../2023-09-10-highlights-lol">blog</a>.</p>
<section id="result" class="level3">
<h3 class="anchored" data-anchor-id="result">Result</h3>
<p>The whole process gave me two results.</p>
<section id="knowledge" class="level4">
<h4 class="anchored" data-anchor-id="knowledge">1. Knowledge</h4>
<p>Most important to me I learned a lot, especially by playing around with Solara in both complex and siple use-cases.</p>
<ol type="1">
<li><strong>Intimate knowledge about <em>Solara</em></strong> and complex <em>Data Apps</em> that require high performance and efficiency.</li>
<li><strong>Insights in <em>Video Classification</em></strong> and how it differentiates from <em>Image Classification.</em></li>
<li>Experimentation in <strong>how to build <em>Data Apps</em>&nbsp;to non-domain-experts</strong> that have no technical expertise nor willingness to learn new things.</li>
</ol>
</section>
<section id="a-data-app" class="level4">
<h4 class="anchored" data-anchor-id="a-data-app">2. A <em>Data App</em></h4>
<p>I built an exciting <em>Data App</em> that‚Äôs simple to use, applies automatic Video Processing and Deep Learning Inference for non-tech users.</p>
<p>Following from here I‚Äôll share some building blocks to create an exciting <em>Data App</em>. To learn more about Solara basics I refer to my <a href="../2023-06-30-solara">previous blog</a> where I compare with Streamlit and introduce how to build a simple app. I‚Äôll share code snippets and videos of the app.</p>
<p>The resulting code covers most of the building blocks required to build everything from&nbsp;basic to complex Data Apps!</p>
</section>
</section>
</section>
<section id="app-show-case" class="level1 page-columns page-full">
<h1>App show case</h1>
<p>See <a href="../2023-09-10-highlights-lol">previous blog</a> to learn more about model training.</p>
<section id="videos" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="videos">Videos</h2>
<div>

</div>
<div class="column-page-inset quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="imgs/using_app_simple.mp4" class="img-fluid" controls=""><a href="imgs/using_app_simple.mp4">Video</a></video></p>
<figcaption>Full App Interaction (Button &amp; Load)</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="imgs/full_app_use.mp4" class="img-fluid" controls=""><a href="imgs/full_app_use.mp4">Video</a></video></p>
<figcaption>Plotly Callback Display</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><video src="imgs/full_vid_btn.mp4" class="img-fluid" controls=""><a href="imgs/full_vid_btn.mp4">Video</a></video></p>
<figcaption>Build Full Video Button</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="screenshots" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="screenshots">Screenshots</h2>
<div class="callout callout-style-default callout-tip callout-titled page-columns page-full">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Inference Page
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse page-columns page-full">
<div class="callout-body-container callout-body page-columns page-full">
<div>

</div>
<div class="column-page-inset quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2024-02-11-solara-esport-highlights/imgs/image-1.png" class="img-fluid figure-img"></p>
<figcaption>Inference Page 1</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2024-02-11-solara-esport-highlights/images/paste-1.png" class="img-fluid figure-img"></p>
<figcaption>Inference Page 2</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled page-columns page-full">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Other Pages
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse page-columns page-full">
<div class="callout-body-container callout-body page-columns page-full">
<div>

</div>
<div class="column-page-inset quarto-layout-panel" data-layout-ncol="3">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2024-02-11-solara-esport-highlights/images/paste-2.png" class="img-fluid figure-img"></p>
<figcaption>Download Twitch/Kick Video Page</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2024-02-11-solara-esport-highlights/images/paste-3.png" class="img-fluid figure-img"></p>
<figcaption>Download Model(s) Page</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2024-02-11-solara-esport-highlights/images/paste-4.png" class="img-fluid figure-img"></p>
<figcaption>Title Generation (Local LLM) Page</figcaption>
</figure>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="building-blocks-code-snippets" class="level2">
<h2 class="anchored" data-anchor-id="building-blocks-code-snippets">Building Blocks / Code-Snippets</h2>
<p>I share some of the more interesting parts of Solara and how it can simplify your Data App.</p>
<section id="building-progress-loaders-in-solara" class="level3">
<h3 class="anchored" data-anchor-id="building-progress-loaders-in-solara">Building Progress Loaders in Solara</h3>
<p>I created a component to wrap Progress on top of the <code>use_thread</code>&nbsp; returned <code>solara.Result</code>&nbsp; class. This is very useful when you‚Äôre writing code and want a ‚Äúprettier‚Äù spinner with some text.</p>
<p>The possibility to create re-usable components which are stateful like this is exciting!</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@solara.component</span>()</span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ProgressDynamic(</span>
<span id="cb1-3">    msg: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb1-4">    result: solara.Result[Any],</span>
<span id="cb1-5">):</span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> result.state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> solara.ResultState.RUNNING:</span>
<span id="cb1-7">        Progress(msg)</span></code></pre></div>
<p>This is a quite simple class, yet it cleans up a lot of code when called like:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> write_video.use_thread(</span>
<span id="cb2-2">    tstamp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start"</span>],</span>
<span id="cb2-3">    tstamp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end"</span>],</span>
<span id="cb2-4">    selected_vid,</span>
<span id="cb2-5">    Path(file_name).stem,</span>
<span id="cb2-6">)</span>
<span id="cb2-7">Progress(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Building Clip..."</span>, res)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2024-02-11-solara-esport-highlights/imgs/image.png" class="img-fluid figure-img"></p>
<figcaption>Resulting spinner on loads</figcaption>
</figure>
</div>
</section>
<section id="checkpointing-state-management-and-parentchildren-hierarchy" class="level3">
<h3 class="anchored" data-anchor-id="checkpointing-state-management-and-parentchildren-hierarchy">Checkpointing / State Management and Parent/Children (Hierarchy)</h3>
<p>State in Solara is managed through <code>solara.reactive</code>‚Äôs. These enable a clean representation of UI &amp; backend state. Adding hierarchy it becomes even better, it‚Äôs just as React! State trickles both up and down through the tree.</p>
<section id="trickle-down-to-child" class="level4">
<h4 class="anchored" data-anchor-id="trickle-down-to-child">Trickle Down to Child</h4>
<p>One way to use state hierarchy is to provide from parent to child a <code>solara.reactive</code> which enables downstream users to atomically update as parent, or anyone, updates said state variable.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@solara.component</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> CutOffChartSelection(</span>
<span id="cb3-3">    cut_off: solara.Reactive[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>],</span>
<span id="cb3-4">    df: pl.DataFrame,</span>
<span id="cb3-5">): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this method is simplified to show-case important parts.</span></span>
<span id="cb3-6">    div <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solara.Column()</span>
<span id="cb3-7">    solara.SliderInt(</span>
<span id="cb3-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Highlight Y-Cutoff"</span>,</span>
<span id="cb3-9">        cut_off,</span>
<span id="cb3-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"preds"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb3-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"preds"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(),</span>
<span id="cb3-12">        thumb_label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"always"</span>,</span>
<span id="cb3-13">        tick_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end_points"</span>,</span>
<span id="cb3-14">    )</span>
<span id="cb3-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> div:</span>
<span id="cb3-16">        fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> px.line(df, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timestamp"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"preds"</span>, line_shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hv"</span>)</span>
<span id="cb3-17">        fig.add_hline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cut_off.value, line_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb3-18">        solara.FigurePlotly(fig)</span></code></pre></div>
<p>What‚Äôs important here?</p>
<ol type="1">
<li>Note how I set <code>div = solara.Column()</code>&nbsp; this lets me re-order UI and disregard execution flow.&nbsp;</li>
<li>Note <code>cut_off</code>&nbsp; is <code>solara.Reactive</code>, whenever this is updated in parent the child will be updated additionally. And the reverse is also true.</li>
</ol>
</section>
<section id="trickle-up-to-parent" class="level4">
<h4 class="anchored" data-anchor-id="trickle-up-to-parent">Trickle Up to Parent</h4>
<p>State does not only trickle up, as the <code>solara.reactive</code> is the same as every other use we can change state in a child and trickle up to parent and other consumers!</p>
<p>It‚Äôs a very simple and clean approach to state, kudos React and Solara!</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@solara.component</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ModelFileSelectComponent(</span>
<span id="cb4-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>: solara.Reactive[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>],</span>
<span id="cb4-4">    model: solara.Reactive[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>],</span>
<span id="cb4-5">):</span>
<span id="cb4-6">    files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ...</span>
<span id="cb4-7">    models <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ...</span>
<span id="cb4-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> solara.Card(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Select Video/Model"</span>):</span>
<span id="cb4-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> solara.Columns():</span>
<span id="cb4-10">            solara.Select(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Select File"</span>, values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>files, value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb4-11">            solara.Select(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Select Model"</span>, values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models, value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model)</span></code></pre></div>
<p>In this component we can see that we insert <code>file: solara.Reactive</code>&nbsp; which is edited through the <code>solara.Select</code>. This creates a clean trickle-up flow and allow us to hide details.</p>
<blockquote class="blockquote">
<p>‚ö†Ô∏è It would be even cleaner if our component could return this reactive variable, rather than declaring it in parent.</p>
</blockquote>
</section>
</section>
<section id="threading-to-improve-ui-experience" class="level3">
<h3 class="anchored" data-anchor-id="threading-to-improve-ui-experience">Threading to improve UI experience</h3>
<p>When working with UI it‚Äôs important to not block the main thread, sometimes called <em>the rendering thread</em>.&nbsp;</p>
<p>If we block the main thread <strong>the app becomes frozen</strong> and doesn‚Äôt respond. This becomes a bad user experience.</p>
<p><strong>It‚Äôs solved by using threads</strong> which fortunately Solara makes a breeze. There‚Äôs two ways to apply threading.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Memoized function</span></span>
<span id="cb5-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@solara.memoize</span></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> slow_func(...): ...</span>
<span id="cb5-4">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> slove_func.use_thread(...)</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Run thread directly</span></span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> slow_func_2(...): ...</span>
<span id="cb5-8">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solara.use_thread(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span>: slow_func_2(...), dependencies<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>...)</span></code></pre></div>
<p>Both approaches results in <code>solara.Result</code> value that updates itself as it progress.</p>
<blockquote class="blockquote">
<p><code>solara.Result[T]</code> has two important values.</p>
<ol type="1">
<li><p><code>state</code> which is one of the following: <code>[..., RUNNING, FINISHED]</code>.</p></li>
<li><p>Once finished <code>value</code> will be filled of the result <code>T</code>.</p></li>
</ol>
</blockquote>
<p>The result is a smooth experience through threads. The developer side is not as perfect and feels underdeveloped, I end up writing something that feels almost like an anti-pattern with a bunch of if-elses to figure if result is done.</p>
<p>I can see a future where you call a <code>.use_thread</code> with something like <code>apply_progress=True</code> and also inject your own <code>solara.Reactive</code> to allow a more reactive approach to the result. The current result is clear code though, that‚Äôs explainable even on GitHub - as shared below.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> write_video.use_thread(...)</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> res.state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> solara.ResultState.RUNNING:</span>
<span id="cb6-4">    Progress(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Writing video..."</span>)</span>
<span id="cb6-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> res.state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> solara.ResultState.FINISHED:</span>
<span id="cb6-6">    show_finished_ui(...)</span></code></pre></div>
<p>Again, this is no problem once-in-a-while, but if you‚Äôre using threads heavily it becomes a if-else craze.</p>
<p><strong>All in all it‚Äôs a good experience to include threading though, something unimaginable in Streamlit!</strong></p>
</section>
<section id="plotly-callbacks" class="level3">
<h3 class="anchored" data-anchor-id="plotly-callbacks">Plotly Callbacks</h3>
<p>I implemented a really cool Plotly Callback through Solara‚Äôs integration. It allows the user to select a subset of the video by ‚Äúzooming‚Äù/‚Äùdragging‚Äù. It‚Äôs a clean approach to selecting sub-parts of videos to build the full video, i.e.&nbsp;one game at a time and not the full stream! See Figure&nbsp;1.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_vals(relayout_dict: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb7-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> relayout_dict <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb7-3">        layout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> relayout_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relayout_data"</span>]</span>
<span id="cb7-4">        start_stop.value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb7-5">            parser.parse(layout[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"xaxis.range[0]"</span>], ignoretz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb7-6">            parser.parse(layout[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"xaxis.range[1]"</span>], ignoretz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb7-7">        ]</span>
<span id="cb7-8"></span>
<span id="cb7-9">solara.FigurePlotly(fig, on_relayout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>update_vals)</span></code></pre></div>
<div id="fig-plotly" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-plotly-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<video src="imgs/full_app_use.mp4" class="img-fluid" controls=""><a href="imgs/full_app_use.mp4">Video</a></video>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-plotly-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Plotly Callback Display
</figcaption>
</figure>
</div>
</section>
</section>
<section id="how-to-run-app" class="level2">
<h2 class="anchored" data-anchor-id="how-to-run-app">How To Run App</h2>
<p>I have added two ways to run the app. Either through Docker/podman containers or through Python invocation.</p>
<p>For Python I opted for a <code>conda</code> env using <a href="https://mamba.readthedocs.io/en/latest/user_guide/micromamba.html"><code>micromamba</code></a> which is really awesome and simple to get a environment that‚Äôs reproducible.</p>
</section>
</section>
<section id="solara-findings" class="level1">
<h1>Solara findings</h1>
<section id="solara.reactive-is-awesome" class="level2">
<h2 class="anchored" data-anchor-id="solara.reactive-is-awesome"><code>solara.reactive</code> is awesome</h2>
<p>This simple tool enables things that are essentially impossible or creates unmaintainable code in Streamlit. To do similar things you‚Äôd need to hack the state.</p>
<p>Having a multi-stage app like this app where you checkpoint each step into the state would be such a impossibility.</p>
</section>
<section id="solaras-uilogic-separation-is-better-but-not-perfect" class="level2">
<h2 class="anchored" data-anchor-id="solaras-uilogic-separation-is-better-but-not-perfect">Solaras UI/logic separation is better but not perfect</h2>
<p>This might be on myself as I started using Streamlit before Solara. But Solara states that they separate UI and logic better than competitors through <em>reactive</em> state. My experience is that it‚Äôs almost as easy to create the same interdependent mess as in Streamlit.</p>
<blockquote class="blockquote">
<p>Perhaps Reacts ‚Äúclean‚Äù separation is more because of having a clear boundary between backend/frontend rather than React itself.</p>
</blockquote>
</section>
<section id="solara-issues" class="level2">
<h2 class="anchored" data-anchor-id="solara-issues">Solara Issues</h2>
<p>I found myself having big problems with ‚Äúresetting‚Äù state of variables that depend on the Operating System. In Streamlit you can use <code>st.reload()</code> to reload the whole UI, Solara does not have something similar.</p>
<p>My problem was that I have model/video download as part of the UI, and <code>solara.reactive</code> variables that has these variables. It‚Äôs not really possible to update these when changing tabs.<br>
For now there was a decent work-around, rather than using Tabs I use Select to change page. By changing page this way the <code>solara.reactive</code> variables are reloaded.</p>
</section>
</section>
<section id="outro" class="level1">
<h1>Outro</h1>
<p>This is it for today! I hope you enjoyed and potentially became intrigued to test Solara.</p>
<p>I hope to be back within 2 months, to make sure I keep my New Years Resolution üòâ.</p>
<p>~Hampus Lond√∂g√•rd</p>


</section>


 ]]></description>
  <category>data</category>
  <category>machine-learning</category>
  <category>deep-learning</category>
  <category>fun</category>
  <category>solara</category>
  <guid>https://blog.londogard.com/posts/2024-02-11-solara-esport-highlights/</guid>
  <pubDate>Sun, 11 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Automatic Highlight Detection of League of Legends Streams</title>
  <dc:creator>Hampus Lond√∂g√•rd</dc:creator>
  <link>https://blog.londogard.com/posts/2023-09-10-highlights-lol/</link>
  <description><![CDATA[ 





<p>I received a quest by my little brother, creating a League of Legends (LoL) Highlight Extraction tool. It seemed simple enough and I was happy to be able to use my Deep Learning skills for something that could be used by a non-tech person! ü§ì</p>
<p>Where do you even start in such a quest? Data!</p>
<ol type="1">
<li>Have my little brother annotate at minimum 2 streaming sessions of <a href="https://www.twitch.tv/thebauss">TheBauss</a> (√° 6 hours)
<ul>
<li>It‚Äôs some data, not enough or varied enough but it‚Äôs something.</li>
</ul></li>
<li>Create balanced dataset with good splits
<ul>
<li>We cannot leak data between <em>train</em> and <em>validation</em>
<ul>
<li>This is solved by chunking videos into 30s segments which are then split between <em>train</em>/<em>validation</em>.</li>
</ul></li>
<li>Balancing the data to have a little higher highlight distribution than reality, to generalize better.
<ul>
<li>Reality is ~13% highlights, I rebalance the dataset to be ~30% highlights in training.</li>
</ul></li>
</ul></li>
<li>Start training!</li>
</ol>

<div class="no-row-height column-margin column-container"><div class="">
<p><strong>TheBaussffs</strong><br>
Simon ‚ÄúThebausffs‚Äù Hofverberg (born October 3, 1999) is a Swedish player who last played for G2 Esports. He‚Äôs one of the biggest League of Legends streaming personas on Twitch right now (2023).</p>
<p>Known for:</p>
<ul>
<li>Highest ranked AD Sion player on EUW.</li>
<li>‚ÄúInting mode‚Äù where he dies but wins in gold based on calculated trades and ‚Äúgood deaths‚Äù.</li>
</ul>
</div></div><section id="model-architectures" class="level2">
<h2 class="anchored" data-anchor-id="model-architectures">Model Architectures</h2>
<p>I chose to go with two different architectures:</p>
<ol type="1">
<li><strong>Image Classification</strong>
<ul>
<li>KISS: use ResNet (testing both pretrained &amp; scratch)</li>
<li>Potentially use some other architecture in the future</li>
</ul></li>
<li><strong>Video Classification</strong>
<ul>
<li>KISS: Use RNN on top of ‚ÄúImage Classifier‚Äù that has no head, i.e.&nbsp;Feature Extractor</li>
<li>RNN are naturally good with sequences as they‚Äôve an internal state</li>
</ul></li>
</ol>
<p>In the future I‚Äôd like to try a VisionTransformer (ViT), but for now I‚Äôll keep my compute low and see where I can go! As <a href="https://twitter.com/jeremyphoward">Jeremy Howard</a> says, start simple and scale when required - it‚Äôs better to have something than nothing.</p>
</section>
<section id="implementation" class="level2">
<h2 class="anchored" data-anchor-id="implementation">Implementation</h2>
<p>The implementation exists in a single Notebook (runnable in Google Colab with a free GPU) - keeping it simple to use as a non-programmer (my brother).</p>
<p>There‚Äôs a few steps:</p>
<ol type="1">
<li>Download Twitch Stream (<code>twitch-dl</code>)</li>
<li>Convert into frames in a set FPS (3, <code>ffmpeg</code>)</li>
<li>Upload to Cloudflare R2 (persist)</li>
<li>Build DataLoader</li>
<li>Select and Train Model</li>
<li>Load model and run inference</li>
</ol>
<section id="ffmpeg-cuda-step-2" class="level3">
<h3 class="anchored" data-anchor-id="ffmpeg-cuda-step-2">FFMPEG + CUDA (step 2)</h3>
<p>The <code>ffmpeg</code> conversion from Video to Frame was incredibly slow on Colab, I found two issues:</p>
<ol type="1">
<li>CPU is much poorer than M1 Macbooks (~30x)</li>
<li>Mounting storage (GDrive) makes it not work at all (100x)</li>
</ol>
<p>The second option is simple, have all data located on the Colabs storage and do conversion, then when done copy to mounted storage (GDrive) for persistance.</p>
<p>The first is a bit harder, but I found that I could accelerate conversion using CUDA! ü§ì</p>
<p>The result? <strong>Beautiful!</strong><br>
There‚Äôs some delay through moving data from RAM to GPU but it gave <strong>magnitudes of speed-up</strong> - which is awesome!</p>
<p>And it‚Äôs not that hard, I was confused by multiple places to enable CUDA, but found the following to be the best:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ffmpeg</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-hwaccel</span> cuda <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>FILE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> -preset faster <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-vf</span> fps=3 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-q:v</span> 25 img%d.jpg</span></code></pre></div>
<p>This command will use <code>hwaccel</code> as CUDA, which means that it accelerate certain workloads by moving data to the GPU (expensive) then computing it on the GPU (fast). It‚Äôll run with <code>fps=3</code> in this setup. I found it on average sped up my frame-creation by 14-30x.</p>
</section>
<section id="small-to-medium-dataset-speedups" class="level3">
<h3 class="anchored" data-anchor-id="small-to-medium-dataset-speedups">Small to Medium Dataset Speedups</h3>
<p>In my professional worklife I‚Äôve found that smaller datasets (&lt;= RAM) has <em>huge</em> performance gains by keeping tensors in-memory, it‚Äôs much larger than I ever anticipated.<br>
For this dataset I could only keep labels in-memory, but doing that makes sense as well. üòâ</p>
</section>
</section>
<section id="analysis" class="level2">
<h2 class="anchored" data-anchor-id="analysis">Analysis</h2>
<p>Analyzing my results was done by a few different things:</p>
<ol type="1">
<li>Metrics (üòÖ)</li>
<li>LIME</li>
<li>Viewing data that model predicts as non-highlight but is highlight</li>
<li>*<strong>Timeline chart</strong>
<ul>
<li>This was the best way to review a ‚Äúunknown‚Äù clip, do the highlight intensities overlap real highlights? Boy they do!</li>
<li>It‚Äôs also how it‚Äôll be used by my brother.</li>
</ul></li>
</ol>
</section>
<section id="result" class="level2">
<h2 class="anchored" data-anchor-id="result">Result</h2>
<p>The results are better than expected! I hit ~80% accuracy which is pretty good based on image-to-image classification, if we did an average of the last few frames I‚Äôd bet it‚Äôd be better. All in all having non-perfect score in such a subjective task as Highlight Extraction is a strength. We don‚Äôt want to overfit the data but rather be able to find highlights in new clips.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2023-09-10-highlights-lol/imgs/val_accuracy.png" class="img-fluid figure-img"></p>
<figcaption>Validation Accuracy</figcaption>
</figure>
</div>
<p>And to build my highlights I did a <code>rolling_sum</code> on the last 30 seconds of predictions, giving a <em><strong>highlight intensity</strong></em> chart as shown in Figure&nbsp;1.</p>
<div id="fig-intensity" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-intensity-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://blog.londogard.com/posts/2023-09-10-highlights-lol/imgs/highlights_test.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-intensity-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Highlight Intensity Chart
</figcaption>
</figure>
</div>
<p>After manual validation of the Intensity Chart it looked really good! It had lower score on some ‚Äúeasier 1v1 kills‚Äù, but all the cool fights and ults was caught by the model! I‚Äôm a bit impressed about how well a simple Image Classifier solve this task, applying Video Classification didn‚Äôt really change the results that much and introduced unwaranted complexity.</p>
<p>The result is that the model predics ~8% of all frames as highlights, which is pretty darn good number as the ‚Äúreal‚Äù one is ~13%!</p>
</section>
<section id="appendix-code" class="level1">
<h1>Appendix: Code</h1>
<section id="data-tools" class="level2">
<h2 class="anchored" data-anchor-id="data-tools">Data Tools</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Data Splitter
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> chunk_splitter(total_size: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, chunk_size: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, split: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> np.array:</span>
<span id="cb2-2">    _, val_idxs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(np.arange(total_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> chunk_size), test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>split, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ignoring final unsized chunk</span></span>
<span id="cb2-3">    is_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(total_size, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int"</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> index <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> val_idxs:</span>
<span id="cb2-6">        index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> chunk_size</span>
<span id="cb2-7">        is_valid[index:index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>chunk_size] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-8"></span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> is_valid</span></code></pre></div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
FrameDataset
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> FrameDataset(Dataset):</span>
<span id="cb3-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb3-3">               df: pl.DataFrame,</span>
<span id="cb3-4">               augments: Compose,</span>
<span id="cb3-5">               frames_per_clip: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>,</span>
<span id="cb3-6">               stride: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb3-7">               is_train: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb3-8">               ):</span>
<span id="cb3-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb3-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"path"</span>].to_list()</span>
<span id="cb3-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.is_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> is_train</span>
<span id="cb3-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_train:</span>
<span id="cb3-13">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>])</span>
<span id="cb3-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.frames_per_clip <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> frames_per_clip</span>
<span id="cb3-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.augments <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> augments</span>
<span id="cb3-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stride <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> frames_per_clip</span>
<span id="cb3-17"></span>
<span id="cb3-18">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-19">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.paths) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stride</span>
<span id="cb3-20"></span>
<span id="cb3-21">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, idx):</span>
<span id="cb3-22">      start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stride</span>
<span id="cb3-23">      stop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.frames_per_clip</span>
<span id="cb3-24">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> stop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb3-25">        path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.paths[start]</span>
<span id="cb3-26">        frames_tr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._open_augment_img(path)</span>
<span id="cb3-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.is_train:</span>
<span id="cb3-28">          y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y[start]</span>
<span id="cb3-29">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-30">        frames <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._open_augment_img(path) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> path <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.paths[start:stop]]</span>
<span id="cb3-31">        frames_tr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(frames)</span>
<span id="cb3-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.is_train:</span>
<span id="cb3-33">          y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y[start:stop].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb3-34">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.is_train:</span>
<span id="cb3-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> frames_tr, y</span>
<span id="cb3-36">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> frames_tr</span>
<span id="cb3-38"></span>
<span id="cb3-39">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _open_augment_img(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, path):</span>
<span id="cb3-40">      img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> default_loader(path)</span>
<span id="cb3-41">      img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.augments(img)</span>
<span id="cb3-42">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> img</span></code></pre></div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Lightning DataModule
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> FrameDataModule(L.LightningDataModule):</span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb4-3">                 dataset: Dataset,</span>
<span id="cb4-4">                 batch_size: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,</span>
<span id="cb4-5">                 chunk_size_for_splitting: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,</span>
<span id="cb4-6">                 num_workers: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb4-7">                 pin_memory: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb4-8">                 ):</span>
<span id="cb4-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb4-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset</span>
<span id="cb4-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_size</span>
<span id="cb4-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_workers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_workers</span>
<span id="cb4-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pin_memory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pin_memory</span>
<span id="cb4-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.chunk_size_for_splitting <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chunk_size_for_splitting</span>
<span id="cb4-15">        split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chunk_splitter(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ds), chunk_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.chunk_size_for_splitting, split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.15</span>)</span>
<span id="cb4-16">        val_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(split)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-17">        train_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ds_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Subset(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset, train_indices)</span>
<span id="cb4-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ds_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Subset(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset, val_indices)</span>
<span id="cb4-20"></span>
<span id="cb4-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train_dataloader(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> DataLoader(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ds_train, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_size, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_workers, pin_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pin_memory)</span>
<span id="cb4-23"></span>
<span id="cb4-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> val_dataloader(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> DataLoader(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ds_val, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_size, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_workers, pin_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pin_memory)</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="classifiers" class="level2">
<h2 class="anchored" data-anchor-id="classifiers">Classifiers</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Image Classifier (ResNet)
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ResNetClassifier(nn.Module):</span>
<span id="cb5-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, model: ResNet, num_classes: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb5-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb5-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_classes</span>
<span id="cb5-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model</span>
<span id="cb5-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.fc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.fc.in_features, num_classes)</span>
<span id="cb5-7"></span>
<span id="cb5-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb5-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model(x)</span></code></pre></div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Video Classifier (RNN+ResNet)
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> RNNClassifier(nn.Module):</span>
<span id="cb6-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, model: ResNet, num_classes: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb6-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb6-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_classes</span>
<span id="cb6-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.feature_extractor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># repeat thrice</span></span>
<span id="cb6-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.feature_extractor.fc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># New fc layer</span></span>
<span id="cb6-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rnn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.LSTM(</span>
<span id="cb6-8">            input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>,</span>
<span id="cb6-9">            hidden_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>,</span>
<span id="cb6-10">            num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb6-11">            batch_first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb6-12">          )</span>
<span id="cb6-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.classifier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, num_classes)</span>
<span id="cb6-14"></span>
<span id="cb6-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb6-16">      features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-17"></span>
<span id="cb6-18">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb6-19">          frame_feat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.feature_extractor(x[:, i])</span>
<span id="cb6-20">          features.append(frame_feat)</span>
<span id="cb6-21"></span>
<span id="cb6-22">      x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.reshape(torch.stack(features), [x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb6-23"></span>
<span id="cb6-24">      out, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rnn(x)</span>
<span id="cb6-25">      out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :]</span>
<span id="cb6-26"></span>
<span id="cb6-27">      out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.classifier(out)</span>
<span id="cb6-28"></span>
<span id="cb6-29">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> out</span></code></pre></div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
LightningWrapper
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Any</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb7-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb7-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> lightning <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> L</span>
<span id="cb7-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchmetrics</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LightningWrapper(L.LightningModule):</span>
<span id="cb7-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, model: nn.Module, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span>):</span>
<span id="cb7-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb7-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model</span>
<span id="cb7-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> learning_rate</span>
<span id="cb7-13">        metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchmetrics.MetricCollection({</span>
<span id="cb7-14">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"accuracy"</span>: torchmetrics.Accuracy(task<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"multiclass"</span>, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model.num_classes)</span>
<span id="cb7-15">            })</span>
<span id="cb7-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.train_metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> metrics.clone(prefix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train_"</span>)</span>
<span id="cb7-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.val_metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> metrics.clone(prefix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"val_"</span>)</span>
<span id="cb7-18"></span>
<span id="cb7-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb7-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model(x)</span>
<span id="cb7-21"></span>
<span id="cb7-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> training_step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, batch, batch_idx):</span>
<span id="cb7-23">        x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch</span>
<span id="cb7-24">        logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>(x)</span>
<span id="cb7-25">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, y)</span>
<span id="cb7-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_loss'</span>, loss)</span>
<span id="cb7-27">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.train_metrics(logits, y)</span>
<span id="cb7-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log_dict(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.train_metrics, prog_bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> loss</span>
<span id="cb7-30"></span>
<span id="cb7-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> validation_step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, batch, batch_idx):</span>
<span id="cb7-32">        x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch</span>
<span id="cb7-33">        logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>(x)</span>
<span id="cb7-34">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.cross_entropy(logits, y)</span>
<span id="cb7-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val_loss'</span>, loss)</span>
<span id="cb7-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.val_metrics(logits, y)</span>
<span id="cb7-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log_dict(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.val_metrics, prog_bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-38"></span>
<span id="cb7-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> configure_optimizers(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb7-40">        optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr)</span>
<span id="cb7-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> optimizer</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="training-loop" class="level2">
<h2 class="anchored" data-anchor-id="training-loop">Training Loop</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Lightning Loop
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">mlf_logger <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MLFlowLogger(log_model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-2">mlflow.pytorch.autolog()</span>
<span id="cb8-3"></span>
<span id="cb8-4">BATCH_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the duration of each chunk in seconds</span></span>
<span id="cb8-6">chunk_duration_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb8-7">chunk_duration_frames <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> chunk_duration_s</span>
<span id="cb8-8">transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb8-9">  transforms.Resize((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>)),</span>
<span id="cb8-10">  transforms.ToTensor()</span>
<span id="cb8-11">])</span>
<span id="cb8-12">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FrameDataset(labeled_df_rebalanced, transform, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set 1 to higher if image classifier, is num_frames</span></span>
<span id="cb8-13">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FrameDataModule(ds, BATCH_SIZE, chunk_duration_frames, pin_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-14"></span>
<span id="cb8-15">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResNetClassifier(models.resnet50()) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># image classifier</span></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model = RNNClassifier(models.resnet18()) # video classifier</span></span>
<span id="cb8-17">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LightningWrapper(model, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-4</span>)</span>
<span id="cb8-18">trainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L.Trainer(max_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, logger<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mlf_logger, callbacks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[ModelCheckpoint(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)])</span>
<span id="cb8-19"></span>
<span id="cb8-20"></span>
<span id="cb8-21"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> mlflow.start_run():</span>
<span id="cb8-22">  trainer.fit(model, datamodule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data)</span></code></pre></div>
</div>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>data</category>
  <category>machine-learning</category>
  <category>deep-learning</category>
  <category>fun</category>
  <guid>https://blog.londogard.com/posts/2023-09-10-highlights-lol/</guid>
  <pubDate>Sun, 10 Sep 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Solara - ‚ÄòA new Reactive Streamlit‚Äô</title>
  <dc:creator>Hampus Lond√∂g√•rd</dc:creator>
  <link>https://blog.londogard.com/posts/2023-06-30-solara/</link>
  <description><![CDATA[ 





<p>Solara (<a href="https://solara.dev/">solara.dev</a>) is a fresh and exciting web framework that enables React-style state-handling while keeping UI (almost) as easy as Streamlit (<a href="https://streamlit.io/">streamlit.io</a>). Further by design it seems to have a bigger industrial potential than Streamlit.<br>
In this post I‚Äôll introduce Solara and compare it to the more well known Streamlit that can be used to build web apps and interactive Data Dashboards.</p>
<p>Solara and Streamlit are web frameworks which makes it very easy to write a full-stack app that can be everything from a small Proof-of-Concept to a big complicated Data Dashboard. There exist other competitors such as <a href="https://dash.plotly.com/">Dash</a>, <a href="https://panel.holoviz.org/">Panel</a> and <a href="https://voila.readthedocs.io/en/stable/">Voila</a> which we‚Äôll not include in-depth as comparison between those and Streamlit has been done previously.</p>
<p>I‚Äôm very excited to see where Solara ends up in the future. I believe it has a bright future ahead. During my initial tests it seems like a solid framework, there‚Äôs still some rough edges to fix but all in all it‚Äôs really good!</p>
<p>Here‚Äôs my quick introduction and comparison with Streamlit!</p>
<section id="streamlit-and-why-its-awesome" class="level3">
<h3 class="anchored" data-anchor-id="streamlit-and-why-its-awesome">Streamlit and why it‚Äôs awesome</h3>
<p>I‚Äôm a huge Streamlit fan. There‚Äôs a lot to love, the first time I tried it everything clicked. It‚Äôs simple and good looking, the User Experience (UX) and Developer Experience (DX) is exceptional. Using it I can easily build beautiful web apps in no time, efficient Data Dashboards and small Proof-of-Concepts (PoC).</p>
<p>With that said everything has a drawback, and Streamlit‚Äôs is performance once it scales to large. Streamlit works by rerunning everything in the script top-down once a change happens in the web app. This makes it incredibly simple to reason about and reduces the number of bugs, but it also builds what can become a huge bottleneck and slow down the app.&nbsp;</p>
<p>Streamlit solves this by introducing&nbsp;<code>cache</code> which allows reusing results from expensive computations and in the UI they reuse components to make the flow smother if nothing changes, this is done using the internal&nbsp;<code>state</code>. Once you start modifying&nbsp;<code>state</code>&nbsp; and&nbsp;<code>cache</code>&nbsp;the complexity grows quickly and the app becomes much harder to reason about.</p>
<p>Streamlit could solve this by enabling better API‚Äôs which allows better ‚Äúdata-flow‚Äù choices, like the&nbsp;<code>st.form</code>&nbsp; enables non-recalculated views unless submitted.</p>
<p>For now though‚Ä¶ Let‚Äôs try&nbsp;<strong><code>solara</code></strong>&nbsp;a new exciting framework which does exactly this, but without the same simplicity.</p>
</section>
<section id="solara-introduction" class="level3">
<h3 class="anchored" data-anchor-id="solara-introduction">Solara Introduction</h3>
<p>Solara is a similar framework to Streamlit, but rather than rerunning everything top-down every time it uses a reactive approach through&nbsp;<code>reacton</code>&nbsp;(<a href="https://github.com/widgetti/reacton">github.com/widgetti/reacton</a>) that is a pure Python port of React to&nbsp;<code>ipywidgets</code>.</p>
<p>This means that only components that are using the reactive variable is rerun, which is very exciting! The performance improvements becomes great at the cost of a more declarative state-handling.</p>
<p>In Streamlit state is handled for you, in Solara state is separated from the component, like react, which means you handle it explicitly and further reduce hidden magic that in the end sometimes leads to a fragile complex app as the app grows.<br>
<a href="https://shiny.rstudio.com/py/docs/comp-streamlit.html#streamlit-requires-rewriting">shiny.rstudio.com</a> shares examples of how complex state-handling can become in <code>streamlit</code>. What cannot be shared easily is how badly this scales with app size and complexity. The global state can, and probably sometimes will, lead to hard-to-find bugs and a hard time to achieve high-performant apps.</p>
<p>An example app and deeper introduction can be found in a later section.</p>
</section>
<section id="solara-versus-streamlit" class="level2">
<h2 class="anchored" data-anchor-id="solara-versus-streamlit">ü•äSolara versus Streamlit</h2>
<p>In here I‚Äôll compare Solara and Streamlit, for a more in-depth usage see later sections.</p>
<section id="tldr" class="level3">
<h3 class="anchored" data-anchor-id="tldr">TL;DR</h3>
<p>Code is on GitHub&nbsp;<a href="https://github.com/Lundez/solara_app">lundez/solara_app</a> / Section&nbsp;1, and I added suggested improvements via&nbsp;<a href="https://github.com/widgetti/solara/pull/180">PR#180</a>&nbsp;and&nbsp;<a href="https://github.com/widgetti/solara/issues/177">Issue#177</a>&nbsp;to Solara.</p>
<ul>
<li><strong>Con:</strong>&nbsp;Higher learning curve (floor) as you handle state manually (no magic), but with better DX I see it beating Streamlit because of the higher ceiling that brings new possibilities.
<ul>
<li><strong>Pro:</strong>&nbsp;Bonus: we learn the React paradigm which is widely used in frontend! A win-win for developers.</li>
</ul></li>
<li><strong>Pro:</strong>&nbsp;A better industrial thinking
<ol type="1">
<li>Testing is actually handled E2E by using&nbsp;<code>playwright</code>&nbsp; ‚Äì&nbsp;<a href="https://solara.dev/docs/howto/testing">docs</a>.</li>
<li>Routing is first-class citizen ‚Äì&nbsp;<a href="https://solara.dev/docs/understanding/routing">docs</a>.</li>
<li>Embeddable, in flask/fastAPI/‚Ä¶ ‚Äì&nbsp;<a href="https://solara.dev/docs/deploying/self-hosted">docs</a>.</li>
</ol></li>
<li><strong>Con:</strong>&nbsp;UX is not as good as Streamlit.</li>
<li><strong>Pro:</strong>&nbsp;Embeddable in Notebooks making it simpler to go&nbsp;<em>really fast</em>.</li>
<li><strong>Pro:</strong>&nbsp;Access to all&nbsp;<code>ipywidgets</code>&nbsp;which is an incredible ecosystem.&nbsp;</li>
</ul>
<p>Additionally compared to another interesting framework like&nbsp;<a href="https://panel.holoviz.org/" title="https://panel.holoviz.org/">Panel</a>&nbsp;it‚Äôs much simpler IMO.</p>
<p>Most certainly Solara has a bright future if the development and maintenance is kept up, with additional marketing it can become a great competitor in the space for Gradio, Streamlit and others.</p>
</section>
</section>
<section id="solara-introduction-1" class="level2">
<h2 class="anchored" data-anchor-id="solara-introduction-1">Solara Introduction</h2>
<p>All code is available on GitHub&nbsp;<a href="https://github.com/Lundez/solara_app" title="https://github.com/Lundez/solara_app">lundez/solara_app</a> and Section&nbsp;1.</p>
<section id="a-simple-app" class="level3">
<h3 class="anchored" data-anchor-id="a-simple-app">A simple app</h3>
<p>Using Solara to build a simple app is pretty clean, we can clearly see the&nbsp;<code>react</code>&nbsp;-hook being used for&nbsp;<code>file</code>&nbsp; which is cool!</p>
<p>The entry-point in Solara is defined as a <code>component</code> named <code>Page</code>. This is automatically picked up and rendered. To show in a notebook you simply use&nbsp;<code>display(Page())</code>.&nbsp;</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> solara</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@solara.component</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> Page():</span>
<span id="cb1-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, set_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solara.use_state(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-7">    solara.Markdown(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# Solara Example App (Starbucks Data)"</span>)</span>
<span id="cb1-8">    solara.FileDrop(on_file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>set_file, lazy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb1-10">        df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.read_csv(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>], null_values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>).drop_nulls()</span>
<span id="cb1-11">        solara.DataFrame(df.to_pandas()) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># currently does not support polars</span></span>
<span id="cb1-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb1-13">        solara.Text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Make sure to upload a file"</span>)</span></code></pre></div>
<p>And run it through</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">solara</span> run app.py</span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use solara run --host localhost app.py on WSL until PR#180 or other is merged</span></span></code></pre></div>
<p>Quite simple right? It‚Äôs incredibly similar to how you run Streamlit üòâ.</p>
</section>
<section id="working-more-with-state" class="level3">
<h3 class="anchored" data-anchor-id="working-more-with-state">Working more with state</h3>
<p>In the previous code we only used the state inside the same component, that‚Äôs all fine but it‚Äôs not a very good use-case.</p>
<p>Solara introduces 2 other types of state,&nbsp;<code>reactive</code>&nbsp; and&nbsp;<code>use_reactive</code>. Both very similar but&nbsp;<code>use_reactive</code>&nbsp; is only possible to use locally inside a&nbsp;<code>component</code>. The&nbsp;<code>reactive</code>&nbsp;function should only be used outside of components, for application wide state. If you use it inside a <code>component</code> it‚Äôll be reset as the re-render happens, which is not what you‚Äôd expect.</p>
<p>As such we define a&nbsp;<code>reactive</code>&nbsp; variable&nbsp;<code>sodium</code>.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">sodium <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solara.reactive(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<p>further we bind this to a slider</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">solara.SliderInt(value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sodium)</span></code></pre></div>
<p>where it‚Äôll automatically update whenever a user changes the slider.<br>
We can then send this to a child-component which would be updated as well when it‚Äôs changed.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">ChildPage(sodium)</span></code></pre></div>
<p>See&nbsp;<a href="https://github.com/Lundez/solara_app" title="https://github.com/Lundez/solara_app">lundez/solara_app</a>&nbsp;to get a little more complex scenario.</p>
<p>And that‚Äôs my quick and dirty introduction to Solara!</p>
</section>
</section>
<section id="solara-and-streamlit-comparison" class="level2">
<h2 class="anchored" data-anchor-id="solara-and-streamlit-comparison">Solara and Streamlit comparison</h2>
<p>A comparison between the two is available in Section&nbsp;1, where I use multiple components and share state between them. If you add some logging you can see that <strong>Solara doesn‚Äôt rerun code unnecessarily</strong>.</p>
<section id="quick-facts" class="level3">
<h3 class="anchored" data-anchor-id="quick-facts">Quick Facts</h3>
<table class="caption-top table">
<tbody>
<tr class="odd">
<td>Measurement</td>
<td>Solara</td>
<td>Streamlit</td>
</tr>
<tr class="even">
<td>#lines of code (LOC)</td>
<td>53</td>
<td><strong>49</strong></td>
</tr>
<tr class="odd">
<td>Simplicity (0-5)</td>
<td>3</td>
<td><strong>4</strong></td>
</tr>
<tr class="even">
<td>Performance (0-5)</td>
<td><strong>4</strong></td>
<td>3</td>
</tr>
<tr class="odd">
<td>UX (0-5) - images in Section&nbsp;0.3.2.3</td>
<td>3</td>
<td><strong>5</strong></td>
</tr>
</tbody>
</table>
<p>Streamlit wins most, but with the performance and possibilities of Solara I still see it as a very capable contender. With, hopefully soon, improved UX and DX&nbsp;<code>solara</code>&nbsp; can grow to be really big!</p>
<p>In the TL;DR section you can see some other niceties of Solara such as Testing, Embeddability and more!&nbsp;</p>
</section>
<section id="deeper-comparison" class="level3">
<h3 class="anchored" data-anchor-id="deeper-comparison">Deeper Comparison</h3>
<section id="state-and-pythonicism" class="level4">
<h4 class="anchored" data-anchor-id="state-and-pythonicism">State and ‚Äòpythonicism‚Äô</h4>
<p>The&nbsp;<code>React</code> paradigm, while cool, is&nbsp;<strong>certainly not pythonic</strong>&nbsp;at all! I believe that the&nbsp;<strong>initial ‚ÄúPoC‚Äù-stage implementation should be simpler</strong>&nbsp;to get started with. To ‚Äúturn the knobs‚Äù and squeeze performance as is possible is great and should certainly be available for the more performance intense sections.</p>
<p>The positive of all this is that we learn the ‚ÄúReact-paradigm‚Äù and we handle state explicitly, i.e.&nbsp;no Streamlit magic!&nbsp;</p>
<p><strong>It‚Äôs a tie.</strong></p>
</section>
<section id="embeddability" class="level4">
<h4 class="anchored" data-anchor-id="embeddability">Embeddability</h4>
<p>The embedability of Solara is a clear winner, being able to include it in our FastAPI backend or building an app initially directly in a Jupyter Notebook is insanely good.</p>
<p><strong>Solara wins.</strong></p>
</section>
<section id="sec-ux" class="level4">
<h4 class="anchored" data-anchor-id="sec-ux">Components &amp; UX</h4>
<p>Streamlits components are better and more beautiful but Solara is not far behind, and with the possibility to use all components from&nbsp;<code>ipywidget</code>-ecosystem makes it incredibily powerful.</p>
<p>I see this as a huge boon.</p>
<section id="image-comparisons-of-components" class="level5">
<h5 class="anchored" data-anchor-id="image-comparisons-of-components">Image Comparisons of Components</h5>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2023-06-30-solara/assets/solara_no_file.png" class="img-fluid figure-img"></p>
<figcaption><strong>Solara No File</strong> ‚Äì bad design and too raw</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2023-06-30-solara/assets/streamlit_no_file.png" class="img-fluid figure-img"></p>
<figcaption><strong>Streamlit No File</strong> ‚Äì clear in both drag &amp; select files</figcaption>
</figure>
</div>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2023-06-30-solara/assets/solara_file.png" class="img-fluid figure-img"></p>
<figcaption><strong>Solara With File</strong> ‚Äì we cannot remove file clearly</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2023-06-30-solara/assets/streamlit_file.png" class="img-fluid figure-img"></p>
<figcaption><strong>Streamlit With File</strong> ‚Äì file can be removed easily</figcaption>
</figure>
</div>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2023-06-30-solara/assets/solara_slider.png" class="img-fluid figure-img"></p>
<figcaption><strong>Solara Slider</strong> ‚Äì we don‚Äôt know the values</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2023-06-30-solara/assets/streamlit_slider.png" class="img-fluid figure-img"></p>
<figcaption><strong>Streamlit Slider</strong> ‚Äì values are clear</figcaption>
</figure>
</div>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2023-06-30-solara/assets/solara_slider_active.png" class="img-fluid figure-img"></p>
<figcaption><strong>Solara Moving Slider</strong> ‚Äì we now see values</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2023-06-30-solara/assets/streamlit_slider_active.png" class="img-fluid figure-img"></p>
<figcaption><strong>Streamlit Moving Slider</strong></figcaption>
</figure>
</div>
</div>
</div>
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2023-06-30-solara/assets/solara_df.png" class="img-fluid figure-img"></p>
<figcaption><strong>Solara DataFrame</strong> ‚Äì great with defaulted pagination, no sorting though.</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/2023-06-30-solara/assets/streamlit_df.png" class="img-fluid figure-img"></p>
<figcaption><strong>Streamlit DataFrame</strong> ‚Äì we can sort and the columns are clearly separated, it‚Äôs also searchable</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p><strong>It‚Äôs a small win for Streamlit,</strong>&nbsp;Streamlit clearly wins the ‚Äòsimplicity‚Äô, ‚Äòdesign‚Äô and ‚Äòclearness‚Äô but Solara has a bonus for the amount of widgets available through <code>ipywidgets</code> ecosystem.</p>
</section>
</section>
<section id="readability" class="level4">
<h4 class="anchored" data-anchor-id="readability">Readability</h4>
<p>Because&nbsp;<code>solara</code>&nbsp; has less magic I believe Solara is easier to reason about in a complex app, but in the PoC‚Äôs and simple apps Streamlit is just as simple.</p>
<p><strong>It‚Äôs a tie</strong>, but Solara wins as the app grows.</p>
</section>
</section>
</section>
<section id="outro" class="level2">
<h2 class="anchored" data-anchor-id="outro">Outro</h2>
<p>I believe that&nbsp;<code>streamlit</code>&nbsp; still is the best framework to get started with, but in 6 months from now on I can see&nbsp;<code>solara</code>&nbsp; as the better option.</p>
<p>If you‚Äôre developing a dashboard or app that needs high performance and industrial strength I can see&nbsp;<code>solara</code>&nbsp; as a better choice.</p>
<p>I‚Äôll happily try to help Solara grow!</p>
<p>~Hampus Lond√∂g√•rd</p>
<p><strong>P.S.</strong> thanks to <code>@maartenbreddels</code> and <code>@Gordon#1568</code> (Solara‚Äôs Discord) for all the help.</p>
</section>
<section id="sec-appendix" class="level1">
<h1>Appendix</h1>
<p>I include full code here as well. These are taken from <a href="https://github.com/Lundez/solara_app">lundez/solara_app</a> the 29/6 2023.</p>
<section id="solara-app" class="level2">
<h2 class="anchored" data-anchor-id="solara-app">Solara App</h2>
<p>Run using <code>solara run &lt;filename&gt;</code>.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dataclasses <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dataclass</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> solara</span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb6-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> solara.express <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> px</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@solara.component</span></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> Page():</span>
<span id="cb6-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, set_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solara.use_state(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb6-9">    </span>
<span id="cb6-10">    solara.Markdown(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# Solara Example App (Starbucks Data)"</span>)</span>
<span id="cb6-11">    solara.FileDrop(on_file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>set_file, lazy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb6-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb6-13">        df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.read_csv(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>], null_values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>).drop_nulls()</span>
<span id="cb6-14">        DFViews(df)</span>
<span id="cb6-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb6-16">        solara.Text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Make sure to upload a file"</span>)</span>
<span id="cb6-17"></span>
<span id="cb6-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dataclass</span></span>
<span id="cb6-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> FilterValues:</span>
<span id="cb6-20">    sodium: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]</span>
<span id="cb6-21">    carb: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]</span>
<span id="cb6-22"></span>
<span id="cb6-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@solara.component</span></span>
<span id="cb6-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> Filters(df: pl.DataFrame, filters: solara.Reactive[FilterValues]):</span>
<span id="cb6-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> solara.Card(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Filter DataFrame"</span>):</span>
<span id="cb6-26">        carbs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solara.use_reactive((df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Carb. (g)"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Carb. (g)"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()))</span>
<span id="cb6-27">        sodium <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solara.use_reactive((df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sodium"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sodium"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()))</span>
<span id="cb6-28">        solara.SliderRangeInt(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Carbs (g)"</span>, value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>carbs, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Carb. (g)"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Carb. (g)"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>())</span>
<span id="cb6-29">        solara.SliderRangeInt(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sodium"</span>, value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sodium, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sodium"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sodium"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>())</span>
<span id="cb6-30">        </span>
<span id="cb6-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> solara.CardActions():</span>
<span id="cb6-32">            solara.Button(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Submit"</span>, on_click<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span>: filters.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(FilterValues(sodium.value, carbs.value)))</span>
<span id="cb6-33"></span>
<span id="cb6-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@solara.component</span></span>
<span id="cb6-35"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> FilteredPage(df: pl.DataFrame, filter_values: solara.Reactive[FilterValues]):</span>
<span id="cb6-36">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sodium"</span>).is_between(filter_values.value.sodium[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], filter_values.value.sodium[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span></span>
<span id="cb6-37">                   pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Carb. (g)"</span>).is_between(filter_values.value.carb[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], filter_values.value.carb[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb6-38">    DFVis(df)</span>
<span id="cb6-39"></span>
<span id="cb6-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@solara.component</span></span>
<span id="cb6-41"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> DFVis(df: pl.DataFrame):</span>
<span id="cb6-42">    solara.Markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"## DataFrame"</span>)</span>
<span id="cb6-43">    solara.DataFrame(df.to_pandas(), items_per_page<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb6-44">    px.histogram(df, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Carb. (g)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sodium"</span>])</span>
<span id="cb6-45"></span>
<span id="cb6-46"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@solara.component</span></span>
<span id="cb6-47"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> DFViews(df: pl.DataFrame):</span>
<span id="cb6-48">    filter_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> solara.use_reactive(FilterValues((df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Carb. (g)"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Carb. (g)"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()), (df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sodium"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sodium"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>())))</span>
<span id="cb6-49">    Filters(df, filter_values)</span>
<span id="cb6-50">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> solara.Columns():</span>
<span id="cb6-51">            DFVis(df)</span>
<span id="cb6-52">            FilteredPage(df, filter_values)</span></code></pre></div>
</section>
<section id="streamlit-app" class="level2">
<h2 class="anchored" data-anchor-id="streamlit-app">Streamlit App</h2>
<p>Run using <code>streamlit run &lt;filename&gt;</code>.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dataclasses <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dataclass</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> streamlit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> st</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb7-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.express <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> px</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> Page():</span>
<span id="cb7-7">    st.markdown(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"# Streamlit Example App (Starbucks Data)"</span>)</span>
<span id="cb7-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.file_uploader(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Upload a file"</span>)</span>
<span id="cb7-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb7-10">        df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.read_csv(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, null_values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>).drop_nulls()</span>
<span id="cb7-11">        DFViews(df)</span>
<span id="cb7-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb7-13">        st.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Make sure to upload a file"</span>)</span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dataclass</span></span>
<span id="cb7-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> FilterValues:</span>
<span id="cb7-17">    sodium: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]</span>
<span id="cb7-18">    carb: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]</span>
<span id="cb7-19"></span>
<span id="cb7-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> Filters(df: pl.DataFrame) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> FilterValues:</span>
<span id="cb7-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> st.form(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"df_filer"</span>):</span>
<span id="cb7-22">        st.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"**Filter DataFrame**"</span>)</span>
<span id="cb7-23">        carbs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Carb. (g)"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Carb. (g)"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>())</span>
<span id="cb7-24">        sodium <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sodium"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sodium"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>())</span>
<span id="cb7-25">        carbs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.slider(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Carb. (g)"</span>, min_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>carbs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], max_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>carbs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>carbs)</span>
<span id="cb7-26">        sodium <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.slider(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sodium"</span>, min_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sodium[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], max_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sodium[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sodium)</span>
<span id="cb7-27">        </span>
<span id="cb7-28">        st.form_submit_button(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Submit"</span>)</span>
<span id="cb7-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> FilterValues(sodium, carbs)</span>
<span id="cb7-30"></span>
<span id="cb7-31"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> FilteredPage(df: pl.DataFrame, filter_values: FilterValues):</span>
<span id="cb7-32">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sodium"</span>).is_between(filter_values.sodium[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], filter_values.sodium[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span></span>
<span id="cb7-33">                   pl.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Carb. (g)"</span>).is_between(filter_values.carb[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], filter_values.carb[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb7-34">    DFVis(df)</span>
<span id="cb7-35"></span>
<span id="cb7-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> DFVis(df: pl.DataFrame):</span>
<span id="cb7-37">    st.markdown(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"## DataFrame"</span>)</span>
<span id="cb7-38">    st.dataframe(df.to_pandas())</span>
<span id="cb7-39">    st.write(px.histogram(df, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Carb. (g)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sodium"</span>]))</span>
<span id="cb7-40"></span>
<span id="cb7-41"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> DFViews(df: pl.DataFrame):</span>
<span id="cb7-42">    filters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Filters(df)</span>
<span id="cb7-43">    c1, c2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.columns(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> c1:</span>
<span id="cb7-45">        DFVis(df)</span>
<span id="cb7-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> c2:</span>
<span id="cb7-47">        FilteredPage(df, filters)</span>
<span id="cb7-48"></span>
<span id="cb7-49">Page()</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>data</category>
  <category>dashboard</category>
  <category>webapp</category>
  <guid>https://blog.londogard.com/posts/2023-06-30-solara/</guid>
  <pubDate>Fri, 30 Jun 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Kotlin DataFrame vs Polars DataFrame</title>
  <dc:creator>Hampus Lond√∂g√•rd</dc:creator>
  <link>https://blog.londogard.com/posts/2023-05-06-kotlin-vs-polars-dataframe.html</link>
  <description><![CDATA[ 





<p><strong>N.B.</strong> added dataset and link to Datalore Notebooks.</p>
<p>Benchmarking is notourusly hard, hence I know these results are not fully show-casing possibilities of the JVM. Nontheless, they‚Äôre results.</p>
<section id="benchmark-details" class="level2">
<h2 class="anchored" data-anchor-id="benchmark-details">Benchmark Details</h2>
<ol type="1">
<li>Pre-downloaded CSV (dataset: <a href="https://github.com/plotly/datasets/raw/master/all_stocks_5yr.csv">Plotly All Stocks 5 Years</a>)</li>
<li>Use Eager-API as Kotlin DataFrame does not have a Lazy API (this would help <code>polars</code> further)</li>
<li>Run 10k times to make sure the JVM isn‚Äôt a slow starter (one should do this even better using <a href="https://github.com/openjdk/jmh">JMH</a> and their API to benchmark)</li>
</ol>
</section>
<section id="results" class="level2">
<h2 class="anchored" data-anchor-id="results">Results</h2>
<p>The results speak clearly.</p>
<div id="fig-dfs" class="quarto-layout-panel">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-dfs-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/assets/kotlin.png" class="img-fluid figure-img"></p>
<figcaption>Kotlin DataFrame (5.4s) <a href="https://datalore.jetbrains.com/notebook/IpONsMtuU4rzMXd6MwMYnh/PSh1Gzu1kUBrhIrl90nu14">Datalore Notebook</a></figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://blog.londogard.com/posts/assets/polars.png" class="img-fluid figure-img"></p>
<figcaption>polars DataFrame (2.6s) <a href="https://datalore.jetbrains.com/notebook/IpONsMtuU4rzMXd6MwMYnh/iKhywUCjfhXdmQWjwd6eT3">Datalore Notebook</a></figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-dfs-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: DataFrame Comparison of 10k runs on <a href="https://github.com/plotly/datasets/raw/master/all_stocks_5yr.csv">Plotly All Stocks 5 Years</a>.
</figcaption>
</figure>
</div>
<ol type="1">
<li><code>polars</code> is 2x faster (!).</li>
<li><code>polars</code> uses 1GB less RAM.</li>
<li><code>polars</code> actually downloaded the same CSV file 12x faster, and caches the result internally unlike Kotlin for later instant usage.</li>
</ol>
</section>
<section id="thoughts" class="level2">
<h2 class="anchored" data-anchor-id="thoughts">Thoughts</h2>
<p>I think it‚Äôs interesting to see how much faster <code>polars</code> is, even if I use eager API and don‚Äôt use any fancy feature(s) like <code>groupBy</code> that‚Äôs optimized like crazy.</p>
<p>It really showcases what a powerhouse Rust is to run intensive applications with, and now I‚Äôm left wondering if perhaps one should wrap <code>polars</code> on the JVM. ü§ì This has been done for other platforms, such as <a href="https://pola-rs.github.io/nodejs-polars/index.html">NodeJS</a>, <a href="https://rpolars.github.io/index.html">R</a> &amp; <a href="https://github.com/elixir-nx/explorer">Elixir</a>.</p>
<p>Wrapping Rust from the JVM isn‚Äôt easy today though, but with the new progress with <a href="https://developer.okta.com/blog/2022/04/08/state-of-ffi-java">Project Panama</a> it should be easier. Project Panama introduces a simpler, safer and more efficient way to call Native code from the JVM through the <em>Foreign Function &amp; Memory API</em>. I expect it to become even better as it‚Äôs currently only in preview‚Ä¶ üòâ</p>
<p>That‚Äôs all for now.<br>
~Hampus</p>


</section>

 ]]></description>
  <category>dataframe</category>
  <guid>https://blog.londogard.com/posts/2023-05-06-kotlin-vs-polars-dataframe.html</guid>
  <pubDate>Sat, 06 May 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
