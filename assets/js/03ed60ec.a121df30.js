"use strict";(self.webpackChunklondogard=self.webpackChunklondogard||[]).push([[5622],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=i,h=u["".concat(s,".").concat(c)]||u[c]||m[c]||o;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9727:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},assets:function(){return d},toc:function(){return m},default:function(){return c}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),r=["components"],l={slug:"kotlinjs-onnx-deep-learning-browser",title:"KotlinJS, ONNX and Deep Learning in the browser",description:"Ever wanted to deploy State-of-the-Art Deep Learning models in the browser? In this blog you'll learn about how to run inference through onnx webruntime directly inside the browser!",tags:["kotlin","web","deep-learning"],authors:"hlondogard"},s="KotlinJS, ONNX and Deep Learning in the browser",p={permalink:"/blog/kotlinjs-onnx-deep-learning-browser",editUrl:"https://github.com/londogard/londogard/blog/2022-01-28-kotlinjs-onnx-deep-learning-in-browser/index.mdx",source:"@site/blog/2022-01-28-kotlinjs-onnx-deep-learning-in-browser/index.mdx",title:"KotlinJS, ONNX and Deep Learning in the browser",description:"Ever wanted to deploy State-of-the-Art Deep Learning models in the browser? In this blog you'll learn about how to run inference through onnx webruntime directly inside the browser!",date:"2022-01-28T00:00:00.000Z",formattedDate:"January 28, 2022",tags:[{label:"kotlin",permalink:"/blog/tags/kotlin"},{label:"web",permalink:"/blog/tags/web"},{label:"deep-learning",permalink:"/blog/tags/deep-learning"}],readingTime:12.62,truncated:!0,authors:[{name:"Hampus Lond\xf6g\xe5rd",title:"Main Contributor of Londogard",url:"https://github.com/lundez",imageURL:"https://github.com/lundez.png",key:"hlondogard"}],frontMatter:{slug:"kotlinjs-onnx-deep-learning-browser",title:"KotlinJS, ONNX and Deep Learning in the browser",description:"Ever wanted to deploy State-of-the-Art Deep Learning models in the browser? In this blog you'll learn about how to run inference through onnx webruntime directly inside the browser!",tags:["kotlin","web","deep-learning"],authors:"hlondogard"},nextItem:{title:"Release nlp (londogard-nlp-toolkit) 1.1.0",permalink:"/blog/2022/01/16/nlp-toolkit-release"}},d={authorsImageUrls:[void 0]},m=[{value:"Quick Kotlin JS",id:"quick-kotlin-js",children:[],level:2},{value:"Quick ONNX",id:"quick-onnx",children:[],level:2},{value:"The Set Up",id:"the-set-up",children:[{value:"Introducing fritz2",id:"introducing-fritz2",children:[],level:3},{value:"ONNX typing in KotlinJS",id:"onnx-typing-in-kotlinjs",children:[],level:3}],level:2},{value:"The Implementation",id:"the-implementation",children:[{value:"Basic UI",id:"basic-ui",children:[],level:3},{value:"Binding ONNX and webruntime",id:"binding-onnx-and-webruntime",children:[],level:3},{value:"Solving the puzzle",id:"solving-the-puzzle",children:[],level:3}],level:2},{value:"Thoughts",id:"thoughts",children:[{value:"KotlinJS vs TypeScript",id:"kotlinjs-vs-typescript",children:[],level:3},{value:"ONNX in the web",id:"onnx-in-the-web",children:[],level:3},{value:"The Combination",id:"the-combination",children:[],level:3}],level:2}],u={toc:m};function c(e){var t=e.components,l=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"One day I had the crazy idea to try two non-mainstream things out at the same time. On top of that I figured I'd combine them in the same project, imagine that!"),(0,o.kt)("p",null,"Preview of final result running model inference in the browser using KotlinJS, ONNX & fritz2:\n",(0,o.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/7490199/151235880-2546faa6-5798-48b4-84b9-db71c20808d8.gif",alt:"model inference in browser gif"})),(0,o.kt)("h2",{id:"quick-kotlin-js"},"Quick Kotlin JS"),(0,o.kt)("p",null,"KotlinJS resembles TypeScript (TS) in the sense that it's typed and transpiles into JavaScript (JS) at the end of the day. The final JS code runs directly in the browser or through Node.js.  "),(0,o.kt)("p",null,"What makes KotlinJS stand out? In my optinion it picks up where TS leaves. By adding (almost) all of the Kotlin ecosystem we get a really superb toolbox out-of-the-box, which is more than simply types. Some of the awesome perks are coroutines and collections.",(0,o.kt)("br",{parentName:"p"}),"\n","As someone who has done a lot of backend development in Scala, with some Java, it feels like home because of the familiar apperance and interaction.",(0,o.kt)("br",{parentName:"p"}),"\n","Having sweet syntax, superb typing I feel a great preference toward KotlinJS even if TS is closer to JS making transpiled code easier to reason about."),(0,o.kt)("h2",{id:"quick-onnx"},"Quick ONNX"),(0,o.kt)("p",null,"::: info"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Open_Neural_Network_Exchange"},"Open Neural Network Exchange")," (ONNX) Runtime is a open format created by Facebook, Microsoft & others, and is part of ",(0,o.kt)("em",{parentName:"p"},"Linux Foundation AI"),".\n:::")),(0,o.kt)("p",null,"ONNX is an open polyglot format, meaning that you can run Neural Networks from multiple coding languages. This in turn promotes innovation and collaboration, especially through the fact that you can run your State-of-the-Art model almost everywhere, including C# and Java.",(0,o.kt)("br",{parentName:"p"}),"\n","ONNX is a impressive feat that allows companies to reduce their inference time by magnitudes, cherry on top it reduces code complexity when models are deployed directly in the original backend."),(0,o.kt)("p",null,"Recently ONNX added a new runtime, ",(0,o.kt)("strong",{parentName:"p"},"ONNX-webruntime"),", which enables ONNX models to run directly inside the browser. Simply take your PyTorch/Tensorflow model, convert to ONNX and then run! Incredible! \ud83c\udf89.",(0,o.kt)("br",{parentName:"p"}),"\n","ONNX-webruntime leverages ",(0,o.kt)("strong",{parentName:"p"},"WebGL")," as GPU and ",(0,o.kt)("strong",{parentName:"p"},"WASM with SIMD")," as CPU.",(0,o.kt)("br",{parentName:"p"}),"\n","Simple edge deployment is here!"),(0,o.kt)("h2",{id:"the-set-up"},"The Set Up"),(0,o.kt)("p",null,"The set up is simple,"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Kotlin JS project"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fritz2")," as web framework"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onnx-webruntime")," as deep learning inference tool")),(0,o.kt)("p",null,"For this demo I could've used raw html elements in the Kotlin JS code, but it's more fun to use something enjoyable, as such I chose ",(0,o.kt)("inlineCode",{parentName:"p"},"fritz2")," that I introduce below \ud83d\udc47."),(0,o.kt)("h3",{id:"introducing-fritz2"},"Introducing fritz2"),(0,o.kt)("p",null,"Introducing ",(0,o.kt)("a",{parentName:"p",href:"https://www.fritz2.dev/"},(0,o.kt)("strong",{parentName:"a"},"fritz2")),", a small but impressive framework.",(0,o.kt)("br",{parentName:"p"}),"\n","Because of the size you can understand the full idea and implementation, which is something you cannot say about React. Through simple DSLs, superb usage of ",(0,o.kt)("inlineCode",{parentName:"p"},"Flow<T>")," you end up with a simple yet powerful model that maps perfectly to my own mind.",(0,o.kt)("br",{parentName:"p"}),"\n","In my opinion ",(0,o.kt)("strong",{parentName:"p"},"fritz2 feels less magic")," while very powerful and simple. Everything works with full typing and no hacks. Cherry on the top? No virtual dom!"),(0,o.kt)("p",null,"Fritz2 has a extra ",(0,o.kt)("a",{parentName:"p",href:"https://components.fritz2.dev/"},"components library")," which you can additionally install. This library contains simple components to make your development much faster, with things like File input, Data Tables and much more!"),(0,o.kt)("p",null,"Personally I even did my own wedding website using ",(0,o.kt)("inlineCode",{parentName:"p"},"fritz2"),", and it ended up pretty great!\n",(0,o.kt)("img",{alt:"fritz2 gui",src:n(7747).Z,width:"955",height:"884"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"My personal wedding site created in fritz2")),(0,o.kt)("h3",{id:"onnx-typing-in-kotlinjs"},"ONNX typing in KotlinJS"),(0,o.kt)("p",null,"Using ",(0,o.kt)("inlineCode",{parentName:"p"},"dukat")," (included by default in Kotlin > 1.6 or perhaps earlier) it's possible to generate external types/bindings for any TypeScript project.",(0,o.kt)("br",{parentName:"p"}),"\n","Guess what, ONNXRuntime Web is full TypeScript - awesome!"),(0,o.kt)("p",null,"Unfortunately ONNX has some really weird structure which I'd call non-standard, this ends up not working great in ",(0,o.kt)("inlineCode",{parentName:"p"},"dukat"),"-generation...",(0,o.kt)("br",{parentName:"p"}),"\n","Luckily enough it is ",(0,o.kt)("strong",{parentName:"p"},"easy to make your own bindings"),". Keep your breath for now, I'll share them later in this post, but for now let's say that it's like a .d.ts-file."),(0,o.kt)("h2",{id:"the-implementation"},"The Implementation"),(0,o.kt)("p",null,"We need to create our project, I usually do it by scratch but if you want to keep it easy setting up the MPP project for ",(0,o.kt)("inlineCode",{parentName:"p"},"friz2")," you can make sure to use their ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jwstegemann/fritz2-template"},"template project"),". Make sure to include the fritz2 component library, as it'll be used in the implementation.",(0,o.kt)("br",{parentName:"p"}),"\n","Please note that the focus will be ONNX, as such I'll save some ",(0,o.kt)("inlineCode",{parentName:"p"},"fritz2")," details for another post."),(0,o.kt)("h3",{id:"basic-ui"},"Basic UI"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Getting the skeleton UI up"),(0,o.kt)("br",{parentName:"p"}),"\n",'In the "main" file of the js-folder, but not as in js-code \ud83d\ude09, you\'ll need to set up a file and image element.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun main() {\n    val imgSrc = RootStore("")\n    render {\n        val srcImg = img(id = "img-from") {\n            src(imgSrc.data)\n        }\n    }\n    \n    file {\n        accept("image/*")\n        button { text("Single select") }\n    }\n    .map { file -> "data:${file.type};base64,${file.content}" } handledBy imgSrc.update\n}\n')),(0,o.kt)("p",null,"Breaking down what's done"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"A ",(0,o.kt)("inlineCode",{parentName:"li"},"RootStore")," is a abstraction on top of a ",(0,o.kt)("inlineCode",{parentName:"li"},"(Mutable)StateFlow"),"  which is a ",(0,o.kt)("inlineCode",{parentName:"li"},"Flow")," with a state.  ",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"In simple terms a ",(0,o.kt)("inlineCode",{parentName:"li"},"Flow"),"  is a ",(0,o.kt)("strong",{parentName:"li"},"collection of asynchronously computed values")," just like you have ",(0,o.kt)("inlineCode",{parentName:"li"},"Sequence")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"List")," being collections of synchronously computed values."))),(0,o.kt)("li",{parentName:"ol"},"A ",(0,o.kt)("inlineCode",{parentName:"li"},"Store")," is a reactive component that contains our apps state, it can do bidirectional communication with the DOM/GUI.",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"We update ",(0,o.kt)("inlineCode",{parentName:"li"},"imgSrc")," through the ",(0,o.kt)("inlineCode",{parentName:"li"},"file"),"-component, whenever ",(0,o.kt)("inlineCode",{parentName:"li"},"file")," is updated.  "),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"<img>")," listens on changes from ",(0,o.kt)("inlineCode",{parentName:"li"},"imgSrc"),", hence it's updated as ",(0,o.kt)("inlineCode",{parentName:"li"},"imgSrc")," is updated"),(0,o.kt)("li",{parentName:"ol"},"All in all we get ",(0,o.kt)("strong",{parentName:"li"},"typed")," and ",(0,o.kt)("strong",{parentName:"li"},"no-magic")," dynamical updates in our GUI. This is something I love, compared to ",(0,o.kt)("inlineCode",{parentName:"li"},"react")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"svelte")," where it seems more magical.")))),(0,o.kt)("p",null,"The connector between ",(0,o.kt)("inlineCode",{parentName:"p"},"file")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"imgSrc")," is dirty, I hoped to be able to load the ",(0,o.kt)("inlineCode",{parentName:"p"},"b64")," content directly into a ",(0,o.kt)("inlineCode",{parentName:"p"},"UInt8ClampedArray")," to have optimal performance, but because the ",(0,o.kt)("inlineCode",{parentName:"p"},"b64"),"-string actually contains PNG/JPEG headers and other things the perfomance gains versus simplicity is not worth it. Hence I transform it from the ",(0,o.kt)("inlineCode",{parentName:"p"},"b64"),"-string (",(0,o.kt)("inlineCode",{parentName:"p"},"data:image/pdf;base64,<content>"),") to image and then extract ",(0,o.kt)("inlineCode",{parentName:"p"},"ImageData")," - annoying but clean.",(0,o.kt)("br",{parentName:"p"}),"\n","The detail that ",(0,o.kt)("inlineCode",{parentName:"p"},"<content>")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"b64"),"-string is only the pixel data haunted me for a long time... I couldn't figure why my arrays had the wrong dimensions! \ud83d\ude05"),(0,o.kt)("p",null,"The next step: transfer image from this component to another, while allowing a transformation (neural network inference) in-between."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'// highlight-start\nfun loadImgToCanvas(img: Image, canvas: Canvas, context: CanvasRenderingContext2D) {\n    if (img.domNode.src.isNotEmpty()) {\n        canvas.width = img.domNode.naturalWidth\n        canvas.height = img.domNode.naturalHeight\n        context.drawImage(img, 0.0, 0.0)\n    }\n}\n// highlight-end\n\nfun main() {  \n    val imgSrc = RootStore("")  \n  \n    render {\n        val srcImg = img(id = "img-from") {\n            src(imgSrc.data)\n        }\n        val targetCanvas = canvas(id = "img-to") { }\n        val imgContext = targetCanvas.domNode.getContext("2d") as CanvasRenderingContext2D\n    \n        file { /** same as before ... */ \n        \n        // highlight-next-line\n        srcImg.domNode.onload { loadImgToCanvas(srcImg, targetCanvas, imgContext) }\n    }\n}\n')),(0,o.kt)("p",null,"Whenever ",(0,o.kt)("inlineCode",{parentName:"p"},"srcImg.onload")," event happens we call ",(0,o.kt)("inlineCode",{parentName:"p"},"loadImgToCanvas")," which loads ",(0,o.kt)("inlineCode",{parentName:"p"},"img")," on our canvas.",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("strong",{parentName:"p"},"Why did I choose to not have a new ",(0,o.kt)("inlineCode",{parentName:"strong"},"<img>"),"?")," Because we later need to use ",(0,o.kt)("inlineCode",{parentName:"p"},"ImageData")," and this is the way to have the minimum number of data transitions, trust me \ud83d\ude09."),(0,o.kt)("p",null,"Let's start adding bindings for ONNX!"),(0,o.kt)("h3",{id:"binding-onnx-and-webruntime"},"Binding ONNX and webruntime"),(0,o.kt)("p",null,"Binding TS/JS is as simple as a ",(0,o.kt)("inlineCode",{parentName:"p"},".d.ts"),"-file in TS. You define the component to bind, declare the types, e.g. function name, input and outout. Simple as that!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@file:JsModule("onnxruntime-web")   // npm-package\n@file:JsNonModule\n  \nimport kotlin.js.Promise  \n  \nexternal abstract class InferenceSession {  \n    fun run(feeds: FeedsType): Promise<ReturnType> // FeedsType / ReturnType separately defined the same way as InferenceSession & run.\n}\n')),(0,o.kt)("p",null,"Moving further we'll add a method to extract ",(0,o.kt)("inlineCode",{parentName:"p"},"ImageData"),"'s ",(0,o.kt)("inlineCode",{parentName:"p"},"UInt8ClampedArray")," from a ",(0,o.kt)("inlineCode",{parentName:"p"},"img"),"-element using a ",(0,o.kt)("inlineCode",{parentName:"p"},"canvas"),"-element with its ",(0,o.kt)("inlineCode",{parentName:"p"},"CanvasRenderingContext2D")," (lots of JS/web words, the most I'll have in a sentence, peeew! \ud83d\ude05)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun imgToUInt8ClampedArray(img: HTMLImageElement, ctx: CanvasRenderingContext2D): Uint8ClampedArray {\n    val canvas = ctx.canvas\n    canvas.width = img.naturalWidth\n    canvas.height = img.naturalHeight\n    ctx.drawImage(img, 0.0, 0.0)\n\n    return ctx.getImageData(0.0, 0.0, img.naturalWidth.toDouble(), img.naturalHeight.toDouble()).data // extract data from ImageData\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"UInt8ClampedArray")," has to be transformed into a ",(0,o.kt)("inlineCode",{parentName:"p"},"Float32Array")," that the model expects.",(0,o.kt)("br",{parentName:"p"}),"\n","Sounds easy? Think again!",(0,o.kt)("br",{parentName:"p"}),"\n",'Because JS is not a data science language it\'s not surprising that the data is "incorrectly" ordered. The model expects the data to be formed as ',(0,o.kt)("inlineCode",{parentName:"p"},"[3,width,height]")," where 3 is the number of dimensions, in our case RGB, but in JS it's the reverse way. On top of the wrong ordering JS has a fourth dimension, namely transparency. Following all that knowledge we can transform the array."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun uInt8ClampedToFloat32Array(data: Uint8ClampedArray): Float32Array {\n    val floats = Float32Array(data.length / 4 * 3)\n    val rgb =listOf(0, data.length / 4, data.length / 4 * 2)\n\n    for (i in 0untildata.lengthstep4) {\n        floats[rgb[0] + i / 4] = data[i + 0] / 255f\n        floats[rgb[1] + i / 4] = data[i + 1] / 255f\n        floats[rgb[2] + i / 4] = data[i + 2] / 255f // Skip i+3 as that's ALPHA\n}\n\n    return floats\n}\n")),(0,o.kt)("p",null,"As ONNX expects ",(0,o.kt)("inlineCode",{parentName:"p"},"Tensor")," we need to transform the ",(0,o.kt)("inlineCode",{parentName:"p"},"Float32Array")," into a ",(0,o.kt)("inlineCode",{parentName:"p"},"Tensor")," and then into ",(0,o.kt)("inlineCode",{parentName:"p"},"FeedsInput")," which is a ",(0,o.kt)("inlineCode",{parentName:"p"},"Object")," of the data, luckily that's very easy after our binding is done."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun tensorToInput(tensor: Tensor, inputName: String = "input"): FeedsType {\n    val input: dynamic = object {} // To hack JS Objects\n    input[inputName] = tensor\n\n    return input.unsafeCast<FeedsType>()\n}\n\nval tensor = Tensor("float32", floats, arrayOf(1, 3, srcImg.domNode.naturalWidth, srcImg.domNode.naturalHeight))\nval input = tensorToInput(tensor)\n')),(0,o.kt)("p",null,"...and it's time to run the model! \ud83e\udd73"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val ir = InferenceSession.create("./dce2.onnx").await()\nval out = ir.run(input).await()\n\nval outTensor = out["output"] as Tensor\nval outData = outTensor.data as Float32Array\n')),(0,o.kt)("p",null,"The output then needs to have the reverse transform applied to be viewable in the browser. That is, reverse axis, add fourth dimension and cast into ",(0,o.kt)("inlineCode",{parentName:"p"},"int"),".  "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"// Calling on the output data, before converting to UInt8Clamped..\nfor (i in 0untiloutData.length) {\n    outData[i] = min(outData[i], 1f) * 255f // `min` to not go above 255\n}\n\nfun float32ToUInt8Clamped(data: Float32Array): Uint8ClampedArray {\n    val rgb =arrayOf(0, data.length / 3, data.length / 3 * 2)\n    val intOut = Uint8ClampedArray(data.length / 3 * 4)\n\n    for (i in 0untilintOut.length / 4) {\n        intOut.asDynamic()[i * 4 + 0] = data[rgb[0] + i].toInt()\n        intOut.asDynamic()[i * 4 + 1] = data[rgb[1] + i].toInt()\n        intOut.asDynamic()[i * 4 + 2] = data[rgb[2] + i].toInt()\n        intOut.asDynamic()[i * 4 + 3] = 255 }\n    \n    return intOut\n}\n")),(0,o.kt)("p",null,"As you might notice we cast a lot ",(0,o.kt)("inlineCode",{parentName:"p"},"asDynamic()"),", this is because of a current bug in Kotlin JS where it sends signed ",(0,o.kt)("inlineCode",{parentName:"p"},"Byte")," when it should be an unsigned ",(0,o.kt)("inlineCode",{parentName:"p"},"Byte"),".",(0,o.kt)("br",{parentName:"p"}),"\n","See the current issue at ",(0,o.kt)("a",{parentName:"p",href:"https://youtrack.jetbrains.com/issue/KT-24583"},"youtrack.jetbrains.com"),"."),(0,o.kt)("p",null,"We ",(0,o.kt)("strong",{parentName:"p"},"finally got all the pieces"),", how about gluing it all together? \ud83d\ude04"),(0,o.kt)("h3",{id:"solving-the-puzzle"},"Solving the puzzle"),(0,o.kt)("p",null,"The model I wish to use has a dynamic input/output size, e.g. the image dimensions, I need to recreate the session or else it will throw as ONNX expects the last used shape on new runs. This is not true as images are of different sizes.",(0,o.kt)("br",{parentName:"p"}),"\n","One solution would be to preprocess the image to always be the same size, but I prefer to return the image in the original dimensions for this use-case."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"View code!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun imgToUInt8ClampedArray(img: HTMLImageElement, ctx: CanvasRenderingContext2D): Uint8ClampedArray {  \n    /** same code as previously */\n}  \n  \nfun float32ToUInt8Clamped(data: Float32Array): Uint8ClampedArray {  \n    /** same code as previously */\n}  \n  \nfun tensorToInput(tensor: Tensor, inputName: String = "input"): FeedsType {  \n    /** same code as previously */  \n}  \n  \nfun uInt8ClampedToFloat32Array(data: Uint8ClampedArray): Float32Array {  \n    /** same code as previously */\n}  \n  \n@OptIn(ExperimentalTime::class, ExperimentalCoroutinesApi::class)  \nsuspend fun main() {  \n    val flow = RootStore("")  \n    val isLoaded = RootStore("")  \n    val webgl: dynamic = object {}  \n    webgl["executionProviders"] = arrayOf("webgl")  // want that WebGL GPU power\n  \n    render {  \n         val srcImg = img(id = "img-from") {  \n            src(flow.data)  \n            domNode.onload = { isLoaded.update(domNode.src) }  \n         }\n        val targetCanvas = canvas(id = "img-to") {}  \n        val imgContext = targetCanvas.domNode.getContext("2d") as CanvasRenderingContext2D  \n \n        isLoaded.data  \n        .distinctUntilChanged()  \n        .filter { b64 -> b64.isNotEmpty() }\n        .map {  \n            val ir = runCatching { InferenceSession.create("./dce2.onnx", webgl).await() }  \n                .onFailure { showAlertToast { alert { title("Could not load WebGL, using WASM.") } } }  \n                .getOrDefault(InferenceSession.create("./dce2.onnx").await())  \n            val intData = imgToUInt8ClampedArray(srcImg.domNode, imgContext)  \n            val floats = uInt8ClampedToFloat32Array(intData)  \n\n            val tensor = Tensor("float32", floats, arrayOf(1, 3, srcImg.domNode.naturalWidth, srcImg.domNode.naturalHeight))  \n            val input = tensorToInput(tensor)  \n        \n            val out = ir.run(input).await()  \n            val outTensor = out["output"] as Tensor  \nval outData = outTensor.data as Float32Array  \n\n            for (i in 0 until outData.length) {  \n                outData[i] = min(outData[i], 1f) * 255f  \n            }  \n            val intOut = float32ToUInt8Clamped(outData)  \n\n            ImageData(intOut, srcImg.domNode.naturalWidth, srcImg.domNode.naturalHeight)  \n        } handledBy { imageData -> imgContext.putImageData(imageData, 0.0, 0.0) }\n  \n    file {  \n        accept("image/*")  \n        button { text("Single select") }  \n     }.map { file -> "data:${file.type};base64,${file.content}" } handledBy flow.update  \n    }  \n}\n'))),(0,o.kt)("p",null,"With the joining bindings for ONNX."),(0,o.kt)("h2",{id:"thoughts"},"Thoughts"),(0,o.kt)("p",null,"Wrapping it all together I feel like I want to leave with the sentiment that KotlinJS is a player, ONNX Webruntime certainly is capable and I'll continue creating small MVP:s and demos using this setup! "),(0,o.kt)("h3",{id:"kotlinjs-vs-typescript"},"KotlinJS vs TypeScript"),(0,o.kt)("p",null,"Regarding KotlinJS I believe it's still behind TypeScript in terms of compatibility. I need to do more plumbing than someone using TS would, especially as ",(0,o.kt)("inlineCode",{parentName:"p"},"dukat")," don't solve all my problems magically. Luckily it's very easy to make those bindings!"),(0,o.kt)("p",null,"In terms of how usable it is I find it much better than TypeScript, the experience when working with KotlinJS-code (e.g. interfacing std-lib, pure kotlin code or bindings) is so much better than TypeScript - it's just like when I write my good ol' JVM applications. I'm not sure if I'm missing something, but TypeScript's typesystem always felt a bit choppy, just like Pythons. Sometimes I don't get the intellisense I'm expecting."),(0,o.kt)("h3",{id:"onnx-in-the-web"},"ONNX in the web"),(0,o.kt)("p",null,"The performance when using WebGL is definitely better than I expected, but not as good as using the usual runtime. Something I did notice during my testing is that ",(0,o.kt)("strong",{parentName:"p"},"it scales badly with size"),", using a high-res image (3000x4000) ends up slowing my whole computer. I know I'm not really working on a separate thread or anything, but it's too bad it doesn't scale well. Further there's an internal max-limit somewhere around the same dimensions, which I hit once with another image."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Personally, including these issues, I'm left impressed ",(0,o.kt)("strong",{parentName:"p"},"about how easy it is to set up a completely custom model"),' to run inside the browser ("on the edge"), where we ',(0,o.kt)("strong",{parentName:"p"},"don't have to care about architecture, OS or anything")," and that it works efficiently enough to use. ")),(0,o.kt)("p",null,"I can see this as a key tool to start-ups and larger companies to reduce costs & inference-time (as computation happens on the edge). On top of the $'s I see a win for privacy as the data will never leave the users device, which in turn simplifies GDPR compliance and much more!"),(0,o.kt)("p",null,"Even moving inference to the edge through a common simple interface that is the browser we'll still have plenty of need for servers, not only serving larger models for complex problems, old devices and batch inference of larger amounts of data."),(0,o.kt)("p",null,"The future is indeed still moving fast for Deep Learning and I can't wait to see where we're moving!",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("strong",{parentName:"p"},"My own prediction:")," Deep Learning will simply ignore ",(0,o.kt)("em",{parentName:"p"},"serverless")," computing and jump straight to ",(0,o.kt)("em",{parentName:"p"},"edge computing")," in an effort to reduce costs."),(0,o.kt)("h3",{id:"the-combination"},"The Combination"),(0,o.kt)("p",null,"Combining ONNX & KotlinJS (perhaps testing Compose rather than fritz2) is something I'm gonna keep on doing in the future to deploy demos. Either deploying through Github Pages or my own Raspberry Pi this will be piece a cake as my devices don't have to do the inference, keeping my costs down for fun demos."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Demo:")," A live demo can be found ",(0,o.kt)("a",{parentName:"p",href:"https://photo-fritz2.pages.dev/"},"here"),"."),(0,o.kt)("p",null,"And the code can be found on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/londogard/photo-fritz2"},"github.com/londogard/photo-fritz2"),", but be careful - it's not that beautiful right now \ud83d\ude30"),(0,o.kt)("p",null,"That's it for now.. \ud83e\udd73",(0,o.kt)("br",{parentName:"p"}),"\n","~Hampus Lond\xf6g\xe5rd"))}c.isMDXComponent=!0},7747:function(e,t,n){t.Z=n.p+"assets/images/wedding_fritz2-f9d5c8604e9bc209c363765541d424f7.png"}}]);