"use strict";(self.webpackChunklondogard=self.webpackChunklondogard||[]).push([[5269],{3905:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),p=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),g=p(a),d=r,u=g["".concat(c,".").concat(d)]||g[d]||m[d]||l;return a?n.createElement(u,i(i({ref:t},s),{},{components:a})):n.createElement(u,i({ref:t},s))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=g;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},3117:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return p},assets:function(){return s},toc:function(){return m},default:function(){return d}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=["components"],o={description:"A simple quick comparison on which method to use and in what case when replacing characters or strings in strings.",tags:["jvm"],title:"When to use what - RegExp, String Replace & Character Replace (JVM/Kotlin)",authors:"hlondogard"},c="When to use what - RegExp, String Replace & Character Replace",p={permalink:"/blog/2021/03/17/replace-in-string",editUrl:"https://github.com/londogard/londogard/blog/2021-03-17-replace-in-string.md",source:"@site/blog/2021-03-17-replace-in-string.md",title:"When to use what - RegExp, String Replace & Character Replace (JVM/Kotlin)",description:"A simple quick comparison on which method to use and in what case when replacing characters or strings in strings.",date:"2021-03-17T00:00:00.000Z",formattedDate:"March 17, 2021",tags:[{label:"jvm",permalink:"/blog/tags/jvm"}],readingTime:4.065,truncated:!0,authors:[{name:"Hampus Lond\xf6g\xe5rd",title:"Main Contributor of Londogard",url:"https://github.com/lundez",imageURL:"https://github.com/lundez.png",key:"hlondogard"}],frontMatter:{description:"A simple quick comparison on which method to use and in what case when replacing characters or strings in strings.",tags:["jvm"],title:"When to use what - RegExp, String Replace & Character Replace (JVM/Kotlin)",authors:"hlondogard"},prevItem:{title:"Building a Swedish Named Entity Recognition (NER) model (Flair/Huggingface)",permalink:"/blog/2021/03/29/swedish-named-entity-recognition"},nextItem:{title:"Transformers From Scratch",permalink:"/blog/2021/02/18/transformers-explained"}},s={authorsImageUrls:[void 0]},m=[{value:"What",id:"what",children:[],level:3},{value:"Why",id:"why",children:[{value:"The use-case",id:"the-use-case",children:[],level:4},{value:"When to use what?",id:"when-to-use-what",children:[],level:4}],level:3},{value:"Extra",id:"extra",children:[{value:"RegExp",id:"regexp",children:[],level:4},{value:"Python specific",id:"python-specific",children:[],level:4}],level:3},{value:"Appendix A. The Code",id:"appendix-a-the-code",children:[],level:2}],g={toc:m};function d(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Sometimes it's hard to know what to use, and why to use it even. "),(0,l.kt)("h3",{id:"what"},"What"),(0,l.kt)("p",null,"In most, or dare I say all, popular programming languages there exists a multitude of string replacements methods, most common is to have one String-based and one RegExp-based. In some languages such as Java there's also a special method to replace Characters in a String."),(0,l.kt)("h3",{id:"why"},"Why"),(0,l.kt)("p",null,"Performance sometimes matter, sometimes it doesn't. But if it does it's really good knowing which method to use as the speed-up can be substantial!"),(0,l.kt)("h4",{id:"the-use-case"},"The use-case"),(0,l.kt)("p",null,'Replace "a", "b" & "c" to "d". It\'s simple, but good.\nAs for data I\'m using a few of shakespeares works which in total is 4.5 million characters, I\'ve also added variants of these as shown in the table.'),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Length (characters)"),(0,l.kt)("th",{parentName:"tr",align:null},"Iterations"),(0,l.kt)("th",{parentName:"tr",align:null},"Average (msg)"),(0,l.kt)("th",{parentName:"tr",align:null},"Normalized to RegExp"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"RegExp"),(0,l.kt)("td",{parentName:"tr",align:null},"1k"),(0,l.kt)("td",{parentName:"tr",align:null},"1 million"),(0,l.kt)("td",{parentName:"tr",align:null},"0.0049ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1x")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Char"),(0,l.kt)("td",{parentName:"tr",align:null},"1k"),(0,l.kt)("td",{parentName:"tr",align:null},"1 million"),(0,l.kt)("td",{parentName:"tr",align:null},"0.0027ms"),(0,l.kt)("td",{parentName:"tr",align:null},"0.55x")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"1k"),(0,l.kt)("td",{parentName:"tr",align:null},"1 million"),(0,l.kt)("td",{parentName:"tr",align:null},"0.0087ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1.63x")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"---"),(0,l.kt)("td",{parentName:"tr",align:null},"---"),(0,l.kt)("td",{parentName:"tr",align:null},"---"),(0,l.kt)("td",{parentName:"tr",align:null},"---"),(0,l.kt)("td",{parentName:"tr",align:null},"---")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"RegExp"),(0,l.kt)("td",{parentName:"tr",align:null},"4.5 million"),(0,l.kt)("td",{parentName:"tr",align:null},"1k"),(0,l.kt)("td",{parentName:"tr",align:null},"29.67ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1x")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Char"),(0,l.kt)("td",{parentName:"tr",align:null},"4.5 million"),(0,l.kt)("td",{parentName:"tr",align:null},"1k"),(0,l.kt)("td",{parentName:"tr",align:null},"11.84"),(0,l.kt)("td",{parentName:"tr",align:null},"0.39x")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"4.5 million"),(0,l.kt)("td",{parentName:"tr",align:null},"1k"),(0,l.kt)("td",{parentName:"tr",align:null},"57.20"),(0,l.kt)("td",{parentName:"tr",align:null},"1.92x")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"---"),(0,l.kt)("td",{parentName:"tr",align:null},"---"),(0,l.kt)("td",{parentName:"tr",align:null},"---"),(0,l.kt)("td",{parentName:"tr",align:null},"---"),(0,l.kt)("td",{parentName:"tr",align:null},"---")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"RegExp"),(0,l.kt)("td",{parentName:"tr",align:null},"45 million"),(0,l.kt)("td",{parentName:"tr",align:null},"10"),(0,l.kt)("td",{parentName:"tr",align:null},"361.8ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1x")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Char"),(0,l.kt)("td",{parentName:"tr",align:null},"45 million"),(0,l.kt)("td",{parentName:"tr",align:null},"10"),(0,l.kt)("td",{parentName:"tr",align:null},"117.0ms"),(0,l.kt)("td",{parentName:"tr",align:null},"0.32x")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"45 million"),(0,l.kt)("td",{parentName:"tr",align:null},"10"),(0,l.kt)("td",{parentName:"tr",align:null},"588.1ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1.54x")))),(0,l.kt)("p",null,"As shown the Character-based replace is ",(0,l.kt)("em",{parentName:"p"},"much")," faster! It's only getting faster in comparison to the RegExp the bigger the file is."),(0,l.kt)("p",null,"I think a interesting test would be to do character swaps, using these methods and see if it's retained."),(0,l.kt)("h4",{id:"when-to-use-what"},"When to use what?"),(0,l.kt)("p",null,"I'd say that I see a few clear results."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Use ",(0,l.kt)("em",{parentName:"li"},"Character Based Replace")," if you only need to replace characters. It's ",(0,l.kt)("strong",{parentName:"li"},"much")," faster!"),(0,l.kt)("li",{parentName:"ol"},"Use ",(0,l.kt)("em",{parentName:"li"},"String Based Replace")," if you only swap one string to another (it's faster than RegExp), doing multiple swaps grows fast in time consumed. "),(0,l.kt)("li",{parentName:"ol"},"Use ",(0,l.kt)("em",{parentName:"li"},"RegExp Based Replace")," if you want to swap multiple strings"),(0,l.kt)("li",{parentName:"ol"},"Use ",(0,l.kt)("em",{parentName:"li"},"RegExp Based Replace")," if you wanna do anything complex really! It's pretty performant if you remember to compile the pattern :)")),(0,l.kt)("h3",{id:"extra"},"Extra"),(0,l.kt)("p",null,"Some extra comments that are good to know in cases as these"),(0,l.kt)("h4",{id:"regexp"},"RegExp"),(0,l.kt)("p",null,"I've said this before but...\nPlease remember to compile your patterns once, and not in each loop. Compiling patterns is incredibly expensive!\nRunning ",(0,l.kt)("inlineCode",{parentName:"p"},"(1..1_000_000).forEach { str.find(regexStr) }")," is a multitude slower than "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"// pseudo-code\nval regexCompiled = regexStr.toRegex()\n(1..1_000_000).forEach { regexCompiled.find(str) }\n")),(0,l.kt)("p",null,"because in the first example pattern is compiled each time..."),(0,l.kt)("h4",{id:"python-specific"},"Python specific"),(0,l.kt)("p",null,"Note that in Python as an example there exists C-implementations for some methods, it's ",(0,l.kt)("strong",{parentName:"p"},"very")," important to actually use these if you care about performance.\nAs an example ",(0,l.kt)("inlineCode",{parentName:"p"},"str.find(keyword)")," is a multitude slower than ",(0,l.kt)("inlineCode",{parentName:"p"},"keyword in str"),", because the ",(0,l.kt)("inlineCode",{parentName:"p"},"in")," keyword is actually a C-implementation when ",(0,l.kt)("inlineCode",{parentName:"p"},"str.find")," is a python one."),(0,l.kt)("h2",{id:"appendix-a-the-code"},"Appendix A. The Code"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://gist.github.com/Lundez/ee6484422cc2fe5545fffa7eaa2635cc"},"GitHub gist")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'import java.io.File\nimport kotlin.system.measureTimeMillis\n\nobject RegexTester {\n    val text = File("/home/londet/git/text-gen-kt/files/shakespeare.txt").readText()\n    val textSmall = text.take(1000)\n    val textLarge = text.repeat(10)\n\n    val regex = "[abc]".toRegex()\n    val charReplace = listOf(\'a\', \'b\', \'c\')\n    val stringReplace = listOf("a", "b", "c")\n\n    @JvmStatic\n    fun main(args: Array<String>) {\n        println("Warming up JVM by running 10,000 iterations of each replacer on normal size.")\n        (1..10_000)\n            .forEach { regex.replace(text, "d") }\n        (1..10_000)\n            .forEach { charReplace.fold(text) { acc, ch -> acc.replace(ch, \'d\') } }\n        (1..10_000)\n            .forEach { stringReplace.fold(text) { acc, ch -> acc.replace(ch, "d") } }\n        println("Warmup done!")\n\n\n        val regexSmall = measureTimeMillis { (1..1_000_000).forEach { regex.replace(textSmall, "d") } } / 1_000_000.0\n        val regexNormal = measureTimeMillis { (1..1_000).forEach { regex.replace(text, "d") } } / 1000.0\n        val regexLarge = measureTimeMillis { (1..10).forEach { regex.replace(textLarge, "d") } } / 10.0\n        // val regexLargeCompile = measureTimeMillis { (1..10).forEach { textLarge.replace("[abc]", "d") } } / 10.0\n        println("Regex Small (1000 characters, 1,000,000 avg): $regexSmall")\n        println("Regex Normal (4.5 million characters, 1000 avg): $regexNormal")\n        println("Regex Large (45 million characters, 10 avg): $regexLarge")\n\n\n        val charSmall = measureTimeMillis { (1..1_000_000).forEach { charReplace.fold(textSmall) { acc, ch -> acc.replace(ch, \'d\') } } } / 1_000_000.0\n        val charNormal = measureTimeMillis { (1..1_000).forEach { charReplace.fold(text) { acc, ch -> acc.replace(ch, \'d\') } } } / 1000.0\n        val charLarge = measureTimeMillis { (1..10).forEach { charReplace.fold(textLarge) { acc, ch -> acc.replace(ch, \'d\') } } } / 10.0\n        println("CharReplace Small (1000 characters, 1,000,000 avg): $charSmall")\n        println("CharReplace Normal (4.5 million characters, 1000 avg): $charNormal")\n        println("CharReplace Large (45 million characters, 10 avg): $charLarge")\n\n        val stringSmall = measureTimeMillis { (1..1_000_000).forEach { stringReplace.fold(textSmall) { acc, ch -> acc.replace(ch, "d") } } } / 1_000_000.0\n        val stringNormal = measureTimeMillis { (1..1_000).forEach { stringReplace.fold(text) { acc, ch -> acc.replace(ch, "d") } } } / 1000.0\n        val stringLarge = measureTimeMillis { (1..10).forEach { stringReplace.fold(textLarge) { acc, ch -> acc.replace(ch, "d") } } } / 10.0\n        println("StringReplace Small (1000 characters, 1,000,000 avg): $stringSmall")\n        println("StringReplace Normal (4.5 million characters, 1000 avg): $stringNormal")\n        println("StringReplace Large (45 million characters, 10 avg): $stringLarge")\n        \n        /**\n        Regex Small (1000 characters, 1,000,00 avg): 0.004949\n        Regex Normal (4.5 million characters, 1000 avg): 29.671\n        Regex Large (45 million characters, 10 avg): 361.8\n        CharReplace Small (1000 characters, 1,000,00 avg): 0.002752\n        CharReplace Normal (4.5 million characters, 1000 avg): 11.835\n        CharReplace Large (45 million characters, 10 avg): 117.0\n        StringReplace Small (1000 characters, 1,000,00 avg): 0.008692\n        StringReplace Normal (4.5 million characters, 1000 avg): 57.204\n        StringReplace Large (45 million characters, 10 avg): 588.1\n        */\n    }\n}\n')))}d.isMDXComponent=!0}}]);