---
title: Blog GradioClient
uuid: 627f2784-ef96-11ef-a1f4-4f6319174ddb
version: 162
created: '2025-02-20T15:23:36+01:00'
tags:
  - blog
---

# Gradio Client

Most people in the AI-sphere (Deep Learning, LLM's) are aware of the [Gradio](https://www.gradio.app/) project (now under the [huggingface](https://huggingface.co/) umbrella).


::: {.callout-tip}
## Gradio in short

Gradio is a simple framework that helps you build Machine Learning apps with interactivity.

What makes it so simple also makes it a bit complex, modules are built like:

```python
import gradio as gr

def greet(name):
    return "Hello " + name + "!"

demo = gr.Interface(fn=greet, inputs="text", outputs="text")
demo.launch()
```

As you can see the input and outputs are completely separate from the function, which means that type-safety is removed. Personally I prefer `streamlit`, `solara` and other similar tools that keeps the type information.
:::


But what some might've missed in the fast-moving project is that they've added two new cool frameworks:

1. [**`gradio_client`**](https://www.gradio.app/guides/getting-started-with-the-python-client): A client that can call any Gradio Application (!)
    1. Gradio clients are easily deployed on HuggingFace, and there exist a ton of them. All are now accessible in a REST-like interface (including the compute)!
2. [**`gradio_lite`**](https://www.gradio.app/guides/gradio-lite): A WASM version of Gradio.
    1. Very simple to embed a Gradio app inside a HTML file or JS app.
    2. They've implemented smooth solutions for things like Multi File, PIP Requirements and more.
    3. **Pros:** Serverless, Low Latency, Privacy

## How do I use Gradio Client?

**Step 1: Connect to a Client**

```python
from gradio_client import Client, handle_file

client = Client("abidlabs/whisper")
```

**Step 2: Predict**

```python
client.predict(
    audio=handle_file("audio_sample.wav")
)

>> "This is a test of the whisper speech recognition model." 
```

Easy right?!


If we have multiple boxes / steps in the Gradio App we can call each of the components. The client usage of any Gradio App is easily found at the bottom.

![Gradio Client Button in Gradio Apps (the the left)](https://images.amplenote.com/627f2784-ef96-11ef-a1f4-4f6319174ddb/0c668288-7e63-4469-9d64-946abf665652.png)

And that opens a new menu which shows how to use each box of the App.

![The API documentation and How-To-Guide after clicking](https://images.amplenote.com/627f2784-ef96-11ef-a1f4-4f6319174ddb/5dd37151-9c78-4e80-af48-94d9e78ca5a0.png)

## Available Clients

Anyone can run this as it supports **regular REST requests**! They supply a `curl` sample on how to query the App. But they've got a **Python and JS native client.**


## Possibilities

This clever approach by Gradio opens a lot of doors. We can now build a user-friendly App that we can deploy on a server and *also* query using REST API's from any other application. It's two birds with one stone!


Combining this "App+API" deployment with the free, or paid, [HuggingFace Spaces](https://huggingface.co/spaces) creates a 


::: {.callout-tip}
## HuggingFace Spaces

HuggingFace Spaces is as simple deployments get:

- Free compute (and paid for more GPU time)
    - *ZeroGPU available using Gradio SDK*
- Natively Support *streamlit, Gradio, static (webapp)*
- Support any app via Docker
    - With multiple templates to get started fast!

Here we can deploy WebApps of different types incredibly easy by Client, Git, Drag n' Drop and other ways. You get a pretty URL `huggingface.co/spaces/<USER>/<APP_NAME>` that is easily shared with friends.\
All in all a great tool that puts the power into developers hands!

:::

# Outro

This blog is really short and to the point. The Gradio Client is sweet and I really wanted to share the experience. \
The combination of App+API written at the same time is exciting, when enhancing it with HuggingFace Spaces it all becomes magical. And Gradio's "auto-share" when running locally that can then provide an API too is not too shabby ðŸ˜‰


This is it for this time,\
Hampus LondÃ¶gÃ¥rd