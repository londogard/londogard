<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://blog.londogard.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.londogard.com/" rel="alternate" type="text/html" /><updated>2020-11-21T14:15:21-06:00</updated><id>https://blog.londogard.com/feed.xml</id><title type="html">Londogard</title><subtitle>A blog with a focus on Deep Learning, JVM and Performance.</subtitle><entry><title type="html">How to build and play Snake via Native Binary, JVM and JS/Browser (Kotlin)</title><link href="https://blog.londogard.com/gradle/kotlin/game/multiplatform/2020/11/07/snake-kotlin-multiplatform.html" rel="alternate" type="text/html" title="How to build and play Snake via Native Binary, JVM and JS/Browser (Kotlin)" /><published>2020-11-07T00:00:00-06:00</published><updated>2020-11-07T00:00:00-06:00</updated><id>https://blog.londogard.com/gradle/kotlin/game/multiplatform/2020/11/07/snake-kotlin-multiplatform</id><content type="html" xml:base="https://blog.londogard.com/gradle/kotlin/game/multiplatform/2020/11/07/snake-kotlin-multiplatform.html">&lt;p&gt;A three part blog (all included in this one) that goes through&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;How Kotlin Multiplatform works (compiler and everything)&lt;/li&gt;
  &lt;li&gt;How to build a game (Snake) and finally&lt;/li&gt;
  &lt;li&gt;how to make it multiplatform.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;All the code is available &lt;a href=&quot;https://github.com/londogard/snake-js-jvm-native&quot;&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s highly recommended using IntelliJ, a free (community) edition can be downloaded from &lt;a href=&quot;https://www.jetbrains.com/idea/download/#section=windows&quot;&gt;jetbrains.com&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; this post is pretty long and I recommend reading one part at a time (it’s 3 parts).&lt;/p&gt;

  &lt;p&gt;Personally I hate unfinished blogs that are multiple parts, hence I uploaded all at once. So be assured, you’re getting all parts - right here, right now! :happy:&lt;/p&gt;

  &lt;p&gt;Finally, the first part is purely informational about how everything works and the second part is how to actually code the game. The second part is interactive and contains a lot of TODOs.
The third, and final, part covers how we are able to use the same code on JS/Browser &amp;amp; Native&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;All the code is available &lt;a href=&quot;https://github.com/londogard/snake-js-jvm-native&quot;&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;First off, what is Kotlin?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh6.googleusercontent.com/z07YTS2Ft_HypvBzChXpX4L1ye3y4ht0x142UCo8q6LGT0EaxZyEFA5hwP3_OV4ZQafkavgMBtRBP3X6RFPpogLTG5uR8J485-o6y1TOZ3xh_7TZkvTb7DOSGqIm5kiIZwPFCZdlLXg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Image from &lt;a href=&quot;https://kotlinlang.org/&quot;&gt;kotlinlang.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By my own account it’s a language that has learned from many mistakes done in the past and tries to extend and embrace the good ones!&lt;/p&gt;

&lt;p&gt;The most obvious one solved by Kotlin is “The Billion Dollar Mistake” as the inventor &lt;a href=&quot;https://en.wikipedia.org/wiki/Tony_Hoare&quot;&gt;Tony Hoare&lt;/a&gt; calls it himself, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;. Kotlin is not alone about this, but certainly off to a good start!&lt;/p&gt;

&lt;p&gt;Some mentionable features on top of this is&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/coroutines-overview.html&quot;&gt;Coroutines&lt;/a&gt; - A more efficient (lightweight) threading model, also called “green threads” sometimes. Feels very natural and easy.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/data-science-overview.html&quot;&gt;Data-Science &amp;amp; Jupyter&lt;/a&gt; support&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/extensions.html#extensions&quot;&gt;Extension functions&lt;/a&gt; - Perhaps my favourite feature, do you feel a class is missing a function? No problem, you’re free to do so!&lt;/li&gt;
  &lt;li&gt;Excellent &lt;a href=&quot;https://kotlinlang.org/spec/type-inference.html&quot;&gt;typing&lt;/a&gt; - Perhaps not Scala, but still very good.&lt;/li&gt;
  &lt;li&gt;&amp;amp; more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of this is available through Kotlins Multiplatform effort, where Multiplatform does not mean Mac/Windows/Linux but rather that we can compile into different platforms such as Java Bytecode (JVM), &lt;a href=&quot;https://kotlinlang.org/docs/reference/native-overview.html&quot;&gt;Native&lt;/a&gt;  and &lt;a href=&quot;https://kotlinlang.org/docs/reference/js-overview.html&quot;&gt;JS/Browser&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enough praises, let’s get onto how the multiplatform solution actually works through &lt;a href=&quot;#Part 1: How does Kotlin Multiplatform work&quot;&gt;&lt;strong&gt;Part 1&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;part-1-how-does-kotlin-multiplatform-work&quot;&gt;Part 1: How does Kotlin Multiplatform work?&lt;/h1&gt;
&lt;p&gt;Let’s begin by understanding exactly what &lt;strong&gt;Native&lt;/strong&gt; is?
From the landing page of &lt;a href=&quot;https://kotlinlang.org/docs/reference/native-overview.html&quot;&gt;kotlinlang.org/native&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Kotlin/Native is a technology for compiling Kotlin code to native binaries, which can run without a virtual machine. It is an  &lt;a href=&quot;https://llvm.org/&quot;&gt;LLVM&lt;/a&gt;  based backend for the Kotlin compiler and native implementation of the Kotlin standard library.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This statement tells us a few things, such as &lt;em&gt;native&lt;/em&gt; refering to binary executables that can run on a OS (natively) using no virtual machine or browser!&lt;br /&gt;
But in practice?&lt;/p&gt;

&lt;p&gt;✔️ Small file size&lt;br /&gt;
✔️ No overhead&lt;br /&gt;
✔️ Incredibly fast starting-time&lt;/p&gt;

&lt;p&gt;As usual it isn’t a win-win situation but you loose some&lt;/p&gt;

&lt;p&gt;❌Development speed&lt;/p&gt;

&lt;h2 id=&quot;llvm&quot;&gt;LLVM&lt;/h2&gt;

&lt;p&gt;LLVM is probably the biggest project (compiler) that exists to build native binaries. Languages such as C, C++, Haskell, Rust &amp;amp; Swift compile into native binaries through LLVM.&lt;/p&gt;

&lt;p&gt;From the info-box previously,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;It is an  &lt;a href=&quot;https://llvm.org/&quot;&gt;LLVM&lt;/a&gt;  based backend for the Kotlin compiler&lt;/strong&gt; and native implementation of the Kotlin standard library.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So… What is a backend? More specifically, what is a backend for a compiler?&lt;/p&gt;

&lt;h2 id=&quot;how-the-kotlin-compiler-works-frontend-to-backend&quot;&gt;How the Kotlin Compiler works, Frontend to Backend&lt;/h2&gt;

&lt;p&gt;A compiler is like a translator, just as you’d translate Swedish into English a compiler instead translates computer code written in one programming language into another one of lower level, e.g. assembly.&lt;/p&gt;

&lt;p&gt;In general all compilers follow the same pattern, and Kotlin is no different. Even though it’s a similar path it’s interesting to learn about, even more if you don’t know how it usually works!&lt;br /&gt;
The Kotlin Compiler first compiles Kotlin code into a &lt;em&gt;Intermediate Representation&lt;/em&gt;, or &lt;em&gt;IR&lt;/em&gt;, which it later turns into Java Bytecode, when targeting the &lt;em&gt;Java Virtual Machine&lt;/em&gt; (&lt;em&gt;JVM&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/7490199/97027300-d2095900-155a-11eb-9d18-6fb58a0a9699.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first part is called the &lt;strong&gt;Compiler Frontend&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-kotlin-compiler-frontend&quot;&gt;The Kotlin Compiler Frontend&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/7490199/97027463-1137aa00-155b-11eb-9c31-a60e3e25af87.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Compiler Frontend&lt;/em&gt; turns the Kotlin code into a &lt;em&gt;Intermediate Representation&lt;/em&gt; of the code which is represented by a &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;abstract syntax tree&lt;/a&gt;. The &lt;em&gt;abstract syntax tree&lt;/em&gt; in turn is built from concrete syntax, e.g. strings.&lt;br /&gt;
The process involves &lt;a href=&quot;https://en.wikipedia.org/wiki/Lexical_analysis&quot;&gt;lexical analysis&lt;/a&gt; which creates tokens and pass it forward to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Parsing&quot;&gt;parser&lt;/a&gt; that finally builds the &lt;em&gt;abstract syntax tree&lt;/em&gt;.&lt;br /&gt;
For those interested this could be a really fun challenge and learning lesson to implement yourself!&lt;/p&gt;

&lt;p&gt;Moving on, the second and final part is called the &lt;strong&gt;Compiler Backend&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-kotlin-compiler-backend&quot;&gt;The Kotlin Compiler Backend&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/7490199/97077672-ddee2d00-15e5-11eb-9f71-916c5b2a0544.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Compiler Backend&lt;/em&gt; turns this abstract syntax tree, or &lt;em&gt;IR&lt;/em&gt;, into computer output language.&lt;br /&gt;
In the image that is Java Bytecode which is understood by the &lt;em&gt;JVM&lt;/em&gt;. The backend is the part that actually optimize code to remove for-loops where applicable, exchange variables into constants and so on.&lt;br /&gt;
Just as with the frontend it’s a really good challenge to either implement a backend without optimizations, or focus on a existing one and adding a optimization yourself!&lt;/p&gt;

&lt;p&gt;What is interesting about Kotlin is that it has different compiler backends, which means that the &lt;em&gt;IR&lt;/em&gt; compile not only into Java Bytecode but also JS/Browser &amp;amp; Native binaries.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/7490199/97077776-b8155800-15e6-11eb-8ae6-a83a77253087.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Side-note&lt;/strong&gt;: For Native Backend there’s in fact two &lt;em&gt;Intermediate Representations&lt;/em&gt;, first Kotlin &lt;em&gt;IR&lt;/em&gt; which then compiles into LLVM &lt;em&gt;IR&lt;/em&gt;. LLVM finally turns this into a native binary through its own Compiler Backend.&lt;br /&gt;
During the final step in LLVM all the optimizations applied to C, C++, Swift &amp;amp; many more is also applied to Kotlin Native code!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-kotlin-keeps-multiplatform-clean&quot;&gt;How Kotlin keeps multiplatform clean&lt;/h2&gt;

&lt;p&gt;It might sound messy to target multiple platforms like this, and how could it possibly end up clean?&lt;/p&gt;

&lt;p&gt;By using the standard libraries that are included with Kotlin, which includes almost everything you need, and multiplatform-developed community libraries, e.g. &lt;a href=&quot;https://github.com/cashapp/sqldelight&quot;&gt;SQLDelight&lt;/a&gt;, you get code that looks the same and works the same irregardless of target (JS/Browser, Native or the JVM).&lt;/p&gt;

&lt;p&gt;To give an example of how Kotlin std-lib works, let’s take one of the most common types - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/7490199/97077938-2dcdf380-15e8-11eb-8282-873d80f6178e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kotlin.String&lt;/code&gt; rather than the usual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java.lang.String&lt;/code&gt; you do when programming Java you get a type that works on multiple platforms, including some awesome convenience functions. Imagine, you can write native code using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.substring&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.take(n)&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.replace&lt;/code&gt; - amazing compared to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt; right? :happy:&lt;/p&gt;

&lt;p&gt;To put this in context of the compiler, this means that the &lt;em&gt;Compiler Backend&lt;/em&gt; automatically maps the &lt;em&gt;IR&lt;/em&gt; of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kotlin.String&lt;/code&gt; into the correct type.&lt;/p&gt;

&lt;p&gt;You can take this concept and apply to anything such as IO , network &amp;amp; more - all which are included in the std-lib!&lt;/p&gt;

&lt;h2 id=&quot;summarizing-how-multiplatform-works&quot;&gt;Summarizing how Multiplatform works&lt;/h2&gt;

&lt;p&gt;Let’s recollect what we’ve gone through&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Kotlin Compiler compiles Kotlin code into a &lt;em&gt;Intermediate Representation&lt;/em&gt; (IR) through the &lt;em&gt;Compiler Frontend&lt;/em&gt;.
    &lt;ol&gt;
      &lt;li&gt;&lt;em&gt;IR&lt;/em&gt; is a abstract syntax tree.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Kotlin Compiler then goes the &lt;em&gt;Compiler Backend&lt;/em&gt; which turns the code into the lower level language, e.g. Java Bytecode, and applies multiple optimisations.&lt;/li&gt;
  &lt;li&gt;Kotlin has a std-lib which has functionalities as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kotlin.String&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kotlin.List&lt;/code&gt;, networking and much more.
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kotlin.String&lt;/code&gt; turns into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KString&lt;/code&gt; in the case of targeting &lt;em&gt;Native&lt;/em&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KString&lt;/code&gt; is Kotlins own native strings with some cool helper methods.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Native is usually considered “dangerous” and “hard” because of all the quirks like pointers, address space and other.&lt;/p&gt;

&lt;p&gt;Kotlin Native deals with &lt;em&gt;memory allocation&lt;/em&gt; in the same way as Swift, namely &lt;a href=&quot;https://en.wikipedia.org/wiki/Reference_counting&quot;&gt;&lt;em&gt;reference counting&lt;/em&gt;&lt;/a&gt; which deallocates objects once they’ve got no references. There’s some advantages such as being really fast, but also downsides such as &lt;em&gt;reference cycles&lt;/em&gt; which it handles poorly when compared to the JVM Garbace Collector (GC).&lt;/p&gt;

&lt;p&gt;Kotlin also has some really nice convenience syntax such as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memScope&lt;/code&gt;-block.&lt;/p&gt;

&lt;h2 id=&quot;outro-kotlin-multiplatform-and-why-it-matters&quot;&gt;Outro: Kotlin Multiplatform and why it matters&lt;/h2&gt;

&lt;p&gt;✔️ One code-base for common logic&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Serialization logic, e.g. parsing JSON into a data class&lt;/li&gt;
  &lt;li&gt;Networking&lt;/li&gt;
  &lt;li&gt;Database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;✔️ Development speed&lt;br /&gt;
✔️ Required Knowledge&lt;/p&gt;

&lt;p&gt;❌ Still requires some code in said language&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Especially for UI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So all in all we can share our code between platforms which improves development speed &amp;amp; quality in multiple ways.&lt;/p&gt;

&lt;p&gt;The biggest “downside” is that even though we share the code we most likely will need some kind of specific code for the platform, for the GUI on iOS as an example. Perhaps &lt;a href=&quot;https://www.jetbrains.com/lp/compose/&quot;&gt;compose&lt;/a&gt; can help us get closer to that reality soon - who knows.&lt;br /&gt;
The final, and perhaps obvious, one I’d like to mention straight away is that platform specific libraries of course are not usable on multiplatform. This includes libraries such as React (JS) &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ncurses&lt;/code&gt; (native).&lt;/p&gt;

&lt;p&gt;Personally I see Kotlin Multiplatform as a great way to &lt;strong&gt;share core logic&lt;/strong&gt; between different targets, but one must use it with care and &lt;strong&gt;not try to force it&lt;/strong&gt; into being used everywhere in every way.&lt;/p&gt;

&lt;h1 id=&quot;part-2-how-to-set-up-multiplatform-and-build-snake&quot;&gt;Part 2: How to set up Multiplatform and build Snake&lt;/h1&gt;

&lt;p&gt;First we’ll have to set up a Multiplatform project. The &lt;a href=&quot;https://kotlinlang.org/docs/reference/mpp-create-lib.html&quot;&gt;official guide&lt;/a&gt; is actually really good, and if you’re using IntelliJ it’s a breeze to setup! Just as in the guide make sure to select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Library&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://kotlinlang.org/assets/images/reference/mpp/mpp-project-1.png&quot; alt=&quot;Select a project template&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Run the build.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Side-note:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gradle&lt;/code&gt; is a really good build-tool that I’d like to discuss more. But for now let’s just enjoy the simplicity of how our whole project ‘automagically’ just works and builds as expected while targeting different platforms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;building-a-jvm-app-snake&quot;&gt;Building a JVM App (Snake)&lt;/h2&gt;

&lt;p&gt;Let’s start simple, Keep It Simple Stupid (KISS) principle applied, and create a JVM app. JVM has multiple advantages while developing such as&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Easy to run on all OS:es&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Great&lt;/em&gt; debugging!&lt;/li&gt;
  &lt;li&gt;A ton of resources&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;First off, we need to draw something. This is easiest done through the Swing library which is included in the default jdk, some might call it old but hey - it does the job.Create a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.kt&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/jvmMain/kotlin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Swing has a built-in threading solution (almost too bad, because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Coroutines&lt;/code&gt; are awesome in Kotlin!) and the best way to start the GUI is by using the existing  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventQueue&lt;/code&gt; class and its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invokeLater&lt;/code&gt; function. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invokeLater&lt;/code&gt; makes sure the code runs last in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventQueue&lt;/code&gt; if you add more methods, which makes sense - you want to draw the UI as the final thing.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;EventQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;invokeLater&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;JFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Snake&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;isVisible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply&lt;/code&gt; is a context wrapper that takes the object and uses it as context (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt;) inside of the block/scope (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt;). See its signature:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inline fun &amp;lt;T&amp;gt; T.apply(block: T.() -&amp;gt; Unit): T&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This would equate to&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;jframe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Snake&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;jframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isVisible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in more Java-like syntax. Why use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply&lt;/code&gt;? It allows us to achieve some interesting chaining concepts which I really enjoy.&lt;/p&gt;

&lt;p&gt;Now run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;-function, there should be a green “run”-button at the left, press that. Hopefully it compiles and a window will appear, with the title set to “Snake”.&lt;/p&gt;

&lt;p&gt;Awesome! We need to render something inside of the box, a game soon enough, let’s see how we can achieve that.&lt;/p&gt;

&lt;p&gt;Adding some minor refactoring and some new classes we can draw something&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JPanel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
        - Set background to black
        - Allow focus
        - Set preferredSize to some 200x300
        &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GUI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Snake&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;isVisible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;isResizable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;setLocationRelativeTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;defaultCloseOperation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EXIT_ON_CLOSE&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Add the Board to the JFrame, through add()&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;EventQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;invokeLater&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;GUI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What are we doing?&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JFrame&lt;/code&gt; was refactored &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GUI&lt;/code&gt; which then is a subclass of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JFrame&lt;/code&gt;, with a few extra attributes added such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defaultCloseOperation = EXIT_ON_CLOSE&lt;/code&gt; that makes sure the program exits if we close the window, feel free to test it out!&lt;br /&gt;
Further a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Board&lt;/code&gt; was added which extends &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JPanel&lt;/code&gt;, it’s in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Board&lt;/code&gt; the game will be rendered. &lt;br /&gt;
Finally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add(Board())&lt;/code&gt; allows us to add our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Board&lt;/code&gt;  to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JFrame&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Run!&lt;br /&gt;
Something is not right.. The background seems black enough, but the size is most likely not correct. We can’t even resize as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isResizable=false&lt;/code&gt; was set.&lt;br /&gt;
Make sure to add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pack()&lt;/code&gt; at the end, as in&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GUI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/** same code as before */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pack()&lt;/code&gt; does is that it packs and resizes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JFrame&lt;/code&gt; to include all its component(s) and their current size(s).&lt;/p&gt;

&lt;p&gt;Super! We’re now able to render our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Board&lt;/code&gt; and see the whole board.&lt;/p&gt;

&lt;h3 id=&quot;drawing-the-snake--apple&quot;&gt;Drawing the snake &amp;amp; apple&lt;/h3&gt;

&lt;p&gt;We’ve got the canvas (Board), now we just need to get artsy and add a Snake and some Apples!&lt;br /&gt;
I’ll keep it simple and will make the Board exist of a few cells, all pretty large. On each cell you either have nothing, Snake or Apple - pretty simple right?&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JPanel&lt;/code&gt; has some nice-to-have methods built-in, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repaint()&lt;/code&gt; which simply repaints the component, which in turns calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paintComponent(g: Graphics?)&lt;/code&gt; to paint/render it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Disclaimer:&lt;/em&gt;  the code might not be the most idiomatic, but I try to introduce a few concepts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JPanel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/** same code as before */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;paintComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Graphics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;paintComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;g2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Graphics2D&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Graphics2D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;g2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;20.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;20.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GREEN&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once again, let’s dive into what’s happening ‘under the hood’.&lt;/p&gt;

&lt;p&gt;First, we override the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paintComponent&lt;/code&gt; which renders &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Board&lt;/code&gt; layout. The input is a &lt;strong&gt;nullable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Graphics&lt;/code&gt;&lt;/strong&gt;, which is shown by the type having a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; at the end. This is a cool property of Kotlin, if something can be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; it actually is a type. No &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Option&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Maybe&lt;/code&gt;, just pure type.&lt;/p&gt;

&lt;p&gt;Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Graphics?&lt;/code&gt; is cast to non-null &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Graphics2D&lt;/code&gt; through a safe approach using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;as?&lt;/code&gt;, without &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; the cast can crash, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; the cast would return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; if failing.&lt;/p&gt;

&lt;p&gt;Finally we use a &lt;strong&gt;elvis-expression &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?:&lt;/code&gt;&lt;/strong&gt; which is basically a wrapper for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if (null) doThis else doThat&lt;/code&gt;, so if the left-hand-side is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; it’ll give the right-hand-side. The right-hand-side in our case is a empty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt; statement, meaning that we just make a early-exit. If the value is &lt;em&gt;not&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; it’ll give the non-null variant of the type!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Example use-case of elvis-operator &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?:&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val a: Int = 1 ?: 0 // a = 1&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val b: Int = null ?: 0 // b = 0&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Detailing the code further we now have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;g2d: Graphics2D&lt;/code&gt; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Graphics2D&lt;/code&gt; which gives us a few nice functions to draw components on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Board&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We set the scale to 20
    &lt;ul&gt;
      &lt;li&gt;This simplifies the behaviour, we can now use 20x30 grid where each cell is size 1, but it’s scaled into the 200x300 grid.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;We use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fill&lt;/code&gt; to draw &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rectangle&lt;/code&gt;’s with set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Color&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Side-note:&lt;/strong&gt;
For those wondering how you safely execute on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;s by chaining, like you do with Monads (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Option&lt;/code&gt;)&lt;/p&gt;

  &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;nullableGraphics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Graphics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nullableGraphics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;20.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;20.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// This is safe! No operation executed if null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;Summing up, we now know how to render stuff on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Board&lt;/code&gt; and it’s all very static.&lt;br /&gt;
The next step is to make the rendering less static and I believe the natural step from now is to create the data structures that’ll contain the game &amp;amp; its state. Then we can make sure the data structures are able to update, so we can render new states.&lt;/p&gt;

&lt;h3 id=&quot;creating-the-data-structures&quot;&gt;Creating the data structures&lt;/h3&gt;

&lt;p&gt;Data structures are required to have a game state, that is the score and position of everything.&lt;/p&gt;

&lt;p&gt;The natural state is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Game&lt;/code&gt; which contains everything, let’s begin by creating a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Game&lt;/code&gt; structure which contains the size of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Board&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Side-note:&lt;/strong&gt; A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data class&lt;/code&gt; is essentially the same as a  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case class&lt;/code&gt; from Scala. And for those who don’t know what a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case class&lt;/code&gt; is it’s basically a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt; that simplifies a lot of stuff, mainly used as a data structure. &lt;br /&gt;
You get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;equals&lt;/code&gt;, getters &amp;amp; setters, and much more for free.&lt;br /&gt;
Anyone from Java knows how awesome this is.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Moving on we need to define the cells mentioned, something like&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wrapping up our current state we got most of what we need, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Game&lt;/code&gt; which contains our game state &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cell&lt;/code&gt; which is our co-ordinates.&lt;br /&gt;
The next step is to actually draw the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cell&lt;/code&gt;’s and wrap the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cell&lt;/code&gt; in other classes such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apple&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Snake&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s add all the required code.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Apples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;emptySet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Snake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Take the first cell.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Drop one cell and return the rest.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;snake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Snake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Adding snake and apples&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;apples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Apples&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JPanel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Snake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),)),&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Apples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;background&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;isFocusable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;preferredSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dimension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;paintComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Graphics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;paintComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;g2d&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Graphics2D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;20.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;20.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;g2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GREEN&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Render the cells using the previously used technique&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Render the head using the color YELLOW&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Render the apples using the color RED&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fixing the added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TODO&lt;/code&gt;s and keeping the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GUI&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fun main&lt;/code&gt; we can now run the code. You should be seeing something like&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/7490199/97808473-5c427300-1c67-11eb-9fa9-9110f596533b.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pretty cool right!? We’ve got&lt;br /&gt;
✔️ Rendering&lt;br /&gt;
✔️ Data Structures&lt;/p&gt;

&lt;p&gt;What’s left?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A game loop&lt;/li&gt;
  &lt;li&gt;Ability to actually move the data structures ( &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Snake&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;adding-a-direction&quot;&gt;Adding a Direction&lt;/h4&gt;

&lt;p&gt;To be able to move we need to know what directions to move in. In my humble opinion this is simplest done through a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Direction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;DOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;RIGHT&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Simple enough. But let’s make it better, even though pre-optimization is the root of all evil it is sometimes fun :grinning:.&lt;br /&gt;
Enums in Kotlin are pretty awesome, they can both keep values and have methods! Let’s add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dx&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dy&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// |&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// v&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;DOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dx&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dy&lt;/code&gt; we can add it to the current cell to move in the direction which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Direction&lt;/code&gt; is!&lt;/p&gt;

&lt;p&gt;Updating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Snake.kt&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cell.kt&lt;/code&gt; to have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cell&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Direction&lt;/code&gt; and some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;turn&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Create new cell which moves in direction. OBS: Remember Direction now has dx, dy!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Snake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// new attribute&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;eatenApples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// new attribute&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Snake&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;newHead&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Move head&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;newTail&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Move tail!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Create a new Snake with the updated position!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;turn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newDirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Make sure to turn correctly&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is all fine &amp;amp; dandy, but there is some improvements to be made that’ll clean up the code.&lt;br /&gt;
I mentioned that Kotlin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enums&lt;/code&gt; can have methods, which is awesome. We can simplify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;turn&lt;/code&gt;-logic by adding a method to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Direction&lt;/code&gt;, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isOppositeTo&lt;/code&gt;. See the code below.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/** Same code as previously */&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isOppositeTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Right, we can now turn the snake and render the game. We need the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Game&lt;/code&gt;-state to update to actually re-render the updated Snake, let’s add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt;-function that does this.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    Make sure to
    	1. Turn snake in direction
    	2. Move
    	3. Update the game state by returning Game
    &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And our GUI&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JPanel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Direction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RIGHT&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Snake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Apples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;addKeyListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;KeyAdapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;keyPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;KeyEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nc&quot;&gt;VK_I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VK_UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VK_W&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UP&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Add the other key bindings. Reflect of how the object works and what is happening.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;repaint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; (equal to a constructor) we add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keyListener&lt;/code&gt; which will listen on whenever we move. We moved &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;game&lt;/code&gt; to be a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt; which allows us to change the reference.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Side-note:&lt;/strong&gt; The difference between a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt; is not about immutability of the value, but rather that you cannot change the pointer to the object. By using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val&lt;/code&gt; the compiler don’t allow you to change the reference.&lt;/p&gt;

  &lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// CRASH -- This is not allowed&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// b = 3, this is allowed.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;

  &lt;p&gt;Please note that this means that if your object is mutable, you can mutate the state of the object even though it’s a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why put &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;game&lt;/code&gt; on a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt; you might ask? Otherwise how would we update our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Game&lt;/code&gt; as the data structure itself is “immutable”, i.e. cannot be changed, which would mean that we’d need to add a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Game&lt;/code&gt; object each time and save it on the stack (never cleaning it up) and that’d pretty fast make the application crash because of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;out of memory&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we update the game by calling our created &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt;-method and then we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repaint()&lt;/code&gt; which draws the components!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Remember:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paintComponent&lt;/code&gt; draws the canvas (game), so whenever &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repaint&lt;/code&gt; is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paintComponent&lt;/code&gt; draws the game again based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;game&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cell&lt;/code&gt;’s in the game.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In conclusion this gives us an incredibly simple game, the snake moves whenever we press a key as we &lt;em&gt;still don’t have a game loop&lt;/em&gt; based on time. So how do we add a game loop based on time?&lt;/p&gt;

&lt;p&gt;The JVM got you covered! In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keyListener&lt;/code&gt; remove the update &amp;amp; repaint, then add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timer &lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;fixedRateTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Explore options to use for the timer and how they work&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Insert a game loop here, essentially the same as done in the keyListener previously!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run the game! …amazing right?&lt;/p&gt;

&lt;p&gt;We now move our snake, and it moves by itself if we don’t. 
But the game is still pretty boring… We never die, no apples can be eaten and finally no new apples appear. We have a few additions to make to make the game a bit challenging..&lt;/p&gt;

&lt;p&gt;Let’s start by fixing the apples. Update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apples.kt&lt;/code&gt; to randomly add apples to the board when calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grow()&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To simplify the logic we use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set&lt;/code&gt; which means that all apples added are unique.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Apples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;emptySet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;growthSpeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this could actually be to only spawn apple when there is no other apple. Up to user&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Once again, Kotlin provides a superb class, in this case a Random wrapper that works on JVM, JS &amp;amp; Native - cool right?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;grow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Apples&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
        If we have a random number greater than growthSpeed, return no update. 
        Otherwise add a new cell.
        &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we should allow the Snake to eat them, make sure to add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eat(apples: Apples)&lt;/code&gt; method and implement it for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Snake.kt&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Apples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Snake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Apples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    If our head is on a Apple location, return a pair of Snake and Apple untouched.
    Otherwise make sure to remove the apple from apples and increase body size of snake!
    &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the end of all this we need the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Game.kt&lt;/code&gt; to allow this logic to be used. This is done through updating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; to allow the snake to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eat&lt;/code&gt; apples and also &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grow&lt;/code&gt; apples to add new ones.&lt;/p&gt;

&lt;p&gt;Great! We can eat apples, add new apples and all. But we’re still pretty invincible and we’ll just keep going forever. 
We need to make sure that the end can be lost, let’s do it by adding a new attribute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isOver&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Game.kt&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Score based on snakes size, e.g. cell size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isOver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Game is over if snake head in tail or snake head not on the map!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isOver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/** same code as was here before */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;wrapping-up-the-code-with-some-minor-refactoring--new-functionality&quot;&gt;Wrapping up the code with some minor refactoring / new functionality&lt;/h2&gt;

&lt;p&gt;Kotlin has a wonderful concept of &lt;strong&gt;extension functions&lt;/strong&gt;, which simply is incredible. An extension function extends a class with new functionality. Did you ever wish &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Double&lt;/code&gt; had a rounding to string? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fun Double.roundTo(n: Int): String = &quot;%.${decimals}f&quot;.format(this)&lt;/code&gt; solves this for you! Now your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Double&lt;/code&gt;’s automatically gives you a hint to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.roundTo&lt;/code&gt; as one of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Double&lt;/code&gt;’s built-in functions!&lt;/p&gt;

&lt;p&gt;With these we can update our main-method to be a tiny bit cleaner.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;g2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GREEN&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Turns into --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Graphics2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;renderCells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Rectangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;	Which allows us to just call `g2d.renderCells(Color.GREEN, game.snake.tail)` etc.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;What more improvements can be made?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Exercises left for the reader:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add Score on the loosing screen&lt;/li&gt;
  &lt;li&gt;Add a win-condition (basically impossible, but taking all apples)&lt;/li&gt;
  &lt;li&gt;Reinforcement learning to train a bot (might be a future blog!)&lt;/li&gt;
  &lt;li&gt;Better &amp;amp; cleaner code!&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;part-3-true-multiplatform-moving-to-js--native&quot;&gt;Part 3: True multiplatform (moving to JS &amp;amp; Native)&lt;/h1&gt;

&lt;p&gt;I’ll begin by saying that this part is more of a reader exercise. If you want the code please go to the &lt;a href=&quot;https://github.com/londogard/snake-js-jvm-native&quot;&gt;GitHub repository&lt;/a&gt;.&lt;br /&gt;
The idea is that this part will be solved by yourself during the workshop this is intended for.&lt;/p&gt;

&lt;p&gt;All the snake-related code that isn’t in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.kt&lt;/code&gt;-file should be moved into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/commonMain/kotlin&lt;/code&gt; which makes it &lt;strong&gt;multiplatform&lt;/strong&gt;-code. This means that it can target JS, Native &amp;amp; JVM instantly!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Side-note:&lt;/strong&gt; because all the functionality for the Data Structures (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;take&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Random&lt;/code&gt;) exists in Kotlin std-lib it’s automatically possible to use in multiplatform.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is not true all the time, if we use platform-specific code. Our platform-specific code, tied with the JVM, is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timer&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Swing&lt;/code&gt; which means that our whole GUI is tied to the JVM.&lt;/p&gt;

&lt;p&gt;When the code has been migrated and import-paths are updated, run the JVM app again and validate that everything works.&lt;/p&gt;

&lt;h2 id=&quot;jsbrowser-target&quot;&gt;JS/Browser target&lt;/h2&gt;

&lt;p&gt;Now create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/jsMain/kotlin/main.kt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this file we need to define how to draw the browser-based GUI. Some key methods, for the full code check out the git repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;KeyListener&lt;/strong&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;document.onkeydown = { event -&amp;gt; onkeydown(event).also { keyDir -&amp;gt; dir = keyDir } }&lt;/code&gt; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onkeydown&lt;/code&gt; is your own method that handles key-events.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Timer&lt;/strong&gt; 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;window.setInterval({ game = game.update(dir); render(canvas, game) }, 200)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Canvas&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;snake-canvas&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTMLCanvasElement&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CanvasRenderingContext2D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctx&lt;/code&gt; from the canvas you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fillRect&lt;/code&gt; to draw rectangles, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fillStyle&lt;/code&gt; to set color.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML-Canvas&lt;/strong&gt; &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;canvas id=&quot;snake-canvas&quot; width=&quot;400px&quot; height=&quot;300px&quot;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/code&gt; (put in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;The game is run through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./gradlew jsBrowserRun&lt;/code&gt;, or selecting the gradle-icon at the top right (elephant) and typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jsBrowserRun&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And the code for the GUI using these components is pretty much exactly the same as in Swing to be honest.&lt;/p&gt;

&lt;p&gt;Congratulations, you have now achieved creating a desktop game and a browser game!&lt;/p&gt;

&lt;h2 id=&quot;native-target&quot;&gt;Native target&lt;/h2&gt;

&lt;p&gt;And onto our final target, Native Binary, that runs completely without a browser or a virtual machine.&lt;/p&gt;

&lt;p&gt;For the Native target the GUI will be supported through the library &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ncurses&lt;/code&gt; which unfortunately is only supported on Linux &amp;amp; MacOS. If you’ve windows you can solve this through &lt;em&gt;Windows Subsystem for Linux&lt;/em&gt; (WSL).&lt;/p&gt;

&lt;p&gt;Begin by creating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/nativeMain/kotlin/main.kt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To begin, in the main-function do the following:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;maint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;memScoped&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// insert code&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memScoped&lt;/code&gt; part means that all memory allocated in the block is automatically disposed at the end, incredibly useful! :happy:&lt;/p&gt;

&lt;p&gt;Then reading how to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ncurses&lt;/code&gt; we can figure out how to init this. The final end-goal being&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;memScoped&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;initscr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;endwin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;noecho&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;curs_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;halfdelay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newwin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delwin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toChar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'q'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wgetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toChar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        	&lt;span class=&quot;sc&quot;&gt;'i'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;WINDOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;wclear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mvwprintw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mvwprintw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;o&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mvwprintw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isOver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;mvwprintw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Game Over&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;mvwprintw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Your score is ${game.score}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;wrefresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Try running it in the terminal.&lt;/p&gt;

&lt;p&gt;This blog was created as a companion to a workshop I’m gonna do at AFRY, it has a bit more content including a presentation in person.&lt;/p&gt;

&lt;p&gt;All the code is available &lt;a href=&quot;https://github.com/londogard/snake-js-jvm-native&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

&lt;p&gt;~Hampus&lt;/p&gt;</content><author><name>Hampus Londögård</name></author><category term="gradle" /><category term="kotlin" /><category term="game" /><category term="multiplatform" /><summary type="html">A three part blog (all included in this one) that goes through</summary></entry><entry><title type="html">TIL: SDKMan - The Software Development Kit Manager</title><link href="https://blog.londogard.com/jvm/jdk/til/2020/09/04/til-sdkman.html" rel="alternate" type="text/html" title="TIL: SDKMan - The Software Development Kit Manager" /><published>2020-09-04T00:00:00-05:00</published><updated>2020-09-04T00:00:00-05:00</updated><id>https://blog.londogard.com/jvm/jdk/til/2020/09/04/til-sdkman</id><content type="html" xml:base="https://blog.londogard.com/jvm/jdk/til/2020/09/04/til-sdkman.html">&lt;h1 id=&quot;sdkman---swapping-jdk-made-simple&quot;&gt;SDKMan - Swapping JDK made simple&lt;/h1&gt;
&lt;p&gt;I’ve decided to not only write blogs but also small snippets, here comes the first one.&lt;/p&gt;

&lt;h3 id=&quot;what&quot;&gt;What&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://sdkman.io/&quot;&gt;SDKMan&lt;/a&gt; is a tool to install, set and swap JDK.&lt;br /&gt;
SDKMan actually supports more than the Java JDK, among supported tooling is Java, Groovy, Scala, Kotlin and Ceylon. Ant, Gradle, Grails, Maven, SBT, Spark, Spring Boot, Vert.x and many others also supported.&lt;/p&gt;

&lt;p&gt;It’s written in Bash, only requires curl &amp;amp; zip/unzip.&lt;/p&gt;

&lt;p&gt;So what SDKMan simplifies is&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Installation of different JDKs, Gradle versions and so on&lt;/li&gt;
  &lt;li&gt;Swapping between JDKs&lt;/li&gt;
  &lt;li&gt;Allowing local (by folder basis) JDK-versions&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;how&quot;&gt;How&lt;/h3&gt;
&lt;p&gt;We start by installation&lt;/p&gt;
&lt;h4 id=&quot;installation&quot;&gt;Installation&lt;/h4&gt;
&lt;p&gt;If you need a more detailed guide go to &lt;a href=&quot;https://sdkman.io/install&quot;&gt;this&lt;/a&gt; page.&lt;br /&gt;
&lt;strong&gt;Downloading SDKMan&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ curl -s \&quot;https://get.sdkman.io\&quot; | bash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installing&lt;/strong&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ source \&quot;$HOME/.sdkman/bin/sdkman-init.sh\&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Verification&lt;/strong&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$sdk version&lt;/code&gt; - should return something along &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sdkman X.Y.Z&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;usage&quot;&gt;Usage&lt;/h4&gt;
&lt;p&gt;|What|Command|Comment|
|—|—|—|
|Install JDK|&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$sdk install java&lt;/code&gt;|Installs the &lt;strong&gt;latest stable&lt;/strong&gt; version of Java JDK|
|Install specific version|&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$sdk install scala 2.12.1&lt;/code&gt;|Install scala 2.12.1|
|Install local version|&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$sdk install groovy 3.0.0-SNAPSHOT /path/to/groovy-3.0.0-SNAPSHOT&lt;/code&gt;|Installs a JDK you have locally to the SDKMan. The version name &lt;strong&gt;must&lt;/strong&gt; be unique!|
|Remove version|&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$sdk uninstall scala 2.11.6&lt;/code&gt;
|List candidates|&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$sdk list java&lt;/code&gt;|Lists all java candidates that are installable through SDKMan|
|Use version|&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$sdk use scala 2.12.1&lt;/code&gt;|Use the version said, this &lt;strong&gt;only changes the current shell&lt;/strong&gt;|
|Default version|&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$sdk default scala 2.11.1&lt;/code&gt;|Changes version for all subsequent shells|
|Current version|&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$sdk current&lt;/code&gt;|Lists all currently selected versions|&lt;/p&gt;

&lt;p&gt;Remember to point your JDK to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./sdkman/candidates/java/current&lt;/code&gt; path. Do the same for your IDE, such as IntelliJ-IDEA.&lt;/p&gt;

&lt;h3 id=&quot;why&quot;&gt;Why&lt;/h3&gt;
&lt;p&gt;I’ve got different projects where I need to use different java versions. In one project I need JDK 14 to include &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jpackage&lt;/code&gt; and another one I’m forced to use JDK 8 (legacy system), to swap between these has never been simpler!&lt;/p&gt;

&lt;h3 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jenv.be&quot;&gt;jEnv&lt;/a&gt; is a great alternative. According to some more JDK versions exists (haven’t checked myself), but overall it seems that SDKMan is the preferred alternative.&lt;br /&gt;
Looking at GitHub one can clearly see that SDKMan is more popular, both by stars, latest commit and forks - which should be a decent enough to make a choice.&lt;/p&gt;

&lt;p&gt;One thing I’ve learned both through work and my personal projects is that often it’s better to make an non-optimal decision rather than trying to find the perfect solution, because diving into the pile of research to perfection will take much more time than just getting started.&lt;/p&gt;

&lt;p&gt;-Hampus Londögård&lt;/p&gt;</content><author><name>Hampus Londögård</name></author><category term="jvm" /><category term="jdk" /><category term="til" /><summary type="html">SDKMan - Swapping JDK made simple I’ve decided to not only write blogs but also small snippets, here comes the first one.</summary></entry><entry><title type="html">TIL: fastutil - fast &amp;amp; compact type-speciic collections for JVM (no autobox!)</title><link href="https://blog.londogard.com/jvm/til/optimization/2020/09/03/til-fastutil-primitive-structures.html" rel="alternate" type="text/html" title="TIL: fastutil - fast &amp;amp; compact type-speciic collections for JVM (no autobox!)" /><published>2020-09-03T00:00:00-05:00</published><updated>2020-09-03T00:00:00-05:00</updated><id>https://blog.londogard.com/jvm/til/optimization/2020/09/03/til-fastutil-primitive-structures</id><content type="html" xml:base="https://blog.londogard.com/jvm/til/optimization/2020/09/03/til-fastutil-primitive-structures.html">&lt;h1 id=&quot;fastutil---how-to-optimize-your-collections-by-primitives&quot;&gt;fastutil - how to optimize your collections by primitives&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;fastutil extends the Java™ Collections Framework by providing type-specific maps, sets, lists and queues with a small memory footprint and fast access and insertion&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://fastutil.di.unimi.it/&quot;&gt;Homepage&lt;/a&gt; of fastutil&lt;/p&gt;

&lt;h3 id=&quot;what&quot;&gt;What&lt;/h3&gt;
&lt;p&gt;So what does the quote above actually mean?&lt;br /&gt;
First we need to dive into, what is a Java Collection, and why are they &quot;bad&quot; for performance and memory requirements?&lt;/p&gt;

&lt;p&gt;Java Collections (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collection&amp;lt;E&amp;gt;&lt;/code&gt;) only works with objects, meaning that if we have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&amp;lt;E&amp;gt;&lt;/code&gt; which we populate with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; it’ll actually &quot;autobox&quot; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Integer&lt;/code&gt;, i.e. the class, rather than the primitive type.&lt;br /&gt;
What does this mean for you as a user?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s done through &quot;autoboxing&quot; which means automatic casting to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Integer&lt;/code&gt;-type, so nothing required for you&lt;/li&gt;
  &lt;li&gt;It allocates more memory than the primitive &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So how do you create an effective &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt; that contains primitives, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int, boolean&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float&lt;/code&gt;? You can’t.&lt;br /&gt;
What you can do is to create an array, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int[]&lt;/code&gt;, which will contain the actual primitives, no autoboxing applied.&lt;/p&gt;

&lt;p&gt;But what if you want to have the methods from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt;, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find&lt;/code&gt; and &quot;auto-resizing&quot;?
Then you’ll have to research and find a library, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fastutil&lt;/code&gt; to the rescue!&lt;/p&gt;

&lt;h3 id=&quot;how&quot;&gt;How&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fastutil&lt;/code&gt; implements their own versions of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HashMap&lt;/code&gt; and so on which actually use the raw primitives, thereby increasing throughput while lowering memory used (as we’re not allocating as many objects anymore, when using primitives).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;These types of libraries are only required once you hit an enormous amount of data or very strict requirement.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;installation&quot;&gt;Installation&lt;/h4&gt;

&lt;p&gt;Using gradle&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;implementation: 'it.unimi.dsi:fastutil:8.4.1'&lt;/code&gt; (latest version as of Aug 2020, &lt;a href=&quot;https://mvnrepository.com/artifact/it.unimi.dsi/fastutil&quot;&gt;mvnrepository&lt;/a&gt;)&lt;/p&gt;

&lt;h4 id=&quot;usage&quot;&gt;Usage&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;DoubleToDoubleMap&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;d2dMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double2DoubleMap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double2DoubleOpenHashMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6.6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d2dMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This map is not only less memory-hungry (because using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;double&lt;/code&gt; rather than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Double&lt;/code&gt;) but is also faster with insertions &amp;amp; get, than the Java Collections counterpart.&lt;/p&gt;

&lt;h3 id=&quot;why&quot;&gt;Why&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Less space used &amp;amp; faster&lt;/strong&gt; - it is as simple as that!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No &quot;AutoBoxing&quot;&lt;/li&gt;
  &lt;li&gt;No Object allocations for primitives&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Side-note&lt;/em&gt;
Something I noticed while working on my Language Model in Kotlin, with some strict requirements and a lot of data, was that even when using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fastutil&lt;/code&gt; I wasn’t gaining that much as I was  mainly using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;views&lt;/code&gt; of my Lists, further optimizing memory. Views are what the name implies, a view of the List. It never creates a copy but just the indices and make use of the original structure. 
Using immutable data this is very effective, but if you’d been using mutable data it could prove dangerous as someone can change the structure and data of your view (even if your view is immutable the underlying List might not be).&lt;/p&gt;

&lt;h3 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;Goldman Sachs Collection - now Eclipse Collections&lt;/a&gt; - Probably the best alternative, in my opinion.
&lt;a href=&quot;http://labs.carrotsearch.com/hppc.html&quot;&gt;HPPC - Carrot Search Labs&lt;/a&gt;
&lt;a href=&quot;https://bitbucket.org/trove4j/trove/src/master/&quot;&gt;Trove4j&lt;/a&gt; - Not as active as other alternatives, but who cares when it’s performant and &quot;done&quot;?&lt;/p&gt;

&lt;p&gt;Find a 2015 benchmark of the libraries &lt;a href=&quot;http://java-performance.info/hashmap-overview-jdk-fastutil-goldman-sachs-hppc-koloboke-trove-january-2015/&quot;&gt;here&lt;/a&gt;
At least both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fastutil&lt;/code&gt;&amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Eclipse Collections&lt;/code&gt; are updated for Java 8 streams!&lt;/p&gt;

&lt;p&gt;-Hampus Londögård&lt;/p&gt;</content><author><name>Hampus Londögård</name></author><category term="jvm" /><category term="til" /><category term="optimization" /><summary type="html">fastutil - how to optimize your collections by primitives fastutil extends the Java™ Collections Framework by providing type-specific maps, sets, lists and queues with a small memory footprint and fast access and insertion</summary></entry><entry><title type="html">TIL: ‘The Badass Runtime Plugin’, jpackage &amp;amp; jlink - create a ‘native’ installable executable from your JVM-app that isn’t huge</title><link href="https://blog.londogard.com/jvm/jdk/til/jpackage/jlink/2020/09/03/til-badass-runtime.html" rel="alternate" type="text/html" title="TIL: ‘The Badass Runtime Plugin’, jpackage &amp;amp; jlink - create a ‘native’ installable executable from your JVM-app that isn’t huge" /><published>2020-09-03T00:00:00-05:00</published><updated>2020-09-03T00:00:00-05:00</updated><id>https://blog.londogard.com/jvm/jdk/til/jpackage/jlink/2020/09/03/til-badass-runtime</id><content type="html" xml:base="https://blog.londogard.com/jvm/jdk/til/jpackage/jlink/2020/09/03/til-badass-runtime.html">&lt;h1 id=&quot;jpackage-jlink-and-how-to-pack-a-modern-java-app&quot;&gt;JPackage, JLink and how to pack a modern Java App&lt;/h1&gt;
&lt;p&gt;JPackage is a way to package a modern JVM-program as a installable binary, in a small format.&lt;/p&gt;

&lt;h3 id=&quot;what&quot;&gt;What&lt;/h3&gt;
&lt;p&gt;JPackage was finally included in the JDK by JDK-14, originally from the JavaFX-world (to bundle your desktop apps).
JPackage combines itself with JLink, which builds upon ‘&lt;a href=&quot;https://openjdk.java.net/projects/jigsaw/&quot;&gt;project jigsaw&lt;/a&gt;’, and together they form a way to create &quot;native&quot; binaries for JVM-projects.&lt;/p&gt;

&lt;h4 id=&quot;what-is-jlink&quot;&gt;What is JLink?&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/9/tools/jlink.htm&quot;&gt;JLink&lt;/a&gt; is a way to assemble and optimize a set of modules and their dependencies into a custom runtime image (JRE). 
In other words we can take a ordinary JRE, ~200 MB, and chop it down to a total size of 25-40 MB for smaller project.&lt;/p&gt;

&lt;p&gt;JLink is only possible thanks to ‘project jigsaw’ which introduced modules and modularized the whole JRE starting from JDK-9. The Java standard library (stdlib) was modularized into 75 modules.
As you might guess it is even better if your own code is also modularized, but not enforced.&lt;/p&gt;

&lt;h4 id=&quot;what-is-jpackage&quot;&gt;What is JPackage&lt;/h4&gt;

&lt;p&gt;JPackage is the packaging suite that allows you to package your code, dependencies and the JLink-created JRE. I ended up with installation files, with a natively executable file on 60 MB for one of my smaller projects, which is really good in comparison to Electron!
In comparison to a C-program this might not be amazing, but you’ve to remember that this is completely cross-platform!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Side-note&lt;/em&gt; all sized discussed is without any major optimizations - and there exists a lot! Finally, if you exclude the JRE you can reach sizes of KB rather than MB! But excluding the JRE enforces the user to have it locally, which might not be good UX.&lt;/p&gt;

&lt;h3 id=&quot;how&quot;&gt;How&lt;/h3&gt;
&lt;p&gt;JPackage &amp;amp; JLink is made easy thanks to &lt;a href=&quot;https://badass-runtime-plugin.beryx.org/releases/latest/&quot;&gt;The Badass Runtime Plugin&lt;/a&gt; or &lt;a href=&quot;https://badass-jlink-plugin.beryx.org/releases/latest/&quot;&gt;The Badass JLink Plugin&lt;/a&gt; where the latter require a modular project and the former works with any project! :happy:&lt;/p&gt;

&lt;h4 id=&quot;installation&quot;&gt;Installation&lt;/h4&gt;

&lt;p&gt;Make sure you use &amp;amp; target JDK 14 or higher, JPackage was first included in this version. I recommend SDKMan to install &amp;amp; swap JDKs.&lt;/p&gt;

&lt;p&gt;Then to add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Badass Runtime Plugin&lt;/code&gt; I recommend using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gradle&lt;/code&gt;, which makes it as simple as the following.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.beryx.runtime\&quot;) version \&quot;1.11.3\&quot; // latest version August 2020
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;runtime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;--strip-debug\&quot;, \&quot;--compress\&quot;, \&quot;2\&quot;, \&quot;--no-header-files\&quot;, \&quot;--no-man-pages\&quot;))
&lt;/span&gt;    &lt;span class=&quot;nf&quot;&gt;jpackage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;installerType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;deb\&quot; // https://badass-runtime-plugin.beryx.org/releases/latest/
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This addition now creates the tasks required to build &amp;amp; bundle your app. The options added make sure that you reduce the total size by &lt;em&gt;a lot&lt;/em&gt;.
I highly recommend reading the documentation, there’s so many incredibly useful options - I only provide the minimum!&lt;/p&gt;

&lt;h4 id=&quot;usage&quot;&gt;Usage&lt;/h4&gt;

&lt;p&gt;By editing our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;building.gradle.kts&lt;/code&gt; to include everything from the &lt;a href=&quot;#Installation&quot;&gt;Installation&lt;/a&gt; we can run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./gradlew jpackage&lt;/code&gt; task to build our installer!&lt;/p&gt;

&lt;p&gt;I want to note again, please make sure to read the homepage - a ton of optimizations and customization exist. There exists a lot of low hanging fruit for sure, so make sure to grab it! :wink:&lt;/p&gt;

&lt;h3 id=&quot;why&quot;&gt;Why&lt;/h3&gt;
&lt;p&gt;It’s really cool to see your JVM application installable using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.msi&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.deb&lt;/code&gt; or even a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dmg&lt;/code&gt; while retaining a decent enough size.
By using JPackage rather than GraalVM you make sure that you don’t loose anything in the form of performance or functionality. As a cherry on the top, it’s not just a executable file, but also includes a installer which is much better UX in my opinion. GraalVM will be discussed a bit more in &lt;a href=&quot;#Alternatives&quot;&gt;Alternatives&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I want to re-iterate about the UX and size, which are the two main points of this.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We bundle a JRE with the JVM-app, allowing executables without requiring Java, of your version, to be installed on the user computer already.&lt;/li&gt;
  &lt;li&gt;The JRE is minified to only contain required modules, about 30-40 MB on a smaller project.&lt;/li&gt;
  &lt;li&gt;All required dependencies are bundled also&lt;/li&gt;
  &lt;li&gt;Installer which makes the whole JVM program really like any program on the computer&lt;/li&gt;
  &lt;li&gt;Basically a download, install run program that isn’t huge in size!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h3&gt;
&lt;p&gt;I see two alternatives that are worth mentioning&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;FAT-JAR / Uber-JAR / Shadow-JAR&lt;/li&gt;
  &lt;li&gt;GraalVM Native Image&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;fat-jar&quot;&gt;&quot;Fat-JAR&quot;&lt;/h4&gt;
&lt;p&gt;A FAT-jar is a jar that bundles all dependencies and also includes a shell script, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bat&lt;/code&gt; if Windows, to run the whole JVM-application. 
It’s pretty small in size, even though called FAT, as it doesn’t include a JRE to run the JVM.&lt;/p&gt;

&lt;p&gt;This means that if your JVM-app requires Java 11 but the user only has Java 8 you need to have them download the JRE required, which sucks.&lt;/p&gt;

&lt;p&gt;#### GraalVM
 The probably best alternative, it’s even smaller in size as SubstrateVM (their runtime) is really small and GraalVM allows AOT compile.&lt;/p&gt;

&lt;p&gt;GraalVM has &lt;em&gt;much&lt;/em&gt; faster startup-times than a JPackage program, but GraalVM is not as good when running for a long duration as there isn’t the incredibly good JIT from JVM.&lt;/p&gt;

&lt;p&gt;I’d say something along the following - for long running apps choose JPackage, for lambda etc certainly choose GraalVM.&lt;/p&gt;

&lt;p&gt;But GraalVM has further negatives, you can’t just code as you usually do. Reflection etc is not supported as usual, meaning there comes a lot of caveats using GraalVM.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Extra:&lt;/em&gt; I managed to end up with, after some minor trial-and-error, a binary file on ~ 12 MB for my file-sending program - pretty darn amazing!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I’ll write more about GraalVM and its SubstrateVM which is used to create the native binaries in a new TIL.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;-Hampus Londögård&lt;/p&gt;</content><author><name>Hampus Londögård</name></author><category term="jvm" /><category term="jdk" /><category term="til" /><category term="jpackage" /><category term="jlink" /><summary type="html">JPackage, JLink and how to pack a modern Java App JPackage is a way to package a modern JVM-program as a installable binary, in a small format.</summary></entry><entry><title type="html">CoViD-19 FAQ Search Engine 2.0</title><link href="https://blog.londogard.com/jupyter/nlp/machine-learning/deep-learning/2020/08/01/faq-search-covid-2.html" rel="alternate" type="text/html" title="CoViD-19 FAQ Search Engine 2.0" /><published>2020-08-01T00:00:00-05:00</published><updated>2020-08-01T00:00:00-05:00</updated><id>https://blog.londogard.com/jupyter/nlp/machine-learning/deep-learning/2020/08/01/faq-search-covid-2</id><content type="html" xml:base="https://blog.londogard.com/jupyter/nlp/machine-learning/deep-learning/2020/08/01/faq-search-covid-2.html">&lt;!--
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: _notebooks/2020-08-01-faq-search-covid-2.ipynb
--&gt;

&lt;div class=&quot;container&quot; id=&quot;notebook-container&quot;&gt;
        
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h1 id=&quot;CoViD-19-FAQ-Search-Engine-2.0&quot;&gt;CoViD-19 FAQ Search Engine 2.0&lt;a class=&quot;anchor-link&quot; href=&quot;#CoViD-19-FAQ-Search-Engine-2.0&quot;&gt; &lt;/a&gt;&lt;/h1&gt;&lt;p&gt;(Open in Google Colab &lt;a href=&quot;https://colab.research.google.com/github/londogard/nlp-projects/blob/master/python/CoViD_19_QA_cont.ipynb&quot;&gt;here&lt;/a&gt; to run the code)&lt;/p&gt;
&lt;p&gt;As promised here's a new improved (or is it?) &lt;em&gt;FAQ Search Engine&lt;/em&gt; with some minor NLP-lessons added as we go, be ready to learn new (or old) things!&lt;br /&gt;
Previously I added some requirements and I wish keep them, here they are as a refresher:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The end-product must be unsupervised&lt;ul&gt;
&lt;li&gt;No manually annotated data&lt;/li&gt;
&lt;li&gt;No heuristic applied (i.e. understand the data and improve result by applying domain-specific knowledge on the task)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It should be light enough to run on a Raspberry Pi later on (hopefully on the JVM to keep it simple with my back-end)&lt;/li&gt;
&lt;li&gt;Must be Swedish all the way through - no translations (English models you can transfer knowledge from tends to be stronger, but I want to keep this fun!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These specifications adds a bit of spice, keep manual labour to a minimum at the same time as they prove a challenge that doesn't aim to achieve State of the Art but rather to be applicable and light!&lt;/p&gt;
&lt;p&gt;With that in mind, let's move onwards!&lt;/p&gt;
&lt;h2 id=&quot;Improvements-to-be-done&quot;&gt;Improvements to be done&lt;a class=&quot;anchor-link&quot; href=&quot;#Improvements-to-be-done&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In the previous &lt;a href=&quot;https://londogard.com/blog/4&quot;&gt;blog&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://colab.research.google.com/github/londogard/nlp-projects/blob/master/python/CoViD_19_QA.ipynb&quot;&gt;notebook&lt;/a&gt; I first implemented a basic FAQ search based on finding the nearest neighbour from the embedded sentences, in the end I used &lt;em&gt;Smooth Inverse Frequency Embeddings&lt;/em&gt; (&lt;a href=&quot;https://openreview.net/forum?id=SyK00v5xx&quot;&gt;A Simple but Tough-to-Beat Baseline for Sentence Embeddings&lt;/a&gt;) to embed the sentence which is an improvement from simply averaging the embeddings of the words in the sentence.&lt;/p&gt;
&lt;p&gt;In the end I discussed some potential improvements which I wished to investigate. In this notebook I'll deliver these &quot;improvements&quot; based on grabbing some low hanging fruit. The total &quot;improvements&quot; to try out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lowercase&lt;/li&gt;
&lt;li&gt;Better tokenization&lt;/li&gt;
&lt;li&gt;Lemmatizing&lt;/li&gt;
&lt;li&gt;Stop words&lt;/li&gt;
&lt;li&gt;Ngram &amp;amp; Custom Embeddings (will not be done because of time)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To improve further I'd say that either A) &lt;em&gt;a lot&lt;/em&gt; of time to understand the data in depth and apply heuristics or B) a &lt;em&gt;supervised&lt;/em&gt; approach, which in turn require labeled data (a.k.a sweet valued time). A larger dataset would also be helpful.&lt;br /&gt;
All which I don't have currently.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Re-adding-the-old-code&quot;&gt;Re-adding the old code&lt;a class=&quot;anchor-link&quot; href=&quot;#Re-adding-the-old-code&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;First I'll add the code from &quot;part one&quot; and it'll not be commented as it has been walked through.&lt;br /&gt;
Further I've removed the download &amp;amp; parsing of FAQ, now the data is directly downloaded as a &lt;code&gt;tsv&lt;/code&gt;-file allowing us to skip some libraries / code-cells.&lt;br /&gt;
Some new dependencies are also added, e.g. &lt;code&gt;stanza&lt;/code&gt; which is Stanfords new NLP-lib in Python (inspired by &lt;code&gt;spaCy&lt;/code&gt;).&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%%capture&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gensim&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fse&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stanza&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# linear algebra&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pd&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# data processing, CSV file I/O (e.g. pd.read_csv)&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tqdm&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tqdm&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tqdm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pandas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pathlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; 
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;operator&lt;/span&gt; 
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# gensim + fasttext&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gensim.models.fasttext&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FastText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_facebook_vectors&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gensim.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyedVectors&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;stop_words&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_stop_words&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# stop-words from basically all languages&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;stanza&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fse&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IndexedList&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fse.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uSIF&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fse.models.average&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FAST_VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_WORDS_IN_BATCH&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX_WORDS_IN_BATCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FAST_VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;10000
1
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stanza&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sv&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging_level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ERROR&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;OBS!!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Please download the Swe fastText model &amp;amp; the CoViD FAQ data from links in this code cell!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Swe fastText reduced dimensions --&amp;gt;   https://drive.google.com/open?id=1vaWtiSlRAZ3XCdtnSce_6dwQ0T5x0OEJ&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# CoViD FAQ data --&amp;gt;                    https://github.com/londogard/nlp-projects/blob/master/datasets/covid.tsv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;OBS!!
Please download the Swe fastText model &amp;amp; the CoViD FAQ data from links in this code cell!
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Loading-all-the-models&quot;&gt;Loading all the models&lt;a class=&quot;anchor-link&quot; href=&quot;#Loading-all-the-models&quot;&gt; &lt;/a&gt;&lt;/h4&gt;&lt;p&gt;This might take a little while, even though the dimensions are reduced the model is pretty large.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ft_wv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_facebook_vectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;~/git/nlp-projects/models/cc.sv.100.bin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;~/git/nlp-projects/datasets/covid.tsv&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nlp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stanza&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sv&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;tokenize&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging_level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ERROR&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uSIF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ft_wv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang_freq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sv&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;flatten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sublist&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sublist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Helper function to flatten a list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h2 id=&quot;Going-forward&quot;&gt;Going forward&lt;a class=&quot;anchor-link&quot; href=&quot;#Going-forward&quot;&gt; &lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let's get on to adding our improvements&lt;/p&gt;
&lt;h3 id=&quot;1.-Tokenization-&amp;amp;-lower-case&quot;&gt;1. Tokenization &amp;amp; lower-case&lt;a class=&quot;anchor-link&quot; href=&quot;#1.-Tokenization-&amp;amp;-lower-case&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The first and forthmost improvement is to lowercase the text and then tokenize it using a better method of tokenization.&lt;br /&gt;
Let's take a look at how &lt;em&gt;stanza&lt;/em&gt; helps us out by applying a much better tokenization.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hej där borta! Jag känner igen dig, Johan&amp;#39;s kompis? Eller är det Johannas?&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stanza_tokenize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nlp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sentences&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stanza_tokenize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Previously:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;..&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;After:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;..&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Previously:	[&amp;#39;Hej&amp;#39;, &amp;#39;där&amp;#39;, &amp;#39;borta!&amp;#39;, &amp;#39;Jag&amp;#39;, &amp;#39;känner&amp;#39;, &amp;#39;igen&amp;#39;, &amp;#39;dig,&amp;#39;, &amp;#34;Johan&amp;#39;s&amp;#34;, &amp;#39;kompis?&amp;#39;, &amp;#39;Eller&amp;#39;, &amp;#39;är&amp;#39;, &amp;#39;det&amp;#39;]..
After:		[&amp;#39;Hej&amp;#39;, &amp;#39;där&amp;#39;, &amp;#39;borta&amp;#39;, &amp;#39;!&amp;#39;, &amp;#39;Jag&amp;#39;, &amp;#39;känner&amp;#39;, &amp;#39;igen&amp;#39;, &amp;#39;dig&amp;#39;, &amp;#39;,&amp;#39;, &amp;#39;Johan&amp;#39;, &amp;#34;&amp;#39;&amp;#34;, &amp;#39;s&amp;#39;]..
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;strong&gt;So, what are we looking at?&lt;/strong&gt;&lt;br /&gt;
Stanza handled our tokenization and increased the number of tokens, can this really be good!?&lt;br /&gt;
Yes! Keep calm and don't jump the ship yet, the increased number of tokens will be followed by a decrease of unique tokens, and indirectly out of vocobulary (OOV) tokens. Unlike what we set out to do we still don't lower-case the output, this will follow later, now let me explain what the tokenization helps us achieve:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Punctuation, e.g. [!,?..], is tokenized into its own token.&lt;/li&gt;
&lt;li&gt;Some compound words are split up, e.g. &lt;em&gt;Johan's&lt;/em&gt; is now &lt;em&gt;Johan&lt;/em&gt;, &lt;em&gt;'&lt;/em&gt;, &lt;em&gt;s&lt;/em&gt; which is three (3) separate tokens rather than one.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Because of the updated tokenization &lt;em&gt;fredag&lt;/em&gt; and &lt;em&gt;fredag!&lt;/em&gt; is now tokenized as [&lt;em&gt;fredag&lt;/em&gt;] and [&lt;em&gt;fredag&lt;/em&gt;, &lt;em&gt;!&lt;/em&gt;], this in fact turns &lt;em&gt;fredag&lt;/em&gt; into the same token in both thus achieving the same vector when embedded which is great, because it really means the same. The exclamation mark itself also applies the same meaning to all places it's applied, which in itself is an improvement now also as we embed it separately.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why is this good?&lt;/strong&gt;&lt;br /&gt;
Even though we see a direct increase in number of tokens we see a &lt;strong&gt;decrease&lt;/strong&gt; of number of unique tokens because we now tokenize &lt;em&gt;borta&lt;/em&gt;, &lt;em&gt;borta?&lt;/em&gt;, &amp;amp; &lt;em&gt;borta!&lt;/em&gt; as the same token, with one additional for the punctuation in the two latter cases rather than 3 separate tokens which would map to different data.&lt;br /&gt;
The coverage of our Word Embeddings also increase because we now tokenize the text better. Perhaps &lt;em&gt;borta!&lt;/em&gt; does not exist but &lt;em&gt;borta&lt;/em&gt; surely do exist in the embedding dictionary / lookup.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_dimensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preprocessing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stanza_tokenize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;question&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;question&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocessing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Previously: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; tokens (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; unique)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Post: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; tokens (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; unique)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Token reduction by ~&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.1f&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; %&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#Tokens&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;#Unique Tokens&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.35&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rects1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Before&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rects2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;After&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tokens&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tokens before and after&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_xticklabels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_xticks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tight_layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# preprocessing is a list of lambda functions to apply&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocessing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocessing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Let's take a look how much this actually mattered!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_dimensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Previously: 629 tokens (289 unique)
Post: 713 tokens (273 unique)
Token reduction by ~5.5 %
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_area&quot;&gt;


&lt;div class=&quot;output_svg output_subarea &quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;no&quot;?&gt;
&amp;lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot;
  &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&amp;gt;
&lt;!-- Created with matplotlib (https://matplotlib.org/) --&gt;
&lt;svg height=&quot;279.59625pt&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 424.690625 279.59625&quot; width=&quot;424.690625pt&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;
 &lt;defs&gt;
  &lt;style type=&quot;text/css&quot;&gt;
*{stroke-linecap:butt;stroke-linejoin:round;}
  &lt;/style&gt;
 &lt;/defs&gt;
 &lt;g id=&quot;figure_1&quot;&gt;
  &lt;g id=&quot;patch_1&quot;&gt;
   &lt;path d=&quot;M -0 279.59625 
L 424.690625 279.59625 
L 424.690625 0 
L -0 0 
z
&quot; style=&quot;fill:none;&quot; /&gt;
  &lt;/g&gt;
  &lt;g id=&quot;axes_1&quot;&gt;
   &lt;g id=&quot;patch_2&quot;&gt;
    &lt;path d=&quot;M 46.965625 255.718125 
L 417.490625 255.718125 
L 417.490625 22.318125 
L 46.965625 22.318125 
z
&quot; style=&quot;fill:#ffffff;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_3&quot;&gt;
    &lt;path clip-path=&quot;url(#pcf4f1f332e)&quot; d=&quot;M 63.80767 255.718125 
L 133.157269 255.718125 
L 133.157269 59.620349 
L 63.80767 59.620349 
z
&quot; style=&quot;fill:#1f77b4;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_4&quot;&gt;
    &lt;path clip-path=&quot;url(#pcf4f1f332e)&quot; d=&quot;M 261.949382 255.718125 
L 331.298981 255.718125 
L 331.298981 165.619147 
L 261.949382 165.619147 
z
&quot; style=&quot;fill:#1f77b4;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_5&quot;&gt;
    &lt;path clip-path=&quot;url(#pcf4f1f332e)&quot; d=&quot;M 133.157269 255.718125 
L 202.506868 255.718125 
L 202.506868 33.432411 
L 133.157269 33.432411 
z
&quot; style=&quot;fill:#ff7f0e;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_6&quot;&gt;
    &lt;path clip-path=&quot;url(#pcf4f1f332e)&quot; d=&quot;M 331.298981 255.718125 
L 400.64858 255.718125 
L 400.64858 170.607326 
L 331.298981 170.607326 
z
&quot; style=&quot;fill:#ff7f0e;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;matplotlib.axis_1&quot;&gt;
    &lt;g id=&quot;xtick_1&quot;&gt;
     &lt;g id=&quot;line2d_1&quot;&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 0 0 
L 0 3.5 
&quot; id=&quot;m142415d3cc&quot; style=&quot;stroke:#000000;stroke-width:0.8;&quot; /&gt;
      &lt;/defs&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;133.157269&quot; xlink:href=&quot;#m142415d3cc&quot; y=&quot;255.718125&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_1&quot;&gt;
      &lt;!-- #Tokens --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 51.125 44 
L 36.921875 44 
L 32.8125 27.6875 
L 47.125 27.6875 
z
M 43.796875 71.78125 
L 38.71875 51.515625 
L 52.984375 51.515625 
L 58.109375 71.78125 
L 65.921875 71.78125 
L 60.890625 51.515625 
L 76.125 51.515625 
L 76.125 44 
L 58.984375 44 
L 54.984375 27.6875 
L 70.515625 27.6875 
L 70.515625 20.21875 
L 53.078125 20.21875 
L 48 0 
L 40.1875 0 
L 45.21875 20.21875 
L 30.90625 20.21875 
L 25.875 0 
L 18.015625 0 
L 23.09375 20.21875 
L 7.71875 20.21875 
L 7.71875 27.6875 
L 24.90625 27.6875 
L 29 44 
L 13.28125 44 
L 13.28125 51.515625 
L 30.90625 51.515625 
L 35.890625 71.78125 
z
&quot; id=&quot;DejaVuSans-35&quot; /&gt;
       &lt;path d=&quot;M -0.296875 72.90625 
L 61.375 72.90625 
L 61.375 64.59375 
L 35.5 64.59375 
L 35.5 0 
L 25.59375 0 
L 25.59375 64.59375 
L -0.296875 64.59375 
z
&quot; id=&quot;DejaVuSans-84&quot; /&gt;
       &lt;path d=&quot;M 30.609375 48.390625 
Q 23.390625 48.390625 19.1875 42.75 
Q 14.984375 37.109375 14.984375 27.296875 
Q 14.984375 17.484375 19.15625 11.84375 
Q 23.34375 6.203125 30.609375 6.203125 
Q 37.796875 6.203125 41.984375 11.859375 
Q 46.1875 17.53125 46.1875 27.296875 
Q 46.1875 37.015625 41.984375 42.703125 
Q 37.796875 48.390625 30.609375 48.390625 
z
M 30.609375 56 
Q 42.328125 56 49.015625 48.375 
Q 55.71875 40.765625 55.71875 27.296875 
Q 55.71875 13.875 49.015625 6.21875 
Q 42.328125 -1.421875 30.609375 -1.421875 
Q 18.84375 -1.421875 12.171875 6.21875 
Q 5.515625 13.875 5.515625 27.296875 
Q 5.515625 40.765625 12.171875 48.375 
Q 18.84375 56 30.609375 56 
z
&quot; id=&quot;DejaVuSans-111&quot; /&gt;
       &lt;path d=&quot;M 9.078125 75.984375 
L 18.109375 75.984375 
L 18.109375 31.109375 
L 44.921875 54.6875 
L 56.390625 54.6875 
L 27.390625 29.109375 
L 57.625 0 
L 45.90625 0 
L 18.109375 26.703125 
L 18.109375 0 
L 9.078125 0 
z
&quot; id=&quot;DejaVuSans-107&quot; /&gt;
       &lt;path d=&quot;M 56.203125 29.59375 
L 56.203125 25.203125 
L 14.890625 25.203125 
Q 15.484375 15.921875 20.484375 11.0625 
Q 25.484375 6.203125 34.421875 6.203125 
Q 39.59375 6.203125 44.453125 7.46875 
Q 49.3125 8.734375 54.109375 11.28125 
L 54.109375 2.78125 
Q 49.265625 0.734375 44.1875 -0.34375 
Q 39.109375 -1.421875 33.890625 -1.421875 
Q 20.796875 -1.421875 13.15625 6.1875 
Q 5.515625 13.8125 5.515625 26.8125 
Q 5.515625 40.234375 12.765625 48.109375 
Q 20.015625 56 32.328125 56 
Q 43.359375 56 49.78125 48.890625 
Q 56.203125 41.796875 56.203125 29.59375 
z
M 47.21875 32.234375 
Q 47.125 39.59375 43.09375 43.984375 
Q 39.0625 48.390625 32.421875 48.390625 
Q 24.90625 48.390625 20.390625 44.140625 
Q 15.875 39.890625 15.1875 32.171875 
z
&quot; id=&quot;DejaVuSans-101&quot; /&gt;
       &lt;path d=&quot;M 54.890625 33.015625 
L 54.890625 0 
L 45.90625 0 
L 45.90625 32.71875 
Q 45.90625 40.484375 42.875 44.328125 
Q 39.84375 48.1875 33.796875 48.1875 
Q 26.515625 48.1875 22.3125 43.546875 
Q 18.109375 38.921875 18.109375 30.90625 
L 18.109375 0 
L 9.078125 0 
L 9.078125 54.6875 
L 18.109375 54.6875 
L 18.109375 46.1875 
Q 21.34375 51.125 25.703125 53.5625 
Q 30.078125 56 35.796875 56 
Q 45.21875 56 50.046875 50.171875 
Q 54.890625 44.34375 54.890625 33.015625 
z
&quot; id=&quot;DejaVuSans-110&quot; /&gt;
       &lt;path d=&quot;M 44.28125 53.078125 
L 44.28125 44.578125 
Q 40.484375 46.53125 36.375 47.5 
Q 32.28125 48.484375 27.875 48.484375 
Q 21.1875 48.484375 17.84375 46.4375 
Q 14.5 44.390625 14.5 40.28125 
Q 14.5 37.15625 16.890625 35.375 
Q 19.28125 33.59375 26.515625 31.984375 
L 29.59375 31.296875 
Q 39.15625 29.25 43.1875 25.515625 
Q 47.21875 21.78125 47.21875 15.09375 
Q 47.21875 7.46875 41.1875 3.015625 
Q 35.15625 -1.421875 24.609375 -1.421875 
Q 20.21875 -1.421875 15.453125 -0.5625 
Q 10.6875 0.296875 5.421875 2 
L 5.421875 11.28125 
Q 10.40625 8.6875 15.234375 7.390625 
Q 20.0625 6.109375 24.8125 6.109375 
Q 31.15625 6.109375 34.5625 8.28125 
Q 37.984375 10.453125 37.984375 14.40625 
Q 37.984375 18.0625 35.515625 20.015625 
Q 33.0625 21.96875 24.703125 23.78125 
L 21.578125 24.515625 
Q 13.234375 26.265625 9.515625 29.90625 
Q 5.8125 33.546875 5.8125 39.890625 
Q 5.8125 47.609375 11.28125 51.796875 
Q 16.75 56 26.8125 56 
Q 31.78125 56 36.171875 55.265625 
Q 40.578125 54.546875 44.28125 53.078125 
z
&quot; id=&quot;DejaVuSans-115&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(112.140082 270.316563)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-35&quot; /&gt;
       &lt;use x=&quot;83.789062&quot; xlink:href=&quot;#DejaVuSans-84&quot; /&gt;
       &lt;use x=&quot;127.873047&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
       &lt;use x=&quot;189.054688&quot; xlink:href=&quot;#DejaVuSans-107&quot; /&gt;
       &lt;use x=&quot;243.339844&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
       &lt;use x=&quot;304.863281&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
       &lt;use x=&quot;368.242188&quot; xlink:href=&quot;#DejaVuSans-115&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;xtick_2&quot;&gt;
     &lt;g id=&quot;line2d_2&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;331.298981&quot; xlink:href=&quot;#m142415d3cc&quot; y=&quot;255.718125&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_2&quot;&gt;
      &lt;!-- #Unique Tokens --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 8.6875 72.90625 
L 18.609375 72.90625 
L 18.609375 28.609375 
Q 18.609375 16.890625 22.84375 11.734375 
Q 27.09375 6.59375 36.625 6.59375 
Q 46.09375 6.59375 50.34375 11.734375 
Q 54.59375 16.890625 54.59375 28.609375 
L 54.59375 72.90625 
L 64.5 72.90625 
L 64.5 27.390625 
Q 64.5 13.140625 57.4375 5.859375 
Q 50.390625 -1.421875 36.625 -1.421875 
Q 22.796875 -1.421875 15.734375 5.859375 
Q 8.6875 13.140625 8.6875 27.390625 
z
&quot; id=&quot;DejaVuSans-85&quot; /&gt;
       &lt;path d=&quot;M 9.421875 54.6875 
L 18.40625 54.6875 
L 18.40625 0 
L 9.421875 0 
z
M 9.421875 75.984375 
L 18.40625 75.984375 
L 18.40625 64.59375 
L 9.421875 64.59375 
z
&quot; id=&quot;DejaVuSans-105&quot; /&gt;
       &lt;path d=&quot;M 14.796875 27.296875 
Q 14.796875 17.390625 18.875 11.75 
Q 22.953125 6.109375 30.078125 6.109375 
Q 37.203125 6.109375 41.296875 11.75 
Q 45.40625 17.390625 45.40625 27.296875 
Q 45.40625 37.203125 41.296875 42.84375 
Q 37.203125 48.484375 30.078125 48.484375 
Q 22.953125 48.484375 18.875 42.84375 
Q 14.796875 37.203125 14.796875 27.296875 
z
M 45.40625 8.203125 
Q 42.578125 3.328125 38.25 0.953125 
Q 33.9375 -1.421875 27.875 -1.421875 
Q 17.96875 -1.421875 11.734375 6.484375 
Q 5.515625 14.40625 5.515625 27.296875 
Q 5.515625 40.1875 11.734375 48.09375 
Q 17.96875 56 27.875 56 
Q 33.9375 56 38.25 53.625 
Q 42.578125 51.265625 45.40625 46.390625 
L 45.40625 54.6875 
L 54.390625 54.6875 
L 54.390625 -20.796875 
L 45.40625 -20.796875 
z
&quot; id=&quot;DejaVuSans-113&quot; /&gt;
       &lt;path d=&quot;M 8.5 21.578125 
L 8.5 54.6875 
L 17.484375 54.6875 
L 17.484375 21.921875 
Q 17.484375 14.15625 20.5 10.265625 
Q 23.53125 6.390625 29.59375 6.390625 
Q 36.859375 6.390625 41.078125 11.03125 
Q 45.3125 15.671875 45.3125 23.6875 
L 45.3125 54.6875 
L 54.296875 54.6875 
L 54.296875 0 
L 45.3125 0 
L 45.3125 8.40625 
Q 42.046875 3.421875 37.71875 1 
Q 33.40625 -1.421875 27.6875 -1.421875 
Q 18.265625 -1.421875 13.375 4.4375 
Q 8.5 10.296875 8.5 21.578125 
z
M 31.109375 56 
z
&quot; id=&quot;DejaVuSans-117&quot; /&gt;
       &lt;path id=&quot;DejaVuSans-32&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(291.056012 270.316563)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-35&quot; /&gt;
       &lt;use x=&quot;83.789062&quot; xlink:href=&quot;#DejaVuSans-85&quot; /&gt;
       &lt;use x=&quot;156.982422&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
       &lt;use x=&quot;220.361328&quot; xlink:href=&quot;#DejaVuSans-105&quot; /&gt;
       &lt;use x=&quot;248.144531&quot; xlink:href=&quot;#DejaVuSans-113&quot; /&gt;
       &lt;use x=&quot;311.621094&quot; xlink:href=&quot;#DejaVuSans-117&quot; /&gt;
       &lt;use x=&quot;375&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
       &lt;use x=&quot;436.523438&quot; xlink:href=&quot;#DejaVuSans-32&quot; /&gt;
       &lt;use x=&quot;468.310547&quot; xlink:href=&quot;#DejaVuSans-84&quot; /&gt;
       &lt;use x=&quot;512.394531&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
       &lt;use x=&quot;573.576172&quot; xlink:href=&quot;#DejaVuSans-107&quot; /&gt;
       &lt;use x=&quot;627.861328&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
       &lt;use x=&quot;689.384766&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
       &lt;use x=&quot;752.763672&quot; xlink:href=&quot;#DejaVuSans-115&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
   &lt;/g&gt;
   &lt;g id=&quot;matplotlib.axis_2&quot;&gt;
    &lt;g id=&quot;ytick_1&quot;&gt;
     &lt;g id=&quot;line2d_3&quot;&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 0 0 
L -3.5 0 
&quot; id=&quot;mc9e918930c&quot; style=&quot;stroke:#000000;stroke-width:0.8;&quot; /&gt;
      &lt;/defs&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#mc9e918930c&quot; y=&quot;255.718125&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_3&quot;&gt;
      &lt;!-- 0 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 31.78125 66.40625 
Q 24.171875 66.40625 20.328125 58.90625 
Q 16.5 51.421875 16.5 36.375 
Q 16.5 21.390625 20.328125 13.890625 
Q 24.171875 6.390625 31.78125 6.390625 
Q 39.453125 6.390625 43.28125 13.890625 
Q 47.125 21.390625 47.125 36.375 
Q 47.125 51.421875 43.28125 58.90625 
Q 39.453125 66.40625 31.78125 66.40625 
z
M 31.78125 74.21875 
Q 44.046875 74.21875 50.515625 64.515625 
Q 56.984375 54.828125 56.984375 36.375 
Q 56.984375 17.96875 50.515625 8.265625 
Q 44.046875 -1.421875 31.78125 -1.421875 
Q 19.53125 -1.421875 13.0625 8.265625 
Q 6.59375 17.96875 6.59375 36.375 
Q 6.59375 54.828125 13.0625 64.515625 
Q 19.53125 74.21875 31.78125 74.21875 
z
&quot; id=&quot;DejaVuSans-48&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(33.603125 259.517344)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_2&quot;&gt;
     &lt;g id=&quot;line2d_4&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#mc9e918930c&quot; y=&quot;224.542008&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_4&quot;&gt;
      &lt;!-- 100 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 12.40625 8.296875 
L 28.515625 8.296875 
L 28.515625 63.921875 
L 10.984375 60.40625 
L 10.984375 69.390625 
L 28.421875 72.90625 
L 38.28125 72.90625 
L 38.28125 8.296875 
L 54.390625 8.296875 
L 54.390625 0 
L 12.40625 0 
z
&quot; id=&quot;DejaVuSans-49&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 228.341227)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-49&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_3&quot;&gt;
     &lt;g id=&quot;line2d_5&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#mc9e918930c&quot; y=&quot;193.365891&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_5&quot;&gt;
      &lt;!-- 200 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 19.1875 8.296875 
L 53.609375 8.296875 
L 53.609375 0 
L 7.328125 0 
L 7.328125 8.296875 
Q 12.9375 14.109375 22.625 23.890625 
Q 32.328125 33.6875 34.8125 36.53125 
Q 39.546875 41.84375 41.421875 45.53125 
Q 43.3125 49.21875 43.3125 52.78125 
Q 43.3125 58.59375 39.234375 62.25 
Q 35.15625 65.921875 28.609375 65.921875 
Q 23.96875 65.921875 18.8125 64.3125 
Q 13.671875 62.703125 7.8125 59.421875 
L 7.8125 69.390625 
Q 13.765625 71.78125 18.9375 73 
Q 24.125 74.21875 28.421875 74.21875 
Q 39.75 74.21875 46.484375 68.546875 
Q 53.21875 62.890625 53.21875 53.421875 
Q 53.21875 48.921875 51.53125 44.890625 
Q 49.859375 40.875 45.40625 35.40625 
Q 44.1875 33.984375 37.640625 27.21875 
Q 31.109375 20.453125 19.1875 8.296875 
z
&quot; id=&quot;DejaVuSans-50&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 197.16511)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-50&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_4&quot;&gt;
     &lt;g id=&quot;line2d_6&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#mc9e918930c&quot; y=&quot;162.189774&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_6&quot;&gt;
      &lt;!-- 300 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 40.578125 39.3125 
Q 47.65625 37.796875 51.625 33 
Q 55.609375 28.21875 55.609375 21.1875 
Q 55.609375 10.40625 48.1875 4.484375 
Q 40.765625 -1.421875 27.09375 -1.421875 
Q 22.515625 -1.421875 17.65625 -0.515625 
Q 12.796875 0.390625 7.625 2.203125 
L 7.625 11.71875 
Q 11.71875 9.328125 16.59375 8.109375 
Q 21.484375 6.890625 26.8125 6.890625 
Q 36.078125 6.890625 40.9375 10.546875 
Q 45.796875 14.203125 45.796875 21.1875 
Q 45.796875 27.640625 41.28125 31.265625 
Q 36.765625 34.90625 28.71875 34.90625 
L 20.21875 34.90625 
L 20.21875 43.015625 
L 29.109375 43.015625 
Q 36.375 43.015625 40.234375 45.921875 
Q 44.09375 48.828125 44.09375 54.296875 
Q 44.09375 59.90625 40.109375 62.90625 
Q 36.140625 65.921875 28.71875 65.921875 
Q 24.65625 65.921875 20.015625 65.03125 
Q 15.375 64.15625 9.8125 62.3125 
L 9.8125 71.09375 
Q 15.4375 72.65625 20.34375 73.4375 
Q 25.25 74.21875 29.59375 74.21875 
Q 40.828125 74.21875 47.359375 69.109375 
Q 53.90625 64.015625 53.90625 55.328125 
Q 53.90625 49.265625 50.4375 45.09375 
Q 46.96875 40.921875 40.578125 39.3125 
z
&quot; id=&quot;DejaVuSans-51&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 165.988993)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-51&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_5&quot;&gt;
     &lt;g id=&quot;line2d_7&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#mc9e918930c&quot; y=&quot;131.013657&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_7&quot;&gt;
      &lt;!-- 400 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 37.796875 64.3125 
L 12.890625 25.390625 
L 37.796875 25.390625 
z
M 35.203125 72.90625 
L 47.609375 72.90625 
L 47.609375 25.390625 
L 58.015625 25.390625 
L 58.015625 17.1875 
L 47.609375 17.1875 
L 47.609375 0 
L 37.796875 0 
L 37.796875 17.1875 
L 4.890625 17.1875 
L 4.890625 26.703125 
z
&quot; id=&quot;DejaVuSans-52&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 134.812876)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-52&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_6&quot;&gt;
     &lt;g id=&quot;line2d_8&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#mc9e918930c&quot; y=&quot;99.83754&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_8&quot;&gt;
      &lt;!-- 500 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 10.796875 72.90625 
L 49.515625 72.90625 
L 49.515625 64.59375 
L 19.828125 64.59375 
L 19.828125 46.734375 
Q 21.96875 47.46875 24.109375 47.828125 
Q 26.265625 48.1875 28.421875 48.1875 
Q 40.625 48.1875 47.75 41.5 
Q 54.890625 34.8125 54.890625 23.390625 
Q 54.890625 11.625 47.5625 5.09375 
Q 40.234375 -1.421875 26.90625 -1.421875 
Q 22.3125 -1.421875 17.546875 -0.640625 
Q 12.796875 0.140625 7.71875 1.703125 
L 7.71875 11.625 
Q 12.109375 9.234375 16.796875 8.0625 
Q 21.484375 6.890625 26.703125 6.890625 
Q 35.15625 6.890625 40.078125 11.328125 
Q 45.015625 15.765625 45.015625 23.390625 
Q 45.015625 31 40.078125 35.4375 
Q 35.15625 39.890625 26.703125 39.890625 
Q 22.75 39.890625 18.8125 39.015625 
Q 14.890625 38.140625 10.796875 36.28125 
z
&quot; id=&quot;DejaVuSans-53&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 103.636759)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-53&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_7&quot;&gt;
     &lt;g id=&quot;line2d_9&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#mc9e918930c&quot; y=&quot;68.661423&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_9&quot;&gt;
      &lt;!-- 600 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 33.015625 40.375 
Q 26.375 40.375 22.484375 35.828125 
Q 18.609375 31.296875 18.609375 23.390625 
Q 18.609375 15.53125 22.484375 10.953125 
Q 26.375 6.390625 33.015625 6.390625 
Q 39.65625 6.390625 43.53125 10.953125 
Q 47.40625 15.53125 47.40625 23.390625 
Q 47.40625 31.296875 43.53125 35.828125 
Q 39.65625 40.375 33.015625 40.375 
z
M 52.59375 71.296875 
L 52.59375 62.3125 
Q 48.875 64.0625 45.09375 64.984375 
Q 41.3125 65.921875 37.59375 65.921875 
Q 27.828125 65.921875 22.671875 59.328125 
Q 17.53125 52.734375 16.796875 39.40625 
Q 19.671875 43.65625 24.015625 45.921875 
Q 28.375 48.1875 33.59375 48.1875 
Q 44.578125 48.1875 50.953125 41.515625 
Q 57.328125 34.859375 57.328125 23.390625 
Q 57.328125 12.15625 50.6875 5.359375 
Q 44.046875 -1.421875 33.015625 -1.421875 
Q 20.359375 -1.421875 13.671875 8.265625 
Q 6.984375 17.96875 6.984375 36.375 
Q 6.984375 53.65625 15.1875 63.9375 
Q 23.390625 74.21875 37.203125 74.21875 
Q 40.921875 74.21875 44.703125 73.484375 
Q 48.484375 72.75 52.59375 71.296875 
z
&quot; id=&quot;DejaVuSans-54&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 72.460642)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-54&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_8&quot;&gt;
     &lt;g id=&quot;line2d_10&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#mc9e918930c&quot; y=&quot;37.485306&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_10&quot;&gt;
      &lt;!-- 700 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 8.203125 72.90625 
L 55.078125 72.90625 
L 55.078125 68.703125 
L 28.609375 0 
L 18.3125 0 
L 43.21875 64.59375 
L 8.203125 64.59375 
z
&quot; id=&quot;DejaVuSans-55&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 41.284525)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-55&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;text_11&quot;&gt;
     &lt;!-- Tokens --&gt;
     &lt;g transform=&quot;translate(14.798438 155.845469)rotate(-90)scale(0.1 -0.1)&quot;&gt;
      &lt;use xlink:href=&quot;#DejaVuSans-84&quot; /&gt;
      &lt;use x=&quot;44.083984&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
      &lt;use x=&quot;105.265625&quot; xlink:href=&quot;#DejaVuSans-107&quot; /&gt;
      &lt;use x=&quot;159.550781&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
      &lt;use x=&quot;221.074219&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
      &lt;use x=&quot;284.453125&quot; xlink:href=&quot;#DejaVuSans-115&quot; /&gt;
     &lt;/g&gt;
    &lt;/g&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_7&quot;&gt;
    &lt;path d=&quot;M 46.965625 255.718125 
L 46.965625 22.318125 
&quot; style=&quot;fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_8&quot;&gt;
    &lt;path d=&quot;M 417.490625 255.718125 
L 417.490625 22.318125 
&quot; style=&quot;fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_9&quot;&gt;
    &lt;path d=&quot;M 46.965625 255.718125 
L 417.490625 255.718125 
&quot; style=&quot;fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_10&quot;&gt;
    &lt;path d=&quot;M 46.965625 22.318125 
L 417.490625 22.318125 
&quot; style=&quot;fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;text_12&quot;&gt;
    &lt;!-- Tokens before and after --&gt;
    &lt;defs&gt;
     &lt;path d=&quot;M 48.6875 27.296875 
Q 48.6875 37.203125 44.609375 42.84375 
Q 40.53125 48.484375 33.40625 48.484375 
Q 26.265625 48.484375 22.1875 42.84375 
Q 18.109375 37.203125 18.109375 27.296875 
Q 18.109375 17.390625 22.1875 11.75 
Q 26.265625 6.109375 33.40625 6.109375 
Q 40.53125 6.109375 44.609375 11.75 
Q 48.6875 17.390625 48.6875 27.296875 
z
M 18.109375 46.390625 
Q 20.953125 51.265625 25.265625 53.625 
Q 29.59375 56 35.59375 56 
Q 45.5625 56 51.78125 48.09375 
Q 58.015625 40.1875 58.015625 27.296875 
Q 58.015625 14.40625 51.78125 6.484375 
Q 45.5625 -1.421875 35.59375 -1.421875 
Q 29.59375 -1.421875 25.265625 0.953125 
Q 20.953125 3.328125 18.109375 8.203125 
L 18.109375 0 
L 9.078125 0 
L 9.078125 75.984375 
L 18.109375 75.984375 
z
&quot; id=&quot;DejaVuSans-98&quot; /&gt;
     &lt;path d=&quot;M 37.109375 75.984375 
L 37.109375 68.5 
L 28.515625 68.5 
Q 23.6875 68.5 21.796875 66.546875 
Q 19.921875 64.59375 19.921875 59.515625 
L 19.921875 54.6875 
L 34.71875 54.6875 
L 34.71875 47.703125 
L 19.921875 47.703125 
L 19.921875 0 
L 10.890625 0 
L 10.890625 47.703125 
L 2.296875 47.703125 
L 2.296875 54.6875 
L 10.890625 54.6875 
L 10.890625 58.5 
Q 10.890625 67.625 15.140625 71.796875 
Q 19.390625 75.984375 28.609375 75.984375 
z
&quot; id=&quot;DejaVuSans-102&quot; /&gt;
     &lt;path d=&quot;M 41.109375 46.296875 
Q 39.59375 47.171875 37.8125 47.578125 
Q 36.03125 48 33.890625 48 
Q 26.265625 48 22.1875 43.046875 
Q 18.109375 38.09375 18.109375 28.8125 
L 18.109375 0 
L 9.078125 0 
L 9.078125 54.6875 
L 18.109375 54.6875 
L 18.109375 46.1875 
Q 20.953125 51.171875 25.484375 53.578125 
Q 30.03125 56 36.53125 56 
Q 37.453125 56 38.578125 55.875 
Q 39.703125 55.765625 41.0625 55.515625 
z
&quot; id=&quot;DejaVuSans-114&quot; /&gt;
     &lt;path d=&quot;M 34.28125 27.484375 
Q 23.390625 27.484375 19.1875 25 
Q 14.984375 22.515625 14.984375 16.5 
Q 14.984375 11.71875 18.140625 8.90625 
Q 21.296875 6.109375 26.703125 6.109375 
Q 34.1875 6.109375 38.703125 11.40625 
Q 43.21875 16.703125 43.21875 25.484375 
L 43.21875 27.484375 
z
M 52.203125 31.203125 
L 52.203125 0 
L 43.21875 0 
L 43.21875 8.296875 
Q 40.140625 3.328125 35.546875 0.953125 
Q 30.953125 -1.421875 24.3125 -1.421875 
Q 15.921875 -1.421875 10.953125 3.296875 
Q 6 8.015625 6 15.921875 
Q 6 25.140625 12.171875 29.828125 
Q 18.359375 34.515625 30.609375 34.515625 
L 43.21875 34.515625 
L 43.21875 35.40625 
Q 43.21875 41.609375 39.140625 45 
Q 35.0625 48.390625 27.6875 48.390625 
Q 23 48.390625 18.546875 47.265625 
Q 14.109375 46.140625 10.015625 43.890625 
L 10.015625 52.203125 
Q 14.9375 54.109375 19.578125 55.046875 
Q 24.21875 56 28.609375 56 
Q 40.484375 56 46.34375 49.84375 
Q 52.203125 43.703125 52.203125 31.203125 
z
&quot; id=&quot;DejaVuSans-97&quot; /&gt;
     &lt;path d=&quot;M 45.40625 46.390625 
L 45.40625 75.984375 
L 54.390625 75.984375 
L 54.390625 0 
L 45.40625 0 
L 45.40625 8.203125 
Q 42.578125 3.328125 38.25 0.953125 
Q 33.9375 -1.421875 27.875 -1.421875 
Q 17.96875 -1.421875 11.734375 6.484375 
Q 5.515625 14.40625 5.515625 27.296875 
Q 5.515625 40.1875 11.734375 48.09375 
Q 17.96875 56 27.875 56 
Q 33.9375 56 38.25 53.625 
Q 42.578125 51.265625 45.40625 46.390625 
z
M 14.796875 27.296875 
Q 14.796875 17.390625 18.875 11.75 
Q 22.953125 6.109375 30.078125 6.109375 
Q 37.203125 6.109375 41.296875 11.75 
Q 45.40625 17.390625 45.40625 27.296875 
Q 45.40625 37.203125 41.296875 42.84375 
Q 37.203125 48.484375 30.078125 48.484375 
Q 22.953125 48.484375 18.875 42.84375 
Q 14.796875 37.203125 14.796875 27.296875 
z
&quot; id=&quot;DejaVuSans-100&quot; /&gt;
     &lt;path d=&quot;M 18.3125 70.21875 
L 18.3125 54.6875 
L 36.8125 54.6875 
L 36.8125 47.703125 
L 18.3125 47.703125 
L 18.3125 18.015625 
Q 18.3125 11.328125 20.140625 9.421875 
Q 21.96875 7.515625 27.59375 7.515625 
L 36.8125 7.515625 
L 36.8125 0 
L 27.59375 0 
Q 17.1875 0 13.234375 3.875 
Q 9.28125 7.765625 9.28125 18.015625 
L 9.28125 47.703125 
L 2.6875 47.703125 
L 2.6875 54.6875 
L 9.28125 54.6875 
L 9.28125 70.21875 
z
&quot; id=&quot;DejaVuSans-116&quot; /&gt;
    &lt;/defs&gt;
    &lt;g transform=&quot;translate(161.52375 16.318125)scale(0.12 -0.12)&quot;&gt;
     &lt;use xlink:href=&quot;#DejaVuSans-84&quot; /&gt;
     &lt;use x=&quot;44.083984&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
     &lt;use x=&quot;105.265625&quot; xlink:href=&quot;#DejaVuSans-107&quot; /&gt;
     &lt;use x=&quot;159.550781&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
     &lt;use x=&quot;221.074219&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
     &lt;use x=&quot;284.453125&quot; xlink:href=&quot;#DejaVuSans-115&quot; /&gt;
     &lt;use x=&quot;336.552734&quot; xlink:href=&quot;#DejaVuSans-32&quot; /&gt;
     &lt;use x=&quot;368.339844&quot; xlink:href=&quot;#DejaVuSans-98&quot; /&gt;
     &lt;use x=&quot;431.816406&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
     &lt;use x=&quot;493.339844&quot; xlink:href=&quot;#DejaVuSans-102&quot; /&gt;
     &lt;use x=&quot;528.544922&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
     &lt;use x=&quot;589.726562&quot; xlink:href=&quot;#DejaVuSans-114&quot; /&gt;
     &lt;use x=&quot;628.589844&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
     &lt;use x=&quot;690.113281&quot; xlink:href=&quot;#DejaVuSans-32&quot; /&gt;
     &lt;use x=&quot;721.900391&quot; xlink:href=&quot;#DejaVuSans-97&quot; /&gt;
     &lt;use x=&quot;783.179688&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
     &lt;use x=&quot;846.558594&quot; xlink:href=&quot;#DejaVuSans-100&quot; /&gt;
     &lt;use x=&quot;910.035156&quot; xlink:href=&quot;#DejaVuSans-32&quot; /&gt;
     &lt;use x=&quot;941.822266&quot; xlink:href=&quot;#DejaVuSans-97&quot; /&gt;
     &lt;use x=&quot;1003.101562&quot; xlink:href=&quot;#DejaVuSans-102&quot; /&gt;
     &lt;use x=&quot;1036.556641&quot; xlink:href=&quot;#DejaVuSans-116&quot; /&gt;
     &lt;use x=&quot;1075.765625&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
     &lt;use x=&quot;1137.289062&quot; xlink:href=&quot;#DejaVuSans-114&quot; /&gt;
    &lt;/g&gt;
   &lt;/g&gt;
   &lt;g id=&quot;legend_1&quot;&gt;
    &lt;g id=&quot;patch_11&quot;&gt;
     &lt;path d=&quot;M 345.798437 59.674375 
L 410.490625 59.674375 
Q 412.490625 59.674375 412.490625 57.674375 
L 412.490625 29.318125 
Q 412.490625 27.318125 410.490625 27.318125 
L 345.798437 27.318125 
Q 343.798437 27.318125 343.798437 29.318125 
L 343.798437 57.674375 
Q 343.798437 59.674375 345.798437 59.674375 
z
&quot; style=&quot;fill:#ffffff;opacity:0.8;stroke:#cccccc;stroke-linejoin:miter;&quot; /&gt;
    &lt;/g&gt;
    &lt;g id=&quot;patch_12&quot;&gt;
     &lt;path d=&quot;M 347.798437 38.916562 
L 367.798437 38.916562 
L 367.798437 31.916562 
L 347.798437 31.916562 
z
&quot; style=&quot;fill:#1f77b4;&quot; /&gt;
    &lt;/g&gt;
    &lt;g id=&quot;text_13&quot;&gt;
     &lt;!-- Before --&gt;
     &lt;defs&gt;
      &lt;path d=&quot;M 19.671875 34.8125 
L 19.671875 8.109375 
L 35.5 8.109375 
Q 43.453125 8.109375 47.28125 11.40625 
Q 51.125 14.703125 51.125 21.484375 
Q 51.125 28.328125 47.28125 31.5625 
Q 43.453125 34.8125 35.5 34.8125 
z
M 19.671875 64.796875 
L 19.671875 42.828125 
L 34.28125 42.828125 
Q 41.5 42.828125 45.03125 45.53125 
Q 48.578125 48.25 48.578125 53.8125 
Q 48.578125 59.328125 45.03125 62.0625 
Q 41.5 64.796875 34.28125 64.796875 
z
M 9.8125 72.90625 
L 35.015625 72.90625 
Q 46.296875 72.90625 52.390625 68.21875 
Q 58.5 63.53125 58.5 54.890625 
Q 58.5 48.1875 55.375 44.234375 
Q 52.25 40.28125 46.1875 39.3125 
Q 53.46875 37.75 57.5 32.78125 
Q 61.53125 27.828125 61.53125 20.40625 
Q 61.53125 10.640625 54.890625 5.3125 
Q 48.25 0 35.984375 0 
L 9.8125 0 
z
&quot; id=&quot;DejaVuSans-66&quot; /&gt;
     &lt;/defs&gt;
     &lt;g transform=&quot;translate(375.798437 38.916562)scale(0.1 -0.1)&quot;&gt;
      &lt;use xlink:href=&quot;#DejaVuSans-66&quot; /&gt;
      &lt;use x=&quot;68.603516&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
      &lt;use x=&quot;130.126953&quot; xlink:href=&quot;#DejaVuSans-102&quot; /&gt;
      &lt;use x=&quot;165.332031&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
      &lt;use x=&quot;226.513672&quot; xlink:href=&quot;#DejaVuSans-114&quot; /&gt;
      &lt;use x=&quot;265.376953&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;patch_13&quot;&gt;
     &lt;path d=&quot;M 347.798437 53.594687 
L 367.798437 53.594687 
L 367.798437 46.594687 
L 347.798437 46.594687 
z
&quot; style=&quot;fill:#ff7f0e;&quot; /&gt;
    &lt;/g&gt;
    &lt;g id=&quot;text_14&quot;&gt;
     &lt;!-- After --&gt;
     &lt;defs&gt;
      &lt;path d=&quot;M 34.1875 63.1875 
L 20.796875 26.90625 
L 47.609375 26.90625 
z
M 28.609375 72.90625 
L 39.796875 72.90625 
L 67.578125 0 
L 57.328125 0 
L 50.6875 18.703125 
L 17.828125 18.703125 
L 11.1875 0 
L 0.78125 0 
z
&quot; id=&quot;DejaVuSans-65&quot; /&gt;
     &lt;/defs&gt;
     &lt;g transform=&quot;translate(375.798437 53.594687)scale(0.1 -0.1)&quot;&gt;
      &lt;use xlink:href=&quot;#DejaVuSans-65&quot; /&gt;
      &lt;use x=&quot;64.783203&quot; xlink:href=&quot;#DejaVuSans-102&quot; /&gt;
      &lt;use x=&quot;98.238281&quot; xlink:href=&quot;#DejaVuSans-116&quot; /&gt;
      &lt;use x=&quot;137.447266&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
      &lt;use x=&quot;198.970703&quot; xlink:href=&quot;#DejaVuSans-114&quot; /&gt;
     &lt;/g&gt;
    &lt;/g&gt;
   &lt;/g&gt;
  &lt;/g&gt;
 &lt;/g&gt;
 &lt;defs&gt;
  &lt;clipPath id=&quot;pcf4f1f332e&quot;&gt;
   &lt;rect height=&quot;233.4&quot; width=&quot;370.525&quot; x=&quot;46.965625&quot; y=&quot;22.318125&quot; /&gt;
  &lt;/clipPath&gt;
 &lt;/defs&gt;
&lt;/svg&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;The expectations set up has been achieved and we can clearly see that the raw number of tokens grew while the unique token count shrinked.&lt;br /&gt;
Applying lower-case to the text will further reduce the number of unique tokens, and obviously keep the number of tokens at the same count.&lt;/p&gt;
&lt;p&gt;Let's add lower-casing and see what happens!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lowercase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;preprocess_funcs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lowercase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stanza_tokenize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test_dimensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preprocessing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preprocess_funcs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Previously: 629 tokens (289 unique)
Post: 712 tokens (260 unique)
Token reduction by ~10.0 %
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_area&quot;&gt;


&lt;div class=&quot;output_svg output_subarea &quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;no&quot;?&gt;
&amp;lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot;
  &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&amp;gt;
&lt;!-- Created with matplotlib (https://matplotlib.org/) --&gt;
&lt;svg height=&quot;279.59625pt&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 424.690625 279.59625&quot; width=&quot;424.690625pt&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;
 &lt;defs&gt;
  &lt;style type=&quot;text/css&quot;&gt;
*{stroke-linecap:butt;stroke-linejoin:round;}
  &lt;/style&gt;
 &lt;/defs&gt;
 &lt;g id=&quot;figure_1&quot;&gt;
  &lt;g id=&quot;patch_1&quot;&gt;
   &lt;path d=&quot;M -0 279.59625 
L 424.690625 279.59625 
L 424.690625 0 
L -0 0 
z
&quot; style=&quot;fill:none;&quot; /&gt;
  &lt;/g&gt;
  &lt;g id=&quot;axes_1&quot;&gt;
   &lt;g id=&quot;patch_2&quot;&gt;
    &lt;path d=&quot;M 46.965625 255.718125 
L 417.490625 255.718125 
L 417.490625 22.318125 
L 46.965625 22.318125 
z
&quot; style=&quot;fill:#ffffff;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_3&quot;&gt;
    &lt;path clip-path=&quot;url(#p2e43525c47)&quot; d=&quot;M 63.80767 255.718125 
L 133.157269 255.718125 
L 133.157269 59.344931 
L 63.80767 59.344931 
z
&quot; style=&quot;fill:#1f77b4;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_4&quot;&gt;
    &lt;path clip-path=&quot;url(#p2e43525c47)&quot; d=&quot;M 261.949382 255.718125 
L 331.298981 255.718125 
L 331.298981 165.492603 
L 261.949382 165.492603 
z
&quot; style=&quot;fill:#1f77b4;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_5&quot;&gt;
    &lt;path clip-path=&quot;url(#p2e43525c47)&quot; d=&quot;M 133.157269 255.718125 
L 202.506868 255.718125 
L 202.506868 33.432411 
L 133.157269 33.432411 
z
&quot; style=&quot;fill:#ff7f0e;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_6&quot;&gt;
    &lt;path clip-path=&quot;url(#p2e43525c47)&quot; d=&quot;M 331.298981 255.718125 
L 400.64858 255.718125 
L 400.64858 174.546375 
L 331.298981 174.546375 
z
&quot; style=&quot;fill:#ff7f0e;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;matplotlib.axis_1&quot;&gt;
    &lt;g id=&quot;xtick_1&quot;&gt;
     &lt;g id=&quot;line2d_1&quot;&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 0 0 
L 0 3.5 
&quot; id=&quot;m61aa9f46c5&quot; style=&quot;stroke:#000000;stroke-width:0.8;&quot; /&gt;
      &lt;/defs&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;133.157269&quot; xlink:href=&quot;#m61aa9f46c5&quot; y=&quot;255.718125&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_1&quot;&gt;
      &lt;!-- #Tokens --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 51.125 44 
L 36.921875 44 
L 32.8125 27.6875 
L 47.125 27.6875 
z
M 43.796875 71.78125 
L 38.71875 51.515625 
L 52.984375 51.515625 
L 58.109375 71.78125 
L 65.921875 71.78125 
L 60.890625 51.515625 
L 76.125 51.515625 
L 76.125 44 
L 58.984375 44 
L 54.984375 27.6875 
L 70.515625 27.6875 
L 70.515625 20.21875 
L 53.078125 20.21875 
L 48 0 
L 40.1875 0 
L 45.21875 20.21875 
L 30.90625 20.21875 
L 25.875 0 
L 18.015625 0 
L 23.09375 20.21875 
L 7.71875 20.21875 
L 7.71875 27.6875 
L 24.90625 27.6875 
L 29 44 
L 13.28125 44 
L 13.28125 51.515625 
L 30.90625 51.515625 
L 35.890625 71.78125 
z
&quot; id=&quot;DejaVuSans-35&quot; /&gt;
       &lt;path d=&quot;M -0.296875 72.90625 
L 61.375 72.90625 
L 61.375 64.59375 
L 35.5 64.59375 
L 35.5 0 
L 25.59375 0 
L 25.59375 64.59375 
L -0.296875 64.59375 
z
&quot; id=&quot;DejaVuSans-84&quot; /&gt;
       &lt;path d=&quot;M 30.609375 48.390625 
Q 23.390625 48.390625 19.1875 42.75 
Q 14.984375 37.109375 14.984375 27.296875 
Q 14.984375 17.484375 19.15625 11.84375 
Q 23.34375 6.203125 30.609375 6.203125 
Q 37.796875 6.203125 41.984375 11.859375 
Q 46.1875 17.53125 46.1875 27.296875 
Q 46.1875 37.015625 41.984375 42.703125 
Q 37.796875 48.390625 30.609375 48.390625 
z
M 30.609375 56 
Q 42.328125 56 49.015625 48.375 
Q 55.71875 40.765625 55.71875 27.296875 
Q 55.71875 13.875 49.015625 6.21875 
Q 42.328125 -1.421875 30.609375 -1.421875 
Q 18.84375 -1.421875 12.171875 6.21875 
Q 5.515625 13.875 5.515625 27.296875 
Q 5.515625 40.765625 12.171875 48.375 
Q 18.84375 56 30.609375 56 
z
&quot; id=&quot;DejaVuSans-111&quot; /&gt;
       &lt;path d=&quot;M 9.078125 75.984375 
L 18.109375 75.984375 
L 18.109375 31.109375 
L 44.921875 54.6875 
L 56.390625 54.6875 
L 27.390625 29.109375 
L 57.625 0 
L 45.90625 0 
L 18.109375 26.703125 
L 18.109375 0 
L 9.078125 0 
z
&quot; id=&quot;DejaVuSans-107&quot; /&gt;
       &lt;path d=&quot;M 56.203125 29.59375 
L 56.203125 25.203125 
L 14.890625 25.203125 
Q 15.484375 15.921875 20.484375 11.0625 
Q 25.484375 6.203125 34.421875 6.203125 
Q 39.59375 6.203125 44.453125 7.46875 
Q 49.3125 8.734375 54.109375 11.28125 
L 54.109375 2.78125 
Q 49.265625 0.734375 44.1875 -0.34375 
Q 39.109375 -1.421875 33.890625 -1.421875 
Q 20.796875 -1.421875 13.15625 6.1875 
Q 5.515625 13.8125 5.515625 26.8125 
Q 5.515625 40.234375 12.765625 48.109375 
Q 20.015625 56 32.328125 56 
Q 43.359375 56 49.78125 48.890625 
Q 56.203125 41.796875 56.203125 29.59375 
z
M 47.21875 32.234375 
Q 47.125 39.59375 43.09375 43.984375 
Q 39.0625 48.390625 32.421875 48.390625 
Q 24.90625 48.390625 20.390625 44.140625 
Q 15.875 39.890625 15.1875 32.171875 
z
&quot; id=&quot;DejaVuSans-101&quot; /&gt;
       &lt;path d=&quot;M 54.890625 33.015625 
L 54.890625 0 
L 45.90625 0 
L 45.90625 32.71875 
Q 45.90625 40.484375 42.875 44.328125 
Q 39.84375 48.1875 33.796875 48.1875 
Q 26.515625 48.1875 22.3125 43.546875 
Q 18.109375 38.921875 18.109375 30.90625 
L 18.109375 0 
L 9.078125 0 
L 9.078125 54.6875 
L 18.109375 54.6875 
L 18.109375 46.1875 
Q 21.34375 51.125 25.703125 53.5625 
Q 30.078125 56 35.796875 56 
Q 45.21875 56 50.046875 50.171875 
Q 54.890625 44.34375 54.890625 33.015625 
z
&quot; id=&quot;DejaVuSans-110&quot; /&gt;
       &lt;path d=&quot;M 44.28125 53.078125 
L 44.28125 44.578125 
Q 40.484375 46.53125 36.375 47.5 
Q 32.28125 48.484375 27.875 48.484375 
Q 21.1875 48.484375 17.84375 46.4375 
Q 14.5 44.390625 14.5 40.28125 
Q 14.5 37.15625 16.890625 35.375 
Q 19.28125 33.59375 26.515625 31.984375 
L 29.59375 31.296875 
Q 39.15625 29.25 43.1875 25.515625 
Q 47.21875 21.78125 47.21875 15.09375 
Q 47.21875 7.46875 41.1875 3.015625 
Q 35.15625 -1.421875 24.609375 -1.421875 
Q 20.21875 -1.421875 15.453125 -0.5625 
Q 10.6875 0.296875 5.421875 2 
L 5.421875 11.28125 
Q 10.40625 8.6875 15.234375 7.390625 
Q 20.0625 6.109375 24.8125 6.109375 
Q 31.15625 6.109375 34.5625 8.28125 
Q 37.984375 10.453125 37.984375 14.40625 
Q 37.984375 18.0625 35.515625 20.015625 
Q 33.0625 21.96875 24.703125 23.78125 
L 21.578125 24.515625 
Q 13.234375 26.265625 9.515625 29.90625 
Q 5.8125 33.546875 5.8125 39.890625 
Q 5.8125 47.609375 11.28125 51.796875 
Q 16.75 56 26.8125 56 
Q 31.78125 56 36.171875 55.265625 
Q 40.578125 54.546875 44.28125 53.078125 
z
&quot; id=&quot;DejaVuSans-115&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(112.140082 270.316563)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-35&quot; /&gt;
       &lt;use x=&quot;83.789062&quot; xlink:href=&quot;#DejaVuSans-84&quot; /&gt;
       &lt;use x=&quot;127.873047&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
       &lt;use x=&quot;189.054688&quot; xlink:href=&quot;#DejaVuSans-107&quot; /&gt;
       &lt;use x=&quot;243.339844&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
       &lt;use x=&quot;304.863281&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
       &lt;use x=&quot;368.242188&quot; xlink:href=&quot;#DejaVuSans-115&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;xtick_2&quot;&gt;
     &lt;g id=&quot;line2d_2&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;331.298981&quot; xlink:href=&quot;#m61aa9f46c5&quot; y=&quot;255.718125&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_2&quot;&gt;
      &lt;!-- #Unique Tokens --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 8.6875 72.90625 
L 18.609375 72.90625 
L 18.609375 28.609375 
Q 18.609375 16.890625 22.84375 11.734375 
Q 27.09375 6.59375 36.625 6.59375 
Q 46.09375 6.59375 50.34375 11.734375 
Q 54.59375 16.890625 54.59375 28.609375 
L 54.59375 72.90625 
L 64.5 72.90625 
L 64.5 27.390625 
Q 64.5 13.140625 57.4375 5.859375 
Q 50.390625 -1.421875 36.625 -1.421875 
Q 22.796875 -1.421875 15.734375 5.859375 
Q 8.6875 13.140625 8.6875 27.390625 
z
&quot; id=&quot;DejaVuSans-85&quot; /&gt;
       &lt;path d=&quot;M 9.421875 54.6875 
L 18.40625 54.6875 
L 18.40625 0 
L 9.421875 0 
z
M 9.421875 75.984375 
L 18.40625 75.984375 
L 18.40625 64.59375 
L 9.421875 64.59375 
z
&quot; id=&quot;DejaVuSans-105&quot; /&gt;
       &lt;path d=&quot;M 14.796875 27.296875 
Q 14.796875 17.390625 18.875 11.75 
Q 22.953125 6.109375 30.078125 6.109375 
Q 37.203125 6.109375 41.296875 11.75 
Q 45.40625 17.390625 45.40625 27.296875 
Q 45.40625 37.203125 41.296875 42.84375 
Q 37.203125 48.484375 30.078125 48.484375 
Q 22.953125 48.484375 18.875 42.84375 
Q 14.796875 37.203125 14.796875 27.296875 
z
M 45.40625 8.203125 
Q 42.578125 3.328125 38.25 0.953125 
Q 33.9375 -1.421875 27.875 -1.421875 
Q 17.96875 -1.421875 11.734375 6.484375 
Q 5.515625 14.40625 5.515625 27.296875 
Q 5.515625 40.1875 11.734375 48.09375 
Q 17.96875 56 27.875 56 
Q 33.9375 56 38.25 53.625 
Q 42.578125 51.265625 45.40625 46.390625 
L 45.40625 54.6875 
L 54.390625 54.6875 
L 54.390625 -20.796875 
L 45.40625 -20.796875 
z
&quot; id=&quot;DejaVuSans-113&quot; /&gt;
       &lt;path d=&quot;M 8.5 21.578125 
L 8.5 54.6875 
L 17.484375 54.6875 
L 17.484375 21.921875 
Q 17.484375 14.15625 20.5 10.265625 
Q 23.53125 6.390625 29.59375 6.390625 
Q 36.859375 6.390625 41.078125 11.03125 
Q 45.3125 15.671875 45.3125 23.6875 
L 45.3125 54.6875 
L 54.296875 54.6875 
L 54.296875 0 
L 45.3125 0 
L 45.3125 8.40625 
Q 42.046875 3.421875 37.71875 1 
Q 33.40625 -1.421875 27.6875 -1.421875 
Q 18.265625 -1.421875 13.375 4.4375 
Q 8.5 10.296875 8.5 21.578125 
z
M 31.109375 56 
z
&quot; id=&quot;DejaVuSans-117&quot; /&gt;
       &lt;path id=&quot;DejaVuSans-32&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(291.056012 270.316563)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-35&quot; /&gt;
       &lt;use x=&quot;83.789062&quot; xlink:href=&quot;#DejaVuSans-85&quot; /&gt;
       &lt;use x=&quot;156.982422&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
       &lt;use x=&quot;220.361328&quot; xlink:href=&quot;#DejaVuSans-105&quot; /&gt;
       &lt;use x=&quot;248.144531&quot; xlink:href=&quot;#DejaVuSans-113&quot; /&gt;
       &lt;use x=&quot;311.621094&quot; xlink:href=&quot;#DejaVuSans-117&quot; /&gt;
       &lt;use x=&quot;375&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
       &lt;use x=&quot;436.523438&quot; xlink:href=&quot;#DejaVuSans-32&quot; /&gt;
       &lt;use x=&quot;468.310547&quot; xlink:href=&quot;#DejaVuSans-84&quot; /&gt;
       &lt;use x=&quot;512.394531&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
       &lt;use x=&quot;573.576172&quot; xlink:href=&quot;#DejaVuSans-107&quot; /&gt;
       &lt;use x=&quot;627.861328&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
       &lt;use x=&quot;689.384766&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
       &lt;use x=&quot;752.763672&quot; xlink:href=&quot;#DejaVuSans-115&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
   &lt;/g&gt;
   &lt;g id=&quot;matplotlib.axis_2&quot;&gt;
    &lt;g id=&quot;ytick_1&quot;&gt;
     &lt;g id=&quot;line2d_3&quot;&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 0 0 
L -3.5 0 
&quot; id=&quot;md168fdfda4&quot; style=&quot;stroke:#000000;stroke-width:0.8;&quot; /&gt;
      &lt;/defs&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#md168fdfda4&quot; y=&quot;255.718125&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_3&quot;&gt;
      &lt;!-- 0 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 31.78125 66.40625 
Q 24.171875 66.40625 20.328125 58.90625 
Q 16.5 51.421875 16.5 36.375 
Q 16.5 21.390625 20.328125 13.890625 
Q 24.171875 6.390625 31.78125 6.390625 
Q 39.453125 6.390625 43.28125 13.890625 
Q 47.125 21.390625 47.125 36.375 
Q 47.125 51.421875 43.28125 58.90625 
Q 39.453125 66.40625 31.78125 66.40625 
z
M 31.78125 74.21875 
Q 44.046875 74.21875 50.515625 64.515625 
Q 56.984375 54.828125 56.984375 36.375 
Q 56.984375 17.96875 50.515625 8.265625 
Q 44.046875 -1.421875 31.78125 -1.421875 
Q 19.53125 -1.421875 13.0625 8.265625 
Q 6.59375 17.96875 6.59375 36.375 
Q 6.59375 54.828125 13.0625 64.515625 
Q 19.53125 74.21875 31.78125 74.21875 
z
&quot; id=&quot;DejaVuSans-48&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(33.603125 259.517344)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_2&quot;&gt;
     &lt;g id=&quot;line2d_4&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#md168fdfda4&quot; y=&quot;224.498221&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_4&quot;&gt;
      &lt;!-- 100 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 12.40625 8.296875 
L 28.515625 8.296875 
L 28.515625 63.921875 
L 10.984375 60.40625 
L 10.984375 69.390625 
L 28.421875 72.90625 
L 38.28125 72.90625 
L 38.28125 8.296875 
L 54.390625 8.296875 
L 54.390625 0 
L 12.40625 0 
z
&quot; id=&quot;DejaVuSans-49&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 228.29744)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-49&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_3&quot;&gt;
     &lt;g id=&quot;line2d_5&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#md168fdfda4&quot; y=&quot;193.278318&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_5&quot;&gt;
      &lt;!-- 200 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 19.1875 8.296875 
L 53.609375 8.296875 
L 53.609375 0 
L 7.328125 0 
L 7.328125 8.296875 
Q 12.9375 14.109375 22.625 23.890625 
Q 32.328125 33.6875 34.8125 36.53125 
Q 39.546875 41.84375 41.421875 45.53125 
Q 43.3125 49.21875 43.3125 52.78125 
Q 43.3125 58.59375 39.234375 62.25 
Q 35.15625 65.921875 28.609375 65.921875 
Q 23.96875 65.921875 18.8125 64.3125 
Q 13.671875 62.703125 7.8125 59.421875 
L 7.8125 69.390625 
Q 13.765625 71.78125 18.9375 73 
Q 24.125 74.21875 28.421875 74.21875 
Q 39.75 74.21875 46.484375 68.546875 
Q 53.21875 62.890625 53.21875 53.421875 
Q 53.21875 48.921875 51.53125 44.890625 
Q 49.859375 40.875 45.40625 35.40625 
Q 44.1875 33.984375 37.640625 27.21875 
Q 31.109375 20.453125 19.1875 8.296875 
z
&quot; id=&quot;DejaVuSans-50&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 197.077536)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-50&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_4&quot;&gt;
     &lt;g id=&quot;line2d_6&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#md168fdfda4&quot; y=&quot;162.058414&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_6&quot;&gt;
      &lt;!-- 300 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 40.578125 39.3125 
Q 47.65625 37.796875 51.625 33 
Q 55.609375 28.21875 55.609375 21.1875 
Q 55.609375 10.40625 48.1875 4.484375 
Q 40.765625 -1.421875 27.09375 -1.421875 
Q 22.515625 -1.421875 17.65625 -0.515625 
Q 12.796875 0.390625 7.625 2.203125 
L 7.625 11.71875 
Q 11.71875 9.328125 16.59375 8.109375 
Q 21.484375 6.890625 26.8125 6.890625 
Q 36.078125 6.890625 40.9375 10.546875 
Q 45.796875 14.203125 45.796875 21.1875 
Q 45.796875 27.640625 41.28125 31.265625 
Q 36.765625 34.90625 28.71875 34.90625 
L 20.21875 34.90625 
L 20.21875 43.015625 
L 29.109375 43.015625 
Q 36.375 43.015625 40.234375 45.921875 
Q 44.09375 48.828125 44.09375 54.296875 
Q 44.09375 59.90625 40.109375 62.90625 
Q 36.140625 65.921875 28.71875 65.921875 
Q 24.65625 65.921875 20.015625 65.03125 
Q 15.375 64.15625 9.8125 62.3125 
L 9.8125 71.09375 
Q 15.4375 72.65625 20.34375 73.4375 
Q 25.25 74.21875 29.59375 74.21875 
Q 40.828125 74.21875 47.359375 69.109375 
Q 53.90625 64.015625 53.90625 55.328125 
Q 53.90625 49.265625 50.4375 45.09375 
Q 46.96875 40.921875 40.578125 39.3125 
z
&quot; id=&quot;DejaVuSans-51&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 165.857633)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-51&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_5&quot;&gt;
     &lt;g id=&quot;line2d_7&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#md168fdfda4&quot; y=&quot;130.83851&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_7&quot;&gt;
      &lt;!-- 400 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 37.796875 64.3125 
L 12.890625 25.390625 
L 37.796875 25.390625 
z
M 35.203125 72.90625 
L 47.609375 72.90625 
L 47.609375 25.390625 
L 58.015625 25.390625 
L 58.015625 17.1875 
L 47.609375 17.1875 
L 47.609375 0 
L 37.796875 0 
L 37.796875 17.1875 
L 4.890625 17.1875 
L 4.890625 26.703125 
z
&quot; id=&quot;DejaVuSans-52&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 134.637729)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-52&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_6&quot;&gt;
     &lt;g id=&quot;line2d_8&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#md168fdfda4&quot; y=&quot;99.618607&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_8&quot;&gt;
      &lt;!-- 500 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 10.796875 72.90625 
L 49.515625 72.90625 
L 49.515625 64.59375 
L 19.828125 64.59375 
L 19.828125 46.734375 
Q 21.96875 47.46875 24.109375 47.828125 
Q 26.265625 48.1875 28.421875 48.1875 
Q 40.625 48.1875 47.75 41.5 
Q 54.890625 34.8125 54.890625 23.390625 
Q 54.890625 11.625 47.5625 5.09375 
Q 40.234375 -1.421875 26.90625 -1.421875 
Q 22.3125 -1.421875 17.546875 -0.640625 
Q 12.796875 0.140625 7.71875 1.703125 
L 7.71875 11.625 
Q 12.109375 9.234375 16.796875 8.0625 
Q 21.484375 6.890625 26.703125 6.890625 
Q 35.15625 6.890625 40.078125 11.328125 
Q 45.015625 15.765625 45.015625 23.390625 
Q 45.015625 31 40.078125 35.4375 
Q 35.15625 39.890625 26.703125 39.890625 
Q 22.75 39.890625 18.8125 39.015625 
Q 14.890625 38.140625 10.796875 36.28125 
z
&quot; id=&quot;DejaVuSans-53&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 103.417825)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-53&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_7&quot;&gt;
     &lt;g id=&quot;line2d_9&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#md168fdfda4&quot; y=&quot;68.398703&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_9&quot;&gt;
      &lt;!-- 600 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 33.015625 40.375 
Q 26.375 40.375 22.484375 35.828125 
Q 18.609375 31.296875 18.609375 23.390625 
Q 18.609375 15.53125 22.484375 10.953125 
Q 26.375 6.390625 33.015625 6.390625 
Q 39.65625 6.390625 43.53125 10.953125 
Q 47.40625 15.53125 47.40625 23.390625 
Q 47.40625 31.296875 43.53125 35.828125 
Q 39.65625 40.375 33.015625 40.375 
z
M 52.59375 71.296875 
L 52.59375 62.3125 
Q 48.875 64.0625 45.09375 64.984375 
Q 41.3125 65.921875 37.59375 65.921875 
Q 27.828125 65.921875 22.671875 59.328125 
Q 17.53125 52.734375 16.796875 39.40625 
Q 19.671875 43.65625 24.015625 45.921875 
Q 28.375 48.1875 33.59375 48.1875 
Q 44.578125 48.1875 50.953125 41.515625 
Q 57.328125 34.859375 57.328125 23.390625 
Q 57.328125 12.15625 50.6875 5.359375 
Q 44.046875 -1.421875 33.015625 -1.421875 
Q 20.359375 -1.421875 13.671875 8.265625 
Q 6.984375 17.96875 6.984375 36.375 
Q 6.984375 53.65625 15.1875 63.9375 
Q 23.390625 74.21875 37.203125 74.21875 
Q 40.921875 74.21875 44.703125 73.484375 
Q 48.484375 72.75 52.59375 71.296875 
z
&quot; id=&quot;DejaVuSans-54&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 72.197922)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-54&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_8&quot;&gt;
     &lt;g id=&quot;line2d_10&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#md168fdfda4&quot; y=&quot;37.178799&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_10&quot;&gt;
      &lt;!-- 700 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 8.203125 72.90625 
L 55.078125 72.90625 
L 55.078125 68.703125 
L 28.609375 0 
L 18.3125 0 
L 43.21875 64.59375 
L 8.203125 64.59375 
z
&quot; id=&quot;DejaVuSans-55&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 40.978018)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-55&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;text_11&quot;&gt;
     &lt;!-- Tokens --&gt;
     &lt;g transform=&quot;translate(14.798438 155.845469)rotate(-90)scale(0.1 -0.1)&quot;&gt;
      &lt;use xlink:href=&quot;#DejaVuSans-84&quot; /&gt;
      &lt;use x=&quot;44.083984&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
      &lt;use x=&quot;105.265625&quot; xlink:href=&quot;#DejaVuSans-107&quot; /&gt;
      &lt;use x=&quot;159.550781&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
      &lt;use x=&quot;221.074219&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
      &lt;use x=&quot;284.453125&quot; xlink:href=&quot;#DejaVuSans-115&quot; /&gt;
     &lt;/g&gt;
    &lt;/g&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_7&quot;&gt;
    &lt;path d=&quot;M 46.965625 255.718125 
L 46.965625 22.318125 
&quot; style=&quot;fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_8&quot;&gt;
    &lt;path d=&quot;M 417.490625 255.718125 
L 417.490625 22.318125 
&quot; style=&quot;fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_9&quot;&gt;
    &lt;path d=&quot;M 46.965625 255.718125 
L 417.490625 255.718125 
&quot; style=&quot;fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_10&quot;&gt;
    &lt;path d=&quot;M 46.965625 22.318125 
L 417.490625 22.318125 
&quot; style=&quot;fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;text_12&quot;&gt;
    &lt;!-- Tokens before and after --&gt;
    &lt;defs&gt;
     &lt;path d=&quot;M 48.6875 27.296875 
Q 48.6875 37.203125 44.609375 42.84375 
Q 40.53125 48.484375 33.40625 48.484375 
Q 26.265625 48.484375 22.1875 42.84375 
Q 18.109375 37.203125 18.109375 27.296875 
Q 18.109375 17.390625 22.1875 11.75 
Q 26.265625 6.109375 33.40625 6.109375 
Q 40.53125 6.109375 44.609375 11.75 
Q 48.6875 17.390625 48.6875 27.296875 
z
M 18.109375 46.390625 
Q 20.953125 51.265625 25.265625 53.625 
Q 29.59375 56 35.59375 56 
Q 45.5625 56 51.78125 48.09375 
Q 58.015625 40.1875 58.015625 27.296875 
Q 58.015625 14.40625 51.78125 6.484375 
Q 45.5625 -1.421875 35.59375 -1.421875 
Q 29.59375 -1.421875 25.265625 0.953125 
Q 20.953125 3.328125 18.109375 8.203125 
L 18.109375 0 
L 9.078125 0 
L 9.078125 75.984375 
L 18.109375 75.984375 
z
&quot; id=&quot;DejaVuSans-98&quot; /&gt;
     &lt;path d=&quot;M 37.109375 75.984375 
L 37.109375 68.5 
L 28.515625 68.5 
Q 23.6875 68.5 21.796875 66.546875 
Q 19.921875 64.59375 19.921875 59.515625 
L 19.921875 54.6875 
L 34.71875 54.6875 
L 34.71875 47.703125 
L 19.921875 47.703125 
L 19.921875 0 
L 10.890625 0 
L 10.890625 47.703125 
L 2.296875 47.703125 
L 2.296875 54.6875 
L 10.890625 54.6875 
L 10.890625 58.5 
Q 10.890625 67.625 15.140625 71.796875 
Q 19.390625 75.984375 28.609375 75.984375 
z
&quot; id=&quot;DejaVuSans-102&quot; /&gt;
     &lt;path d=&quot;M 41.109375 46.296875 
Q 39.59375 47.171875 37.8125 47.578125 
Q 36.03125 48 33.890625 48 
Q 26.265625 48 22.1875 43.046875 
Q 18.109375 38.09375 18.109375 28.8125 
L 18.109375 0 
L 9.078125 0 
L 9.078125 54.6875 
L 18.109375 54.6875 
L 18.109375 46.1875 
Q 20.953125 51.171875 25.484375 53.578125 
Q 30.03125 56 36.53125 56 
Q 37.453125 56 38.578125 55.875 
Q 39.703125 55.765625 41.0625 55.515625 
z
&quot; id=&quot;DejaVuSans-114&quot; /&gt;
     &lt;path d=&quot;M 34.28125 27.484375 
Q 23.390625 27.484375 19.1875 25 
Q 14.984375 22.515625 14.984375 16.5 
Q 14.984375 11.71875 18.140625 8.90625 
Q 21.296875 6.109375 26.703125 6.109375 
Q 34.1875 6.109375 38.703125 11.40625 
Q 43.21875 16.703125 43.21875 25.484375 
L 43.21875 27.484375 
z
M 52.203125 31.203125 
L 52.203125 0 
L 43.21875 0 
L 43.21875 8.296875 
Q 40.140625 3.328125 35.546875 0.953125 
Q 30.953125 -1.421875 24.3125 -1.421875 
Q 15.921875 -1.421875 10.953125 3.296875 
Q 6 8.015625 6 15.921875 
Q 6 25.140625 12.171875 29.828125 
Q 18.359375 34.515625 30.609375 34.515625 
L 43.21875 34.515625 
L 43.21875 35.40625 
Q 43.21875 41.609375 39.140625 45 
Q 35.0625 48.390625 27.6875 48.390625 
Q 23 48.390625 18.546875 47.265625 
Q 14.109375 46.140625 10.015625 43.890625 
L 10.015625 52.203125 
Q 14.9375 54.109375 19.578125 55.046875 
Q 24.21875 56 28.609375 56 
Q 40.484375 56 46.34375 49.84375 
Q 52.203125 43.703125 52.203125 31.203125 
z
&quot; id=&quot;DejaVuSans-97&quot; /&gt;
     &lt;path d=&quot;M 45.40625 46.390625 
L 45.40625 75.984375 
L 54.390625 75.984375 
L 54.390625 0 
L 45.40625 0 
L 45.40625 8.203125 
Q 42.578125 3.328125 38.25 0.953125 
Q 33.9375 -1.421875 27.875 -1.421875 
Q 17.96875 -1.421875 11.734375 6.484375 
Q 5.515625 14.40625 5.515625 27.296875 
Q 5.515625 40.1875 11.734375 48.09375 
Q 17.96875 56 27.875 56 
Q 33.9375 56 38.25 53.625 
Q 42.578125 51.265625 45.40625 46.390625 
z
M 14.796875 27.296875 
Q 14.796875 17.390625 18.875 11.75 
Q 22.953125 6.109375 30.078125 6.109375 
Q 37.203125 6.109375 41.296875 11.75 
Q 45.40625 17.390625 45.40625 27.296875 
Q 45.40625 37.203125 41.296875 42.84375 
Q 37.203125 48.484375 30.078125 48.484375 
Q 22.953125 48.484375 18.875 42.84375 
Q 14.796875 37.203125 14.796875 27.296875 
z
&quot; id=&quot;DejaVuSans-100&quot; /&gt;
     &lt;path d=&quot;M 18.3125 70.21875 
L 18.3125 54.6875 
L 36.8125 54.6875 
L 36.8125 47.703125 
L 18.3125 47.703125 
L 18.3125 18.015625 
Q 18.3125 11.328125 20.140625 9.421875 
Q 21.96875 7.515625 27.59375 7.515625 
L 36.8125 7.515625 
L 36.8125 0 
L 27.59375 0 
Q 17.1875 0 13.234375 3.875 
Q 9.28125 7.765625 9.28125 18.015625 
L 9.28125 47.703125 
L 2.6875 47.703125 
L 2.6875 54.6875 
L 9.28125 54.6875 
L 9.28125 70.21875 
z
&quot; id=&quot;DejaVuSans-116&quot; /&gt;
    &lt;/defs&gt;
    &lt;g transform=&quot;translate(161.52375 16.318125)scale(0.12 -0.12)&quot;&gt;
     &lt;use xlink:href=&quot;#DejaVuSans-84&quot; /&gt;
     &lt;use x=&quot;44.083984&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
     &lt;use x=&quot;105.265625&quot; xlink:href=&quot;#DejaVuSans-107&quot; /&gt;
     &lt;use x=&quot;159.550781&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
     &lt;use x=&quot;221.074219&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
     &lt;use x=&quot;284.453125&quot; xlink:href=&quot;#DejaVuSans-115&quot; /&gt;
     &lt;use x=&quot;336.552734&quot; xlink:href=&quot;#DejaVuSans-32&quot; /&gt;
     &lt;use x=&quot;368.339844&quot; xlink:href=&quot;#DejaVuSans-98&quot; /&gt;
     &lt;use x=&quot;431.816406&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
     &lt;use x=&quot;493.339844&quot; xlink:href=&quot;#DejaVuSans-102&quot; /&gt;
     &lt;use x=&quot;528.544922&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
     &lt;use x=&quot;589.726562&quot; xlink:href=&quot;#DejaVuSans-114&quot; /&gt;
     &lt;use x=&quot;628.589844&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
     &lt;use x=&quot;690.113281&quot; xlink:href=&quot;#DejaVuSans-32&quot; /&gt;
     &lt;use x=&quot;721.900391&quot; xlink:href=&quot;#DejaVuSans-97&quot; /&gt;
     &lt;use x=&quot;783.179688&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
     &lt;use x=&quot;846.558594&quot; xlink:href=&quot;#DejaVuSans-100&quot; /&gt;
     &lt;use x=&quot;910.035156&quot; xlink:href=&quot;#DejaVuSans-32&quot; /&gt;
     &lt;use x=&quot;941.822266&quot; xlink:href=&quot;#DejaVuSans-97&quot; /&gt;
     &lt;use x=&quot;1003.101562&quot; xlink:href=&quot;#DejaVuSans-102&quot; /&gt;
     &lt;use x=&quot;1036.556641&quot; xlink:href=&quot;#DejaVuSans-116&quot; /&gt;
     &lt;use x=&quot;1075.765625&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
     &lt;use x=&quot;1137.289062&quot; xlink:href=&quot;#DejaVuSans-114&quot; /&gt;
    &lt;/g&gt;
   &lt;/g&gt;
   &lt;g id=&quot;legend_1&quot;&gt;
    &lt;g id=&quot;patch_11&quot;&gt;
     &lt;path d=&quot;M 345.798437 59.674375 
L 410.490625 59.674375 
Q 412.490625 59.674375 412.490625 57.674375 
L 412.490625 29.318125 
Q 412.490625 27.318125 410.490625 27.318125 
L 345.798437 27.318125 
Q 343.798437 27.318125 343.798437 29.318125 
L 343.798437 57.674375 
Q 343.798437 59.674375 345.798437 59.674375 
z
&quot; style=&quot;fill:#ffffff;opacity:0.8;stroke:#cccccc;stroke-linejoin:miter;&quot; /&gt;
    &lt;/g&gt;
    &lt;g id=&quot;patch_12&quot;&gt;
     &lt;path d=&quot;M 347.798437 38.916562 
L 367.798437 38.916562 
L 367.798437 31.916562 
L 347.798437 31.916562 
z
&quot; style=&quot;fill:#1f77b4;&quot; /&gt;
    &lt;/g&gt;
    &lt;g id=&quot;text_13&quot;&gt;
     &lt;!-- Before --&gt;
     &lt;defs&gt;
      &lt;path d=&quot;M 19.671875 34.8125 
L 19.671875 8.109375 
L 35.5 8.109375 
Q 43.453125 8.109375 47.28125 11.40625 
Q 51.125 14.703125 51.125 21.484375 
Q 51.125 28.328125 47.28125 31.5625 
Q 43.453125 34.8125 35.5 34.8125 
z
M 19.671875 64.796875 
L 19.671875 42.828125 
L 34.28125 42.828125 
Q 41.5 42.828125 45.03125 45.53125 
Q 48.578125 48.25 48.578125 53.8125 
Q 48.578125 59.328125 45.03125 62.0625 
Q 41.5 64.796875 34.28125 64.796875 
z
M 9.8125 72.90625 
L 35.015625 72.90625 
Q 46.296875 72.90625 52.390625 68.21875 
Q 58.5 63.53125 58.5 54.890625 
Q 58.5 48.1875 55.375 44.234375 
Q 52.25 40.28125 46.1875 39.3125 
Q 53.46875 37.75 57.5 32.78125 
Q 61.53125 27.828125 61.53125 20.40625 
Q 61.53125 10.640625 54.890625 5.3125 
Q 48.25 0 35.984375 0 
L 9.8125 0 
z
&quot; id=&quot;DejaVuSans-66&quot; /&gt;
     &lt;/defs&gt;
     &lt;g transform=&quot;translate(375.798437 38.916562)scale(0.1 -0.1)&quot;&gt;
      &lt;use xlink:href=&quot;#DejaVuSans-66&quot; /&gt;
      &lt;use x=&quot;68.603516&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
      &lt;use x=&quot;130.126953&quot; xlink:href=&quot;#DejaVuSans-102&quot; /&gt;
      &lt;use x=&quot;165.332031&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
      &lt;use x=&quot;226.513672&quot; xlink:href=&quot;#DejaVuSans-114&quot; /&gt;
      &lt;use x=&quot;265.376953&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;patch_13&quot;&gt;
     &lt;path d=&quot;M 347.798437 53.594687 
L 367.798437 53.594687 
L 367.798437 46.594687 
L 347.798437 46.594687 
z
&quot; style=&quot;fill:#ff7f0e;&quot; /&gt;
    &lt;/g&gt;
    &lt;g id=&quot;text_14&quot;&gt;
     &lt;!-- After --&gt;
     &lt;defs&gt;
      &lt;path d=&quot;M 34.1875 63.1875 
L 20.796875 26.90625 
L 47.609375 26.90625 
z
M 28.609375 72.90625 
L 39.796875 72.90625 
L 67.578125 0 
L 57.328125 0 
L 50.6875 18.703125 
L 17.828125 18.703125 
L 11.1875 0 
L 0.78125 0 
z
&quot; id=&quot;DejaVuSans-65&quot; /&gt;
     &lt;/defs&gt;
     &lt;g transform=&quot;translate(375.798437 53.594687)scale(0.1 -0.1)&quot;&gt;
      &lt;use xlink:href=&quot;#DejaVuSans-65&quot; /&gt;
      &lt;use x=&quot;64.783203&quot; xlink:href=&quot;#DejaVuSans-102&quot; /&gt;
      &lt;use x=&quot;98.238281&quot; xlink:href=&quot;#DejaVuSans-116&quot; /&gt;
      &lt;use x=&quot;137.447266&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
      &lt;use x=&quot;198.970703&quot; xlink:href=&quot;#DejaVuSans-114&quot; /&gt;
     &lt;/g&gt;
    &lt;/g&gt;
   &lt;/g&gt;
  &lt;/g&gt;
 &lt;/g&gt;
 &lt;defs&gt;
  &lt;clipPath id=&quot;p2e43525c47&quot;&gt;
   &lt;rect height=&quot;233.4&quot; width=&quot;370.525&quot; x=&quot;46.965625&quot; y=&quot;22.318125&quot; /&gt;
  &lt;/clipPath&gt;
 &lt;/defs&gt;
&lt;/svg&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Lower-casing&quot;&gt;Lower-casing&lt;a class=&quot;anchor-link&quot; href=&quot;#Lower-casing&quot;&gt; &lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Going from 5.5 to 10 % reduction is nothing to sneeze at, by applying these two simple techniques we now have the same data in a better format which allows us to have a lower number of unique tokens.&lt;br /&gt;
Pretty awesome right?&lt;/p&gt;
&lt;p&gt;Let's get on with this and apply the preprocessing to the questions and test it out with the FAQ-search!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;question&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocess_funcs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;



&lt;div class=&quot;output_text output_subarea output_execute_result&quot;&gt;
&lt;pre&gt;0                            [vad, är, coronavirus, ?]
1                               [vad, är, covid-19, ?]
2    [vad, skiljer, covid-19, från, säsongsinfluens...
3               [vilka, är, symtomen, på, covid-19, ?]
4    [hur, vet, jag, om, mina, symtom, beror, på, p...
Name: X, dtype: object&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;Testing-the-new-input-data&quot;&gt;Testing the new input-data&lt;a class=&quot;anchor-link&quot; href=&quot;#Testing-the-new-input-data&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Now that we've created our input data we need to test our model on this!&lt;br /&gt;
By applying the &lt;code&gt;IndexedList&lt;/code&gt; which is the dataformat &lt;code&gt;SFE&lt;/code&gt; wants as input we can train the model and then test it.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sfe_format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IndexedList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sfe_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;



&lt;div class=&quot;output_text output_subarea output_execute_result&quot;&gt;
&lt;pre&gt;(75, 712)&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_n_closest_questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocessing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q_fixed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocessing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;similar_by_sentence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q_fixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;question&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# [([tokens], score)]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.2f&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_n_closest_questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;kan min hamster bli smittad?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocess_funcs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;0.67: Kan man bli smittad av en person som har covid-19 men som inte har några symtom?
0.63: Kan covid-19 smitta mellan djur och människa och kan mitt husdjur smittas av viruset?
0.54: Kan viruset smitta till människa via post och paket?
0.42: Kan smitta överföras från mygg till människa?
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_n_closest_questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hur får jag min son att förstå?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocess_funcs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;0.82: Hur pratar man med barn om det nya coronaviruset?
0.80: Vad är covid-19?
0.78: Hur sjuk blir man av covid-19?
0.77: Hur länge är man sjuk av covid-19?
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h3 id=&quot;2.-Lemmatization-and-Stop-Words&quot;&gt;2. Lemmatization and Stop Words&lt;a class=&quot;anchor-link&quot; href=&quot;#2.-Lemmatization-and-Stop-Words&quot;&gt; &lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Let's try to further improve this by actually lemmatizing and applying stop-words!&lt;/p&gt;
&lt;h4 id=&quot;Lemmatization&quot;&gt;Lemmatization&lt;a class=&quot;anchor-link&quot; href=&quot;#Lemmatization&quot;&gt; &lt;/a&gt;&lt;/h4&gt;&lt;p&gt;So what is Lemmatization? Quoting Stanfords description:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;For grammatical reasons, documents are going to use different forms of a word, such as organize, organizes, and organizing. Additionally, there are families of derivationally related words with similar meanings, such as democracy, democratic, and democratization. In many situations, it seems as if it would be useful for a search for one of these words to return documents that contain another word in the set.&lt;/p&gt;
&lt;p&gt;The goal of both stemming and lemmatization is to reduce inflectional forms and sometimes derivationally related forms of a word to a common base form. For instance:```     am, are, is =&amp;gt; be
     car, cars, car's, cars' =&amp;gt; car&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The result of this mapping of text will be something like:```     the boy's cars are different colors =&amp;gt;
     the boy car be differ color&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;What-is-stop-words?&quot;&gt;What is stop-words?&lt;a class=&quot;anchor-link&quot; href=&quot;#What-is-stop-words?&quot;&gt; &lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Stop-words are words we want to throw away as they add no real purpose. In older Machine Learning approaches it was way more important to add stop-words but in newer Deep Learning with Neural Networks stop-words often can be a negative thing, removing understanding of the sentence and perhaps minor differences which makes the world for understanding.&lt;/p&gt;
&lt;p&gt;A example of a stop-word list could be &lt;code&gt;[&quot;hej&quot;, &quot;vem&quot;, &quot;då&quot;, &quot;och&quot;, ...]&lt;/code&gt; which means that these words would be removed from a sentence.&lt;/p&gt;
&lt;p&gt;In our case it makes sense to remove words like 'vad', 'varför'  and so on because the return of the FAQ seems to be very weighted towards these words.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nlp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stanza&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sv&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;tokenize,mwt,pos,lemma&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging_level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ERROR&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stanza_lemma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lemma&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nlp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sentences&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sentence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;preprocess_funcs_lemma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lowercase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stanza_lemma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Previously:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;hur förklarar jag för min dotter och son?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocess_funcs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;After:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t\t&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;hur förklarar jag för min dotter och son?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocess_funcs_lemma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Previously:	[&amp;#39;hur&amp;#39;, &amp;#39;förklarar&amp;#39;, &amp;#39;jag&amp;#39;, &amp;#39;för&amp;#39;, &amp;#39;min&amp;#39;, &amp;#39;dotter&amp;#39;, &amp;#39;och&amp;#39;, &amp;#39;son&amp;#39;, &amp;#39;?&amp;#39;]
After:		[&amp;#39;hur&amp;#39;, &amp;#39;förklara&amp;#39;, &amp;#39;jag&amp;#39;, &amp;#39;för&amp;#39;, &amp;#39;jag&amp;#39;, &amp;#39;dotter&amp;#39;, &amp;#39;och&amp;#39;, &amp;#39;son&amp;#39;, &amp;#39;?&amp;#39;]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;&lt;strong&gt;Some interesting notes&lt;/strong&gt;&lt;br /&gt;
Seeing '&lt;em&gt;min&lt;/em&gt;' getting converted to '&lt;em&gt;jag&lt;/em&gt;' is both good and bad, in this case we reduce dimensionality of the problem but we loose context and understanding. &lt;em&gt;jag&lt;/em&gt; and &lt;em&gt;min&lt;/em&gt; certainly does not mean the same thing.&lt;/p&gt;
&lt;p&gt;Let's see how it pans out...&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_dimensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preprocess_funcs_lemma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Previously: 629 tokens (289 unique)
Post: 712 tokens (228 unique)
Token reduction by ~21.1 %
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_area&quot;&gt;


&lt;div class=&quot;output_svg output_subarea &quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;no&quot;?&gt;
&amp;lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot;
  &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&amp;gt;
&lt;!-- Created with matplotlib (https://matplotlib.org/) --&gt;
&lt;svg height=&quot;279.59625pt&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 424.690625 279.59625&quot; width=&quot;424.690625pt&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;
 &lt;defs&gt;
  &lt;style type=&quot;text/css&quot;&gt;
*{stroke-linecap:butt;stroke-linejoin:round;}
  &lt;/style&gt;
 &lt;/defs&gt;
 &lt;g id=&quot;figure_1&quot;&gt;
  &lt;g id=&quot;patch_1&quot;&gt;
   &lt;path d=&quot;M -0 279.59625 
L 424.690625 279.59625 
L 424.690625 0 
L -0 0 
z
&quot; style=&quot;fill:none;&quot; /&gt;
  &lt;/g&gt;
  &lt;g id=&quot;axes_1&quot;&gt;
   &lt;g id=&quot;patch_2&quot;&gt;
    &lt;path d=&quot;M 46.965625 255.718125 
L 417.490625 255.718125 
L 417.490625 22.318125 
L 46.965625 22.318125 
z
&quot; style=&quot;fill:#ffffff;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_3&quot;&gt;
    &lt;path clip-path=&quot;url(#pcebb41a186)&quot; d=&quot;M 63.80767 255.718125 
L 133.157269 255.718125 
L 133.157269 59.344931 
L 63.80767 59.344931 
z
&quot; style=&quot;fill:#1f77b4;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_4&quot;&gt;
    &lt;path clip-path=&quot;url(#pcebb41a186)&quot; d=&quot;M 261.949382 255.718125 
L 331.298981 255.718125 
L 331.298981 165.492603 
L 261.949382 165.492603 
z
&quot; style=&quot;fill:#1f77b4;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_5&quot;&gt;
    &lt;path clip-path=&quot;url(#pcebb41a186)&quot; d=&quot;M 133.157269 255.718125 
L 202.506868 255.718125 
L 202.506868 33.432411 
L 133.157269 33.432411 
z
&quot; style=&quot;fill:#ff7f0e;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_6&quot;&gt;
    &lt;path clip-path=&quot;url(#pcebb41a186)&quot; d=&quot;M 331.298981 255.718125 
L 400.64858 255.718125 
L 400.64858 184.536745 
L 331.298981 184.536745 
z
&quot; style=&quot;fill:#ff7f0e;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;matplotlib.axis_1&quot;&gt;
    &lt;g id=&quot;xtick_1&quot;&gt;
     &lt;g id=&quot;line2d_1&quot;&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 0 0 
L 0 3.5 
&quot; id=&quot;m4d2d8ecdd4&quot; style=&quot;stroke:#000000;stroke-width:0.8;&quot; /&gt;
      &lt;/defs&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;133.157269&quot; xlink:href=&quot;#m4d2d8ecdd4&quot; y=&quot;255.718125&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_1&quot;&gt;
      &lt;!-- #Tokens --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 51.125 44 
L 36.921875 44 
L 32.8125 27.6875 
L 47.125 27.6875 
z
M 43.796875 71.78125 
L 38.71875 51.515625 
L 52.984375 51.515625 
L 58.109375 71.78125 
L 65.921875 71.78125 
L 60.890625 51.515625 
L 76.125 51.515625 
L 76.125 44 
L 58.984375 44 
L 54.984375 27.6875 
L 70.515625 27.6875 
L 70.515625 20.21875 
L 53.078125 20.21875 
L 48 0 
L 40.1875 0 
L 45.21875 20.21875 
L 30.90625 20.21875 
L 25.875 0 
L 18.015625 0 
L 23.09375 20.21875 
L 7.71875 20.21875 
L 7.71875 27.6875 
L 24.90625 27.6875 
L 29 44 
L 13.28125 44 
L 13.28125 51.515625 
L 30.90625 51.515625 
L 35.890625 71.78125 
z
&quot; id=&quot;DejaVuSans-35&quot; /&gt;
       &lt;path d=&quot;M -0.296875 72.90625 
L 61.375 72.90625 
L 61.375 64.59375 
L 35.5 64.59375 
L 35.5 0 
L 25.59375 0 
L 25.59375 64.59375 
L -0.296875 64.59375 
z
&quot; id=&quot;DejaVuSans-84&quot; /&gt;
       &lt;path d=&quot;M 30.609375 48.390625 
Q 23.390625 48.390625 19.1875 42.75 
Q 14.984375 37.109375 14.984375 27.296875 
Q 14.984375 17.484375 19.15625 11.84375 
Q 23.34375 6.203125 30.609375 6.203125 
Q 37.796875 6.203125 41.984375 11.859375 
Q 46.1875 17.53125 46.1875 27.296875 
Q 46.1875 37.015625 41.984375 42.703125 
Q 37.796875 48.390625 30.609375 48.390625 
z
M 30.609375 56 
Q 42.328125 56 49.015625 48.375 
Q 55.71875 40.765625 55.71875 27.296875 
Q 55.71875 13.875 49.015625 6.21875 
Q 42.328125 -1.421875 30.609375 -1.421875 
Q 18.84375 -1.421875 12.171875 6.21875 
Q 5.515625 13.875 5.515625 27.296875 
Q 5.515625 40.765625 12.171875 48.375 
Q 18.84375 56 30.609375 56 
z
&quot; id=&quot;DejaVuSans-111&quot; /&gt;
       &lt;path d=&quot;M 9.078125 75.984375 
L 18.109375 75.984375 
L 18.109375 31.109375 
L 44.921875 54.6875 
L 56.390625 54.6875 
L 27.390625 29.109375 
L 57.625 0 
L 45.90625 0 
L 18.109375 26.703125 
L 18.109375 0 
L 9.078125 0 
z
&quot; id=&quot;DejaVuSans-107&quot; /&gt;
       &lt;path d=&quot;M 56.203125 29.59375 
L 56.203125 25.203125 
L 14.890625 25.203125 
Q 15.484375 15.921875 20.484375 11.0625 
Q 25.484375 6.203125 34.421875 6.203125 
Q 39.59375 6.203125 44.453125 7.46875 
Q 49.3125 8.734375 54.109375 11.28125 
L 54.109375 2.78125 
Q 49.265625 0.734375 44.1875 -0.34375 
Q 39.109375 -1.421875 33.890625 -1.421875 
Q 20.796875 -1.421875 13.15625 6.1875 
Q 5.515625 13.8125 5.515625 26.8125 
Q 5.515625 40.234375 12.765625 48.109375 
Q 20.015625 56 32.328125 56 
Q 43.359375 56 49.78125 48.890625 
Q 56.203125 41.796875 56.203125 29.59375 
z
M 47.21875 32.234375 
Q 47.125 39.59375 43.09375 43.984375 
Q 39.0625 48.390625 32.421875 48.390625 
Q 24.90625 48.390625 20.390625 44.140625 
Q 15.875 39.890625 15.1875 32.171875 
z
&quot; id=&quot;DejaVuSans-101&quot; /&gt;
       &lt;path d=&quot;M 54.890625 33.015625 
L 54.890625 0 
L 45.90625 0 
L 45.90625 32.71875 
Q 45.90625 40.484375 42.875 44.328125 
Q 39.84375 48.1875 33.796875 48.1875 
Q 26.515625 48.1875 22.3125 43.546875 
Q 18.109375 38.921875 18.109375 30.90625 
L 18.109375 0 
L 9.078125 0 
L 9.078125 54.6875 
L 18.109375 54.6875 
L 18.109375 46.1875 
Q 21.34375 51.125 25.703125 53.5625 
Q 30.078125 56 35.796875 56 
Q 45.21875 56 50.046875 50.171875 
Q 54.890625 44.34375 54.890625 33.015625 
z
&quot; id=&quot;DejaVuSans-110&quot; /&gt;
       &lt;path d=&quot;M 44.28125 53.078125 
L 44.28125 44.578125 
Q 40.484375 46.53125 36.375 47.5 
Q 32.28125 48.484375 27.875 48.484375 
Q 21.1875 48.484375 17.84375 46.4375 
Q 14.5 44.390625 14.5 40.28125 
Q 14.5 37.15625 16.890625 35.375 
Q 19.28125 33.59375 26.515625 31.984375 
L 29.59375 31.296875 
Q 39.15625 29.25 43.1875 25.515625 
Q 47.21875 21.78125 47.21875 15.09375 
Q 47.21875 7.46875 41.1875 3.015625 
Q 35.15625 -1.421875 24.609375 -1.421875 
Q 20.21875 -1.421875 15.453125 -0.5625 
Q 10.6875 0.296875 5.421875 2 
L 5.421875 11.28125 
Q 10.40625 8.6875 15.234375 7.390625 
Q 20.0625 6.109375 24.8125 6.109375 
Q 31.15625 6.109375 34.5625 8.28125 
Q 37.984375 10.453125 37.984375 14.40625 
Q 37.984375 18.0625 35.515625 20.015625 
Q 33.0625 21.96875 24.703125 23.78125 
L 21.578125 24.515625 
Q 13.234375 26.265625 9.515625 29.90625 
Q 5.8125 33.546875 5.8125 39.890625 
Q 5.8125 47.609375 11.28125 51.796875 
Q 16.75 56 26.8125 56 
Q 31.78125 56 36.171875 55.265625 
Q 40.578125 54.546875 44.28125 53.078125 
z
&quot; id=&quot;DejaVuSans-115&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(112.140082 270.316563)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-35&quot; /&gt;
       &lt;use x=&quot;83.789062&quot; xlink:href=&quot;#DejaVuSans-84&quot; /&gt;
       &lt;use x=&quot;127.873047&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
       &lt;use x=&quot;189.054688&quot; xlink:href=&quot;#DejaVuSans-107&quot; /&gt;
       &lt;use x=&quot;243.339844&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
       &lt;use x=&quot;304.863281&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
       &lt;use x=&quot;368.242188&quot; xlink:href=&quot;#DejaVuSans-115&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;xtick_2&quot;&gt;
     &lt;g id=&quot;line2d_2&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;331.298981&quot; xlink:href=&quot;#m4d2d8ecdd4&quot; y=&quot;255.718125&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_2&quot;&gt;
      &lt;!-- #Unique Tokens --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 8.6875 72.90625 
L 18.609375 72.90625 
L 18.609375 28.609375 
Q 18.609375 16.890625 22.84375 11.734375 
Q 27.09375 6.59375 36.625 6.59375 
Q 46.09375 6.59375 50.34375 11.734375 
Q 54.59375 16.890625 54.59375 28.609375 
L 54.59375 72.90625 
L 64.5 72.90625 
L 64.5 27.390625 
Q 64.5 13.140625 57.4375 5.859375 
Q 50.390625 -1.421875 36.625 -1.421875 
Q 22.796875 -1.421875 15.734375 5.859375 
Q 8.6875 13.140625 8.6875 27.390625 
z
&quot; id=&quot;DejaVuSans-85&quot; /&gt;
       &lt;path d=&quot;M 9.421875 54.6875 
L 18.40625 54.6875 
L 18.40625 0 
L 9.421875 0 
z
M 9.421875 75.984375 
L 18.40625 75.984375 
L 18.40625 64.59375 
L 9.421875 64.59375 
z
&quot; id=&quot;DejaVuSans-105&quot; /&gt;
       &lt;path d=&quot;M 14.796875 27.296875 
Q 14.796875 17.390625 18.875 11.75 
Q 22.953125 6.109375 30.078125 6.109375 
Q 37.203125 6.109375 41.296875 11.75 
Q 45.40625 17.390625 45.40625 27.296875 
Q 45.40625 37.203125 41.296875 42.84375 
Q 37.203125 48.484375 30.078125 48.484375 
Q 22.953125 48.484375 18.875 42.84375 
Q 14.796875 37.203125 14.796875 27.296875 
z
M 45.40625 8.203125 
Q 42.578125 3.328125 38.25 0.953125 
Q 33.9375 -1.421875 27.875 -1.421875 
Q 17.96875 -1.421875 11.734375 6.484375 
Q 5.515625 14.40625 5.515625 27.296875 
Q 5.515625 40.1875 11.734375 48.09375 
Q 17.96875 56 27.875 56 
Q 33.9375 56 38.25 53.625 
Q 42.578125 51.265625 45.40625 46.390625 
L 45.40625 54.6875 
L 54.390625 54.6875 
L 54.390625 -20.796875 
L 45.40625 -20.796875 
z
&quot; id=&quot;DejaVuSans-113&quot; /&gt;
       &lt;path d=&quot;M 8.5 21.578125 
L 8.5 54.6875 
L 17.484375 54.6875 
L 17.484375 21.921875 
Q 17.484375 14.15625 20.5 10.265625 
Q 23.53125 6.390625 29.59375 6.390625 
Q 36.859375 6.390625 41.078125 11.03125 
Q 45.3125 15.671875 45.3125 23.6875 
L 45.3125 54.6875 
L 54.296875 54.6875 
L 54.296875 0 
L 45.3125 0 
L 45.3125 8.40625 
Q 42.046875 3.421875 37.71875 1 
Q 33.40625 -1.421875 27.6875 -1.421875 
Q 18.265625 -1.421875 13.375 4.4375 
Q 8.5 10.296875 8.5 21.578125 
z
M 31.109375 56 
z
&quot; id=&quot;DejaVuSans-117&quot; /&gt;
       &lt;path id=&quot;DejaVuSans-32&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(291.056012 270.316563)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-35&quot; /&gt;
       &lt;use x=&quot;83.789062&quot; xlink:href=&quot;#DejaVuSans-85&quot; /&gt;
       &lt;use x=&quot;156.982422&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
       &lt;use x=&quot;220.361328&quot; xlink:href=&quot;#DejaVuSans-105&quot; /&gt;
       &lt;use x=&quot;248.144531&quot; xlink:href=&quot;#DejaVuSans-113&quot; /&gt;
       &lt;use x=&quot;311.621094&quot; xlink:href=&quot;#DejaVuSans-117&quot; /&gt;
       &lt;use x=&quot;375&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
       &lt;use x=&quot;436.523438&quot; xlink:href=&quot;#DejaVuSans-32&quot; /&gt;
       &lt;use x=&quot;468.310547&quot; xlink:href=&quot;#DejaVuSans-84&quot; /&gt;
       &lt;use x=&quot;512.394531&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
       &lt;use x=&quot;573.576172&quot; xlink:href=&quot;#DejaVuSans-107&quot; /&gt;
       &lt;use x=&quot;627.861328&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
       &lt;use x=&quot;689.384766&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
       &lt;use x=&quot;752.763672&quot; xlink:href=&quot;#DejaVuSans-115&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
   &lt;/g&gt;
   &lt;g id=&quot;matplotlib.axis_2&quot;&gt;
    &lt;g id=&quot;ytick_1&quot;&gt;
     &lt;g id=&quot;line2d_3&quot;&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 0 0 
L -3.5 0 
&quot; id=&quot;m66a3796414&quot; style=&quot;stroke:#000000;stroke-width:0.8;&quot; /&gt;
      &lt;/defs&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#m66a3796414&quot; y=&quot;255.718125&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_3&quot;&gt;
      &lt;!-- 0 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 31.78125 66.40625 
Q 24.171875 66.40625 20.328125 58.90625 
Q 16.5 51.421875 16.5 36.375 
Q 16.5 21.390625 20.328125 13.890625 
Q 24.171875 6.390625 31.78125 6.390625 
Q 39.453125 6.390625 43.28125 13.890625 
Q 47.125 21.390625 47.125 36.375 
Q 47.125 51.421875 43.28125 58.90625 
Q 39.453125 66.40625 31.78125 66.40625 
z
M 31.78125 74.21875 
Q 44.046875 74.21875 50.515625 64.515625 
Q 56.984375 54.828125 56.984375 36.375 
Q 56.984375 17.96875 50.515625 8.265625 
Q 44.046875 -1.421875 31.78125 -1.421875 
Q 19.53125 -1.421875 13.0625 8.265625 
Q 6.59375 17.96875 6.59375 36.375 
Q 6.59375 54.828125 13.0625 64.515625 
Q 19.53125 74.21875 31.78125 74.21875 
z
&quot; id=&quot;DejaVuSans-48&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(33.603125 259.517344)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_2&quot;&gt;
     &lt;g id=&quot;line2d_4&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#m66a3796414&quot; y=&quot;224.498221&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_4&quot;&gt;
      &lt;!-- 100 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 12.40625 8.296875 
L 28.515625 8.296875 
L 28.515625 63.921875 
L 10.984375 60.40625 
L 10.984375 69.390625 
L 28.421875 72.90625 
L 38.28125 72.90625 
L 38.28125 8.296875 
L 54.390625 8.296875 
L 54.390625 0 
L 12.40625 0 
z
&quot; id=&quot;DejaVuSans-49&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 228.29744)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-49&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_3&quot;&gt;
     &lt;g id=&quot;line2d_5&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#m66a3796414&quot; y=&quot;193.278318&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_5&quot;&gt;
      &lt;!-- 200 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 19.1875 8.296875 
L 53.609375 8.296875 
L 53.609375 0 
L 7.328125 0 
L 7.328125 8.296875 
Q 12.9375 14.109375 22.625 23.890625 
Q 32.328125 33.6875 34.8125 36.53125 
Q 39.546875 41.84375 41.421875 45.53125 
Q 43.3125 49.21875 43.3125 52.78125 
Q 43.3125 58.59375 39.234375 62.25 
Q 35.15625 65.921875 28.609375 65.921875 
Q 23.96875 65.921875 18.8125 64.3125 
Q 13.671875 62.703125 7.8125 59.421875 
L 7.8125 69.390625 
Q 13.765625 71.78125 18.9375 73 
Q 24.125 74.21875 28.421875 74.21875 
Q 39.75 74.21875 46.484375 68.546875 
Q 53.21875 62.890625 53.21875 53.421875 
Q 53.21875 48.921875 51.53125 44.890625 
Q 49.859375 40.875 45.40625 35.40625 
Q 44.1875 33.984375 37.640625 27.21875 
Q 31.109375 20.453125 19.1875 8.296875 
z
&quot; id=&quot;DejaVuSans-50&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 197.077536)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-50&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_4&quot;&gt;
     &lt;g id=&quot;line2d_6&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#m66a3796414&quot; y=&quot;162.058414&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_6&quot;&gt;
      &lt;!-- 300 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 40.578125 39.3125 
Q 47.65625 37.796875 51.625 33 
Q 55.609375 28.21875 55.609375 21.1875 
Q 55.609375 10.40625 48.1875 4.484375 
Q 40.765625 -1.421875 27.09375 -1.421875 
Q 22.515625 -1.421875 17.65625 -0.515625 
Q 12.796875 0.390625 7.625 2.203125 
L 7.625 11.71875 
Q 11.71875 9.328125 16.59375 8.109375 
Q 21.484375 6.890625 26.8125 6.890625 
Q 36.078125 6.890625 40.9375 10.546875 
Q 45.796875 14.203125 45.796875 21.1875 
Q 45.796875 27.640625 41.28125 31.265625 
Q 36.765625 34.90625 28.71875 34.90625 
L 20.21875 34.90625 
L 20.21875 43.015625 
L 29.109375 43.015625 
Q 36.375 43.015625 40.234375 45.921875 
Q 44.09375 48.828125 44.09375 54.296875 
Q 44.09375 59.90625 40.109375 62.90625 
Q 36.140625 65.921875 28.71875 65.921875 
Q 24.65625 65.921875 20.015625 65.03125 
Q 15.375 64.15625 9.8125 62.3125 
L 9.8125 71.09375 
Q 15.4375 72.65625 20.34375 73.4375 
Q 25.25 74.21875 29.59375 74.21875 
Q 40.828125 74.21875 47.359375 69.109375 
Q 53.90625 64.015625 53.90625 55.328125 
Q 53.90625 49.265625 50.4375 45.09375 
Q 46.96875 40.921875 40.578125 39.3125 
z
&quot; id=&quot;DejaVuSans-51&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 165.857633)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-51&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_5&quot;&gt;
     &lt;g id=&quot;line2d_7&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#m66a3796414&quot; y=&quot;130.83851&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_7&quot;&gt;
      &lt;!-- 400 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 37.796875 64.3125 
L 12.890625 25.390625 
L 37.796875 25.390625 
z
M 35.203125 72.90625 
L 47.609375 72.90625 
L 47.609375 25.390625 
L 58.015625 25.390625 
L 58.015625 17.1875 
L 47.609375 17.1875 
L 47.609375 0 
L 37.796875 0 
L 37.796875 17.1875 
L 4.890625 17.1875 
L 4.890625 26.703125 
z
&quot; id=&quot;DejaVuSans-52&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 134.637729)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-52&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_6&quot;&gt;
     &lt;g id=&quot;line2d_8&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#m66a3796414&quot; y=&quot;99.618607&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_8&quot;&gt;
      &lt;!-- 500 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 10.796875 72.90625 
L 49.515625 72.90625 
L 49.515625 64.59375 
L 19.828125 64.59375 
L 19.828125 46.734375 
Q 21.96875 47.46875 24.109375 47.828125 
Q 26.265625 48.1875 28.421875 48.1875 
Q 40.625 48.1875 47.75 41.5 
Q 54.890625 34.8125 54.890625 23.390625 
Q 54.890625 11.625 47.5625 5.09375 
Q 40.234375 -1.421875 26.90625 -1.421875 
Q 22.3125 -1.421875 17.546875 -0.640625 
Q 12.796875 0.140625 7.71875 1.703125 
L 7.71875 11.625 
Q 12.109375 9.234375 16.796875 8.0625 
Q 21.484375 6.890625 26.703125 6.890625 
Q 35.15625 6.890625 40.078125 11.328125 
Q 45.015625 15.765625 45.015625 23.390625 
Q 45.015625 31 40.078125 35.4375 
Q 35.15625 39.890625 26.703125 39.890625 
Q 22.75 39.890625 18.8125 39.015625 
Q 14.890625 38.140625 10.796875 36.28125 
z
&quot; id=&quot;DejaVuSans-53&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 103.417825)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-53&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_7&quot;&gt;
     &lt;g id=&quot;line2d_9&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#m66a3796414&quot; y=&quot;68.398703&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_9&quot;&gt;
      &lt;!-- 600 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 33.015625 40.375 
Q 26.375 40.375 22.484375 35.828125 
Q 18.609375 31.296875 18.609375 23.390625 
Q 18.609375 15.53125 22.484375 10.953125 
Q 26.375 6.390625 33.015625 6.390625 
Q 39.65625 6.390625 43.53125 10.953125 
Q 47.40625 15.53125 47.40625 23.390625 
Q 47.40625 31.296875 43.53125 35.828125 
Q 39.65625 40.375 33.015625 40.375 
z
M 52.59375 71.296875 
L 52.59375 62.3125 
Q 48.875 64.0625 45.09375 64.984375 
Q 41.3125 65.921875 37.59375 65.921875 
Q 27.828125 65.921875 22.671875 59.328125 
Q 17.53125 52.734375 16.796875 39.40625 
Q 19.671875 43.65625 24.015625 45.921875 
Q 28.375 48.1875 33.59375 48.1875 
Q 44.578125 48.1875 50.953125 41.515625 
Q 57.328125 34.859375 57.328125 23.390625 
Q 57.328125 12.15625 50.6875 5.359375 
Q 44.046875 -1.421875 33.015625 -1.421875 
Q 20.359375 -1.421875 13.671875 8.265625 
Q 6.984375 17.96875 6.984375 36.375 
Q 6.984375 53.65625 15.1875 63.9375 
Q 23.390625 74.21875 37.203125 74.21875 
Q 40.921875 74.21875 44.703125 73.484375 
Q 48.484375 72.75 52.59375 71.296875 
z
&quot; id=&quot;DejaVuSans-54&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 72.197922)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-54&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_8&quot;&gt;
     &lt;g id=&quot;line2d_10&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#m66a3796414&quot; y=&quot;37.178799&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_10&quot;&gt;
      &lt;!-- 700 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 8.203125 72.90625 
L 55.078125 72.90625 
L 55.078125 68.703125 
L 28.609375 0 
L 18.3125 0 
L 43.21875 64.59375 
L 8.203125 64.59375 
z
&quot; id=&quot;DejaVuSans-55&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 40.978018)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-55&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;text_11&quot;&gt;
     &lt;!-- Tokens --&gt;
     &lt;g transform=&quot;translate(14.798438 155.845469)rotate(-90)scale(0.1 -0.1)&quot;&gt;
      &lt;use xlink:href=&quot;#DejaVuSans-84&quot; /&gt;
      &lt;use x=&quot;44.083984&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
      &lt;use x=&quot;105.265625&quot; xlink:href=&quot;#DejaVuSans-107&quot; /&gt;
      &lt;use x=&quot;159.550781&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
      &lt;use x=&quot;221.074219&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
      &lt;use x=&quot;284.453125&quot; xlink:href=&quot;#DejaVuSans-115&quot; /&gt;
     &lt;/g&gt;
    &lt;/g&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_7&quot;&gt;
    &lt;path d=&quot;M 46.965625 255.718125 
L 46.965625 22.318125 
&quot; style=&quot;fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_8&quot;&gt;
    &lt;path d=&quot;M 417.490625 255.718125 
L 417.490625 22.318125 
&quot; style=&quot;fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_9&quot;&gt;
    &lt;path d=&quot;M 46.965625 255.718125 
L 417.490625 255.718125 
&quot; style=&quot;fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_10&quot;&gt;
    &lt;path d=&quot;M 46.965625 22.318125 
L 417.490625 22.318125 
&quot; style=&quot;fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;text_12&quot;&gt;
    &lt;!-- Tokens before and after --&gt;
    &lt;defs&gt;
     &lt;path d=&quot;M 48.6875 27.296875 
Q 48.6875 37.203125 44.609375 42.84375 
Q 40.53125 48.484375 33.40625 48.484375 
Q 26.265625 48.484375 22.1875 42.84375 
Q 18.109375 37.203125 18.109375 27.296875 
Q 18.109375 17.390625 22.1875 11.75 
Q 26.265625 6.109375 33.40625 6.109375 
Q 40.53125 6.109375 44.609375 11.75 
Q 48.6875 17.390625 48.6875 27.296875 
z
M 18.109375 46.390625 
Q 20.953125 51.265625 25.265625 53.625 
Q 29.59375 56 35.59375 56 
Q 45.5625 56 51.78125 48.09375 
Q 58.015625 40.1875 58.015625 27.296875 
Q 58.015625 14.40625 51.78125 6.484375 
Q 45.5625 -1.421875 35.59375 -1.421875 
Q 29.59375 -1.421875 25.265625 0.953125 
Q 20.953125 3.328125 18.109375 8.203125 
L 18.109375 0 
L 9.078125 0 
L 9.078125 75.984375 
L 18.109375 75.984375 
z
&quot; id=&quot;DejaVuSans-98&quot; /&gt;
     &lt;path d=&quot;M 37.109375 75.984375 
L 37.109375 68.5 
L 28.515625 68.5 
Q 23.6875 68.5 21.796875 66.546875 
Q 19.921875 64.59375 19.921875 59.515625 
L 19.921875 54.6875 
L 34.71875 54.6875 
L 34.71875 47.703125 
L 19.921875 47.703125 
L 19.921875 0 
L 10.890625 0 
L 10.890625 47.703125 
L 2.296875 47.703125 
L 2.296875 54.6875 
L 10.890625 54.6875 
L 10.890625 58.5 
Q 10.890625 67.625 15.140625 71.796875 
Q 19.390625 75.984375 28.609375 75.984375 
z
&quot; id=&quot;DejaVuSans-102&quot; /&gt;
     &lt;path d=&quot;M 41.109375 46.296875 
Q 39.59375 47.171875 37.8125 47.578125 
Q 36.03125 48 33.890625 48 
Q 26.265625 48 22.1875 43.046875 
Q 18.109375 38.09375 18.109375 28.8125 
L 18.109375 0 
L 9.078125 0 
L 9.078125 54.6875 
L 18.109375 54.6875 
L 18.109375 46.1875 
Q 20.953125 51.171875 25.484375 53.578125 
Q 30.03125 56 36.53125 56 
Q 37.453125 56 38.578125 55.875 
Q 39.703125 55.765625 41.0625 55.515625 
z
&quot; id=&quot;DejaVuSans-114&quot; /&gt;
     &lt;path d=&quot;M 34.28125 27.484375 
Q 23.390625 27.484375 19.1875 25 
Q 14.984375 22.515625 14.984375 16.5 
Q 14.984375 11.71875 18.140625 8.90625 
Q 21.296875 6.109375 26.703125 6.109375 
Q 34.1875 6.109375 38.703125 11.40625 
Q 43.21875 16.703125 43.21875 25.484375 
L 43.21875 27.484375 
z
M 52.203125 31.203125 
L 52.203125 0 
L 43.21875 0 
L 43.21875 8.296875 
Q 40.140625 3.328125 35.546875 0.953125 
Q 30.953125 -1.421875 24.3125 -1.421875 
Q 15.921875 -1.421875 10.953125 3.296875 
Q 6 8.015625 6 15.921875 
Q 6 25.140625 12.171875 29.828125 
Q 18.359375 34.515625 30.609375 34.515625 
L 43.21875 34.515625 
L 43.21875 35.40625 
Q 43.21875 41.609375 39.140625 45 
Q 35.0625 48.390625 27.6875 48.390625 
Q 23 48.390625 18.546875 47.265625 
Q 14.109375 46.140625 10.015625 43.890625 
L 10.015625 52.203125 
Q 14.9375 54.109375 19.578125 55.046875 
Q 24.21875 56 28.609375 56 
Q 40.484375 56 46.34375 49.84375 
Q 52.203125 43.703125 52.203125 31.203125 
z
&quot; id=&quot;DejaVuSans-97&quot; /&gt;
     &lt;path d=&quot;M 45.40625 46.390625 
L 45.40625 75.984375 
L 54.390625 75.984375 
L 54.390625 0 
L 45.40625 0 
L 45.40625 8.203125 
Q 42.578125 3.328125 38.25 0.953125 
Q 33.9375 -1.421875 27.875 -1.421875 
Q 17.96875 -1.421875 11.734375 6.484375 
Q 5.515625 14.40625 5.515625 27.296875 
Q 5.515625 40.1875 11.734375 48.09375 
Q 17.96875 56 27.875 56 
Q 33.9375 56 38.25 53.625 
Q 42.578125 51.265625 45.40625 46.390625 
z
M 14.796875 27.296875 
Q 14.796875 17.390625 18.875 11.75 
Q 22.953125 6.109375 30.078125 6.109375 
Q 37.203125 6.109375 41.296875 11.75 
Q 45.40625 17.390625 45.40625 27.296875 
Q 45.40625 37.203125 41.296875 42.84375 
Q 37.203125 48.484375 30.078125 48.484375 
Q 22.953125 48.484375 18.875 42.84375 
Q 14.796875 37.203125 14.796875 27.296875 
z
&quot; id=&quot;DejaVuSans-100&quot; /&gt;
     &lt;path d=&quot;M 18.3125 70.21875 
L 18.3125 54.6875 
L 36.8125 54.6875 
L 36.8125 47.703125 
L 18.3125 47.703125 
L 18.3125 18.015625 
Q 18.3125 11.328125 20.140625 9.421875 
Q 21.96875 7.515625 27.59375 7.515625 
L 36.8125 7.515625 
L 36.8125 0 
L 27.59375 0 
Q 17.1875 0 13.234375 3.875 
Q 9.28125 7.765625 9.28125 18.015625 
L 9.28125 47.703125 
L 2.6875 47.703125 
L 2.6875 54.6875 
L 9.28125 54.6875 
L 9.28125 70.21875 
z
&quot; id=&quot;DejaVuSans-116&quot; /&gt;
    &lt;/defs&gt;
    &lt;g transform=&quot;translate(161.52375 16.318125)scale(0.12 -0.12)&quot;&gt;
     &lt;use xlink:href=&quot;#DejaVuSans-84&quot; /&gt;
     &lt;use x=&quot;44.083984&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
     &lt;use x=&quot;105.265625&quot; xlink:href=&quot;#DejaVuSans-107&quot; /&gt;
     &lt;use x=&quot;159.550781&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
     &lt;use x=&quot;221.074219&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
     &lt;use x=&quot;284.453125&quot; xlink:href=&quot;#DejaVuSans-115&quot; /&gt;
     &lt;use x=&quot;336.552734&quot; xlink:href=&quot;#DejaVuSans-32&quot; /&gt;
     &lt;use x=&quot;368.339844&quot; xlink:href=&quot;#DejaVuSans-98&quot; /&gt;
     &lt;use x=&quot;431.816406&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
     &lt;use x=&quot;493.339844&quot; xlink:href=&quot;#DejaVuSans-102&quot; /&gt;
     &lt;use x=&quot;528.544922&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
     &lt;use x=&quot;589.726562&quot; xlink:href=&quot;#DejaVuSans-114&quot; /&gt;
     &lt;use x=&quot;628.589844&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
     &lt;use x=&quot;690.113281&quot; xlink:href=&quot;#DejaVuSans-32&quot; /&gt;
     &lt;use x=&quot;721.900391&quot; xlink:href=&quot;#DejaVuSans-97&quot; /&gt;
     &lt;use x=&quot;783.179688&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
     &lt;use x=&quot;846.558594&quot; xlink:href=&quot;#DejaVuSans-100&quot; /&gt;
     &lt;use x=&quot;910.035156&quot; xlink:href=&quot;#DejaVuSans-32&quot; /&gt;
     &lt;use x=&quot;941.822266&quot; xlink:href=&quot;#DejaVuSans-97&quot; /&gt;
     &lt;use x=&quot;1003.101562&quot; xlink:href=&quot;#DejaVuSans-102&quot; /&gt;
     &lt;use x=&quot;1036.556641&quot; xlink:href=&quot;#DejaVuSans-116&quot; /&gt;
     &lt;use x=&quot;1075.765625&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
     &lt;use x=&quot;1137.289062&quot; xlink:href=&quot;#DejaVuSans-114&quot; /&gt;
    &lt;/g&gt;
   &lt;/g&gt;
   &lt;g id=&quot;legend_1&quot;&gt;
    &lt;g id=&quot;patch_11&quot;&gt;
     &lt;path d=&quot;M 345.798437 59.674375 
L 410.490625 59.674375 
Q 412.490625 59.674375 412.490625 57.674375 
L 412.490625 29.318125 
Q 412.490625 27.318125 410.490625 27.318125 
L 345.798437 27.318125 
Q 343.798437 27.318125 343.798437 29.318125 
L 343.798437 57.674375 
Q 343.798437 59.674375 345.798437 59.674375 
z
&quot; style=&quot;fill:#ffffff;opacity:0.8;stroke:#cccccc;stroke-linejoin:miter;&quot; /&gt;
    &lt;/g&gt;
    &lt;g id=&quot;patch_12&quot;&gt;
     &lt;path d=&quot;M 347.798437 38.916562 
L 367.798437 38.916562 
L 367.798437 31.916562 
L 347.798437 31.916562 
z
&quot; style=&quot;fill:#1f77b4;&quot; /&gt;
    &lt;/g&gt;
    &lt;g id=&quot;text_13&quot;&gt;
     &lt;!-- Before --&gt;
     &lt;defs&gt;
      &lt;path d=&quot;M 19.671875 34.8125 
L 19.671875 8.109375 
L 35.5 8.109375 
Q 43.453125 8.109375 47.28125 11.40625 
Q 51.125 14.703125 51.125 21.484375 
Q 51.125 28.328125 47.28125 31.5625 
Q 43.453125 34.8125 35.5 34.8125 
z
M 19.671875 64.796875 
L 19.671875 42.828125 
L 34.28125 42.828125 
Q 41.5 42.828125 45.03125 45.53125 
Q 48.578125 48.25 48.578125 53.8125 
Q 48.578125 59.328125 45.03125 62.0625 
Q 41.5 64.796875 34.28125 64.796875 
z
M 9.8125 72.90625 
L 35.015625 72.90625 
Q 46.296875 72.90625 52.390625 68.21875 
Q 58.5 63.53125 58.5 54.890625 
Q 58.5 48.1875 55.375 44.234375 
Q 52.25 40.28125 46.1875 39.3125 
Q 53.46875 37.75 57.5 32.78125 
Q 61.53125 27.828125 61.53125 20.40625 
Q 61.53125 10.640625 54.890625 5.3125 
Q 48.25 0 35.984375 0 
L 9.8125 0 
z
&quot; id=&quot;DejaVuSans-66&quot; /&gt;
     &lt;/defs&gt;
     &lt;g transform=&quot;translate(375.798437 38.916562)scale(0.1 -0.1)&quot;&gt;
      &lt;use xlink:href=&quot;#DejaVuSans-66&quot; /&gt;
      &lt;use x=&quot;68.603516&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
      &lt;use x=&quot;130.126953&quot; xlink:href=&quot;#DejaVuSans-102&quot; /&gt;
      &lt;use x=&quot;165.332031&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
      &lt;use x=&quot;226.513672&quot; xlink:href=&quot;#DejaVuSans-114&quot; /&gt;
      &lt;use x=&quot;265.376953&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;patch_13&quot;&gt;
     &lt;path d=&quot;M 347.798437 53.594687 
L 367.798437 53.594687 
L 367.798437 46.594687 
L 347.798437 46.594687 
z
&quot; style=&quot;fill:#ff7f0e;&quot; /&gt;
    &lt;/g&gt;
    &lt;g id=&quot;text_14&quot;&gt;
     &lt;!-- After --&gt;
     &lt;defs&gt;
      &lt;path d=&quot;M 34.1875 63.1875 
L 20.796875 26.90625 
L 47.609375 26.90625 
z
M 28.609375 72.90625 
L 39.796875 72.90625 
L 67.578125 0 
L 57.328125 0 
L 50.6875 18.703125 
L 17.828125 18.703125 
L 11.1875 0 
L 0.78125 0 
z
&quot; id=&quot;DejaVuSans-65&quot; /&gt;
     &lt;/defs&gt;
     &lt;g transform=&quot;translate(375.798437 53.594687)scale(0.1 -0.1)&quot;&gt;
      &lt;use xlink:href=&quot;#DejaVuSans-65&quot; /&gt;
      &lt;use x=&quot;64.783203&quot; xlink:href=&quot;#DejaVuSans-102&quot; /&gt;
      &lt;use x=&quot;98.238281&quot; xlink:href=&quot;#DejaVuSans-116&quot; /&gt;
      &lt;use x=&quot;137.447266&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
      &lt;use x=&quot;198.970703&quot; xlink:href=&quot;#DejaVuSans-114&quot; /&gt;
     &lt;/g&gt;
    &lt;/g&gt;
   &lt;/g&gt;
  &lt;/g&gt;
 &lt;/g&gt;
 &lt;defs&gt;
  &lt;clipPath id=&quot;pcebb41a186&quot;&gt;
   &lt;rect height=&quot;233.4&quot; width=&quot;370.525&quot; x=&quot;46.965625&quot; y=&quot;22.318125&quot; /&gt;
  &lt;/clipPath&gt;
 &lt;/defs&gt;
&lt;/svg&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uSIF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ft_wv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang_freq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sv&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;question&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocess_funcs_lemma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sfe_format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IndexedList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sfe_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;



&lt;div class=&quot;output_text output_subarea output_execute_result&quot;&gt;
&lt;pre&gt;(75, 712)&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_n_closest_questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;kan min hamster bli smittad?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocess_funcs_lemma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;0.75: Kan covid-19 smitta mellan djur och människa och kan mitt husdjur smittas av viruset?
0.69: Hur smittar covid-19?
0.68: Kan man smittas flera gånger av det nya coronaviruset?
0.63: Smittar covid-19 via vatten och mat?
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_n_closest_questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hur får jag min son att förstå?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocess_funcs_lemma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;0.79: Vad är covid-19?
0.75: Hur sjuk blir man av covid-19?
0.74: Hur länge är man sjuk av covid-19?
0.66: Om en person i familjen är sjuk - måste alla stanna hemma då?
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Analyzing-the-results&quot;&gt;Analyzing the results&lt;a class=&quot;anchor-link&quot; href=&quot;#Analyzing-the-results&quot;&gt; &lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Improvements?&lt;/strong&gt;&lt;br /&gt;
Not really, the model has an improved response to the 'hamster-question' but it's way off when asking about the son.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why?&lt;/strong&gt;&lt;br /&gt;
The most likely explanation is that even though we reduce the input dimensions an awful lot we remove dimensions that brings value, and removing value is bad - just as was touched upon previously. It might be helpful in some cases, perhaps this could prove helpful for a supervised approach such as TF-IDF + Support Vector Machine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Any good parts?&lt;/strong&gt;&lt;br /&gt;
Yes, we can see some pretty hefty memory-requirement reductions when working with other types of models by applying this. Actually, in the case of this we could reduce the memory requirement by lemmatizing the dictionary of the embeddings and removing all non-lemmas. All in all, this could lead to a small performance loss but great memory win.&lt;/p&gt;
&lt;h4 id=&quot;Stop-words&quot;&gt;Stop words&lt;a class=&quot;anchor-link&quot; href=&quot;#Stop-words&quot;&gt; &lt;/a&gt;&lt;/h4&gt;&lt;p&gt;As promised we shall apply stop-words, but as we saw no performance gain with lemmatization we'll keep the old tokenization.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_stop_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sv&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;clean_stop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;preprocessing_func_stop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lowercase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stanza_tokenize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clean_stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uSIF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ft_wv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang_freq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sv&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;question&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocessing_func_stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# We don&amp;#39;t need to remove stop-words in the sentences in our &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sfe_format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IndexedList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sfe_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;preprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;hur förklarar jag för min dotter och son?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocessing_func_stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;



&lt;div class=&quot;output_text output_subarea output_execute_result&quot;&gt;
&lt;pre&gt;[&amp;#39;förklarar&amp;#39;, &amp;#39;dotter&amp;#39;, &amp;#39;son&amp;#39;, &amp;#39;?&amp;#39;]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_dimensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preprocessing_func_stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;Previously: 629 tokens (289 unique)
Post: 417 tokens (206 unique)
Token reduction by ~28.7 %
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_area&quot;&gt;


&lt;div class=&quot;output_svg output_subarea &quot;&gt;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;no&quot;?&gt;
&amp;lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot;
  &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&amp;gt;
&lt;!-- Created with matplotlib (https://matplotlib.org/) --&gt;
&lt;svg height=&quot;279.59625pt&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 424.690625 279.59625&quot; width=&quot;424.690625pt&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;
 &lt;defs&gt;
  &lt;style type=&quot;text/css&quot;&gt;
*{stroke-linecap:butt;stroke-linejoin:round;}
  &lt;/style&gt;
 &lt;/defs&gt;
 &lt;g id=&quot;figure_1&quot;&gt;
  &lt;g id=&quot;patch_1&quot;&gt;
   &lt;path d=&quot;M -0 279.59625 
L 424.690625 279.59625 
L 424.690625 0 
L -0 0 
z
&quot; style=&quot;fill:none;&quot; /&gt;
  &lt;/g&gt;
  &lt;g id=&quot;axes_1&quot;&gt;
   &lt;g id=&quot;patch_2&quot;&gt;
    &lt;path d=&quot;M 46.965625 255.718125 
L 417.490625 255.718125 
L 417.490625 22.318125 
L 46.965625 22.318125 
z
&quot; style=&quot;fill:#ffffff;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_3&quot;&gt;
    &lt;path clip-path=&quot;url(#pa0ce76070e)&quot; d=&quot;M 63.80767 255.718125 
L 133.157269 255.718125 
L 133.157269 33.432411 
L 63.80767 33.432411 
z
&quot; style=&quot;fill:#1f77b4;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_4&quot;&gt;
    &lt;path clip-path=&quot;url(#pa0ce76070e)&quot; d=&quot;M 261.949382 255.718125 
L 331.298981 255.718125 
L 331.298981 153.586851 
L 261.949382 153.586851 
z
&quot; style=&quot;fill:#1f77b4;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_5&quot;&gt;
    &lt;path clip-path=&quot;url(#pa0ce76070e)&quot; d=&quot;M 133.157269 255.718125 
L 202.506868 255.718125 
L 202.506868 108.352238 
L 133.157269 108.352238 
z
&quot; style=&quot;fill:#ff7f0e;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_6&quot;&gt;
    &lt;path clip-path=&quot;url(#pa0ce76070e)&quot; d=&quot;M 331.298981 255.718125 
L 400.64858 255.718125 
L 400.64858 182.91867 
L 331.298981 182.91867 
z
&quot; style=&quot;fill:#ff7f0e;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;matplotlib.axis_1&quot;&gt;
    &lt;g id=&quot;xtick_1&quot;&gt;
     &lt;g id=&quot;line2d_1&quot;&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 0 0 
L 0 3.5 
&quot; id=&quot;m6b1ba60724&quot; style=&quot;stroke:#000000;stroke-width:0.8;&quot; /&gt;
      &lt;/defs&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;133.157269&quot; xlink:href=&quot;#m6b1ba60724&quot; y=&quot;255.718125&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_1&quot;&gt;
      &lt;!-- #Tokens --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 51.125 44 
L 36.921875 44 
L 32.8125 27.6875 
L 47.125 27.6875 
z
M 43.796875 71.78125 
L 38.71875 51.515625 
L 52.984375 51.515625 
L 58.109375 71.78125 
L 65.921875 71.78125 
L 60.890625 51.515625 
L 76.125 51.515625 
L 76.125 44 
L 58.984375 44 
L 54.984375 27.6875 
L 70.515625 27.6875 
L 70.515625 20.21875 
L 53.078125 20.21875 
L 48 0 
L 40.1875 0 
L 45.21875 20.21875 
L 30.90625 20.21875 
L 25.875 0 
L 18.015625 0 
L 23.09375 20.21875 
L 7.71875 20.21875 
L 7.71875 27.6875 
L 24.90625 27.6875 
L 29 44 
L 13.28125 44 
L 13.28125 51.515625 
L 30.90625 51.515625 
L 35.890625 71.78125 
z
&quot; id=&quot;DejaVuSans-35&quot; /&gt;
       &lt;path d=&quot;M -0.296875 72.90625 
L 61.375 72.90625 
L 61.375 64.59375 
L 35.5 64.59375 
L 35.5 0 
L 25.59375 0 
L 25.59375 64.59375 
L -0.296875 64.59375 
z
&quot; id=&quot;DejaVuSans-84&quot; /&gt;
       &lt;path d=&quot;M 30.609375 48.390625 
Q 23.390625 48.390625 19.1875 42.75 
Q 14.984375 37.109375 14.984375 27.296875 
Q 14.984375 17.484375 19.15625 11.84375 
Q 23.34375 6.203125 30.609375 6.203125 
Q 37.796875 6.203125 41.984375 11.859375 
Q 46.1875 17.53125 46.1875 27.296875 
Q 46.1875 37.015625 41.984375 42.703125 
Q 37.796875 48.390625 30.609375 48.390625 
z
M 30.609375 56 
Q 42.328125 56 49.015625 48.375 
Q 55.71875 40.765625 55.71875 27.296875 
Q 55.71875 13.875 49.015625 6.21875 
Q 42.328125 -1.421875 30.609375 -1.421875 
Q 18.84375 -1.421875 12.171875 6.21875 
Q 5.515625 13.875 5.515625 27.296875 
Q 5.515625 40.765625 12.171875 48.375 
Q 18.84375 56 30.609375 56 
z
&quot; id=&quot;DejaVuSans-111&quot; /&gt;
       &lt;path d=&quot;M 9.078125 75.984375 
L 18.109375 75.984375 
L 18.109375 31.109375 
L 44.921875 54.6875 
L 56.390625 54.6875 
L 27.390625 29.109375 
L 57.625 0 
L 45.90625 0 
L 18.109375 26.703125 
L 18.109375 0 
L 9.078125 0 
z
&quot; id=&quot;DejaVuSans-107&quot; /&gt;
       &lt;path d=&quot;M 56.203125 29.59375 
L 56.203125 25.203125 
L 14.890625 25.203125 
Q 15.484375 15.921875 20.484375 11.0625 
Q 25.484375 6.203125 34.421875 6.203125 
Q 39.59375 6.203125 44.453125 7.46875 
Q 49.3125 8.734375 54.109375 11.28125 
L 54.109375 2.78125 
Q 49.265625 0.734375 44.1875 -0.34375 
Q 39.109375 -1.421875 33.890625 -1.421875 
Q 20.796875 -1.421875 13.15625 6.1875 
Q 5.515625 13.8125 5.515625 26.8125 
Q 5.515625 40.234375 12.765625 48.109375 
Q 20.015625 56 32.328125 56 
Q 43.359375 56 49.78125 48.890625 
Q 56.203125 41.796875 56.203125 29.59375 
z
M 47.21875 32.234375 
Q 47.125 39.59375 43.09375 43.984375 
Q 39.0625 48.390625 32.421875 48.390625 
Q 24.90625 48.390625 20.390625 44.140625 
Q 15.875 39.890625 15.1875 32.171875 
z
&quot; id=&quot;DejaVuSans-101&quot; /&gt;
       &lt;path d=&quot;M 54.890625 33.015625 
L 54.890625 0 
L 45.90625 0 
L 45.90625 32.71875 
Q 45.90625 40.484375 42.875 44.328125 
Q 39.84375 48.1875 33.796875 48.1875 
Q 26.515625 48.1875 22.3125 43.546875 
Q 18.109375 38.921875 18.109375 30.90625 
L 18.109375 0 
L 9.078125 0 
L 9.078125 54.6875 
L 18.109375 54.6875 
L 18.109375 46.1875 
Q 21.34375 51.125 25.703125 53.5625 
Q 30.078125 56 35.796875 56 
Q 45.21875 56 50.046875 50.171875 
Q 54.890625 44.34375 54.890625 33.015625 
z
&quot; id=&quot;DejaVuSans-110&quot; /&gt;
       &lt;path d=&quot;M 44.28125 53.078125 
L 44.28125 44.578125 
Q 40.484375 46.53125 36.375 47.5 
Q 32.28125 48.484375 27.875 48.484375 
Q 21.1875 48.484375 17.84375 46.4375 
Q 14.5 44.390625 14.5 40.28125 
Q 14.5 37.15625 16.890625 35.375 
Q 19.28125 33.59375 26.515625 31.984375 
L 29.59375 31.296875 
Q 39.15625 29.25 43.1875 25.515625 
Q 47.21875 21.78125 47.21875 15.09375 
Q 47.21875 7.46875 41.1875 3.015625 
Q 35.15625 -1.421875 24.609375 -1.421875 
Q 20.21875 -1.421875 15.453125 -0.5625 
Q 10.6875 0.296875 5.421875 2 
L 5.421875 11.28125 
Q 10.40625 8.6875 15.234375 7.390625 
Q 20.0625 6.109375 24.8125 6.109375 
Q 31.15625 6.109375 34.5625 8.28125 
Q 37.984375 10.453125 37.984375 14.40625 
Q 37.984375 18.0625 35.515625 20.015625 
Q 33.0625 21.96875 24.703125 23.78125 
L 21.578125 24.515625 
Q 13.234375 26.265625 9.515625 29.90625 
Q 5.8125 33.546875 5.8125 39.890625 
Q 5.8125 47.609375 11.28125 51.796875 
Q 16.75 56 26.8125 56 
Q 31.78125 56 36.171875 55.265625 
Q 40.578125 54.546875 44.28125 53.078125 
z
&quot; id=&quot;DejaVuSans-115&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(112.140082 270.316563)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-35&quot; /&gt;
       &lt;use x=&quot;83.789062&quot; xlink:href=&quot;#DejaVuSans-84&quot; /&gt;
       &lt;use x=&quot;127.873047&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
       &lt;use x=&quot;189.054688&quot; xlink:href=&quot;#DejaVuSans-107&quot; /&gt;
       &lt;use x=&quot;243.339844&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
       &lt;use x=&quot;304.863281&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
       &lt;use x=&quot;368.242188&quot; xlink:href=&quot;#DejaVuSans-115&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;xtick_2&quot;&gt;
     &lt;g id=&quot;line2d_2&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;331.298981&quot; xlink:href=&quot;#m6b1ba60724&quot; y=&quot;255.718125&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_2&quot;&gt;
      &lt;!-- #Unique Tokens --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 8.6875 72.90625 
L 18.609375 72.90625 
L 18.609375 28.609375 
Q 18.609375 16.890625 22.84375 11.734375 
Q 27.09375 6.59375 36.625 6.59375 
Q 46.09375 6.59375 50.34375 11.734375 
Q 54.59375 16.890625 54.59375 28.609375 
L 54.59375 72.90625 
L 64.5 72.90625 
L 64.5 27.390625 
Q 64.5 13.140625 57.4375 5.859375 
Q 50.390625 -1.421875 36.625 -1.421875 
Q 22.796875 -1.421875 15.734375 5.859375 
Q 8.6875 13.140625 8.6875 27.390625 
z
&quot; id=&quot;DejaVuSans-85&quot; /&gt;
       &lt;path d=&quot;M 9.421875 54.6875 
L 18.40625 54.6875 
L 18.40625 0 
L 9.421875 0 
z
M 9.421875 75.984375 
L 18.40625 75.984375 
L 18.40625 64.59375 
L 9.421875 64.59375 
z
&quot; id=&quot;DejaVuSans-105&quot; /&gt;
       &lt;path d=&quot;M 14.796875 27.296875 
Q 14.796875 17.390625 18.875 11.75 
Q 22.953125 6.109375 30.078125 6.109375 
Q 37.203125 6.109375 41.296875 11.75 
Q 45.40625 17.390625 45.40625 27.296875 
Q 45.40625 37.203125 41.296875 42.84375 
Q 37.203125 48.484375 30.078125 48.484375 
Q 22.953125 48.484375 18.875 42.84375 
Q 14.796875 37.203125 14.796875 27.296875 
z
M 45.40625 8.203125 
Q 42.578125 3.328125 38.25 0.953125 
Q 33.9375 -1.421875 27.875 -1.421875 
Q 17.96875 -1.421875 11.734375 6.484375 
Q 5.515625 14.40625 5.515625 27.296875 
Q 5.515625 40.1875 11.734375 48.09375 
Q 17.96875 56 27.875 56 
Q 33.9375 56 38.25 53.625 
Q 42.578125 51.265625 45.40625 46.390625 
L 45.40625 54.6875 
L 54.390625 54.6875 
L 54.390625 -20.796875 
L 45.40625 -20.796875 
z
&quot; id=&quot;DejaVuSans-113&quot; /&gt;
       &lt;path d=&quot;M 8.5 21.578125 
L 8.5 54.6875 
L 17.484375 54.6875 
L 17.484375 21.921875 
Q 17.484375 14.15625 20.5 10.265625 
Q 23.53125 6.390625 29.59375 6.390625 
Q 36.859375 6.390625 41.078125 11.03125 
Q 45.3125 15.671875 45.3125 23.6875 
L 45.3125 54.6875 
L 54.296875 54.6875 
L 54.296875 0 
L 45.3125 0 
L 45.3125 8.40625 
Q 42.046875 3.421875 37.71875 1 
Q 33.40625 -1.421875 27.6875 -1.421875 
Q 18.265625 -1.421875 13.375 4.4375 
Q 8.5 10.296875 8.5 21.578125 
z
M 31.109375 56 
z
&quot; id=&quot;DejaVuSans-117&quot; /&gt;
       &lt;path id=&quot;DejaVuSans-32&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(291.056012 270.316563)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-35&quot; /&gt;
       &lt;use x=&quot;83.789062&quot; xlink:href=&quot;#DejaVuSans-85&quot; /&gt;
       &lt;use x=&quot;156.982422&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
       &lt;use x=&quot;220.361328&quot; xlink:href=&quot;#DejaVuSans-105&quot; /&gt;
       &lt;use x=&quot;248.144531&quot; xlink:href=&quot;#DejaVuSans-113&quot; /&gt;
       &lt;use x=&quot;311.621094&quot; xlink:href=&quot;#DejaVuSans-117&quot; /&gt;
       &lt;use x=&quot;375&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
       &lt;use x=&quot;436.523438&quot; xlink:href=&quot;#DejaVuSans-32&quot; /&gt;
       &lt;use x=&quot;468.310547&quot; xlink:href=&quot;#DejaVuSans-84&quot; /&gt;
       &lt;use x=&quot;512.394531&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
       &lt;use x=&quot;573.576172&quot; xlink:href=&quot;#DejaVuSans-107&quot; /&gt;
       &lt;use x=&quot;627.861328&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
       &lt;use x=&quot;689.384766&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
       &lt;use x=&quot;752.763672&quot; xlink:href=&quot;#DejaVuSans-115&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
   &lt;/g&gt;
   &lt;g id=&quot;matplotlib.axis_2&quot;&gt;
    &lt;g id=&quot;ytick_1&quot;&gt;
     &lt;g id=&quot;line2d_3&quot;&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 0 0 
L -3.5 0 
&quot; id=&quot;me5044283a3&quot; style=&quot;stroke:#000000;stroke-width:0.8;&quot; /&gt;
      &lt;/defs&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#me5044283a3&quot; y=&quot;255.718125&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_3&quot;&gt;
      &lt;!-- 0 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 31.78125 66.40625 
Q 24.171875 66.40625 20.328125 58.90625 
Q 16.5 51.421875 16.5 36.375 
Q 16.5 21.390625 20.328125 13.890625 
Q 24.171875 6.390625 31.78125 6.390625 
Q 39.453125 6.390625 43.28125 13.890625 
Q 47.125 21.390625 47.125 36.375 
Q 47.125 51.421875 43.28125 58.90625 
Q 39.453125 66.40625 31.78125 66.40625 
z
M 31.78125 74.21875 
Q 44.046875 74.21875 50.515625 64.515625 
Q 56.984375 54.828125 56.984375 36.375 
Q 56.984375 17.96875 50.515625 8.265625 
Q 44.046875 -1.421875 31.78125 -1.421875 
Q 19.53125 -1.421875 13.0625 8.265625 
Q 6.59375 17.96875 6.59375 36.375 
Q 6.59375 54.828125 13.0625 64.515625 
Q 19.53125 74.21875 31.78125 74.21875 
z
&quot; id=&quot;DejaVuSans-48&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(33.603125 259.517344)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_2&quot;&gt;
     &lt;g id=&quot;line2d_4&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#me5044283a3&quot; y=&quot;220.378584&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_4&quot;&gt;
      &lt;!-- 100 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 12.40625 8.296875 
L 28.515625 8.296875 
L 28.515625 63.921875 
L 10.984375 60.40625 
L 10.984375 69.390625 
L 28.421875 72.90625 
L 38.28125 72.90625 
L 38.28125 8.296875 
L 54.390625 8.296875 
L 54.390625 0 
L 12.40625 0 
z
&quot; id=&quot;DejaVuSans-49&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 224.177803)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-49&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_3&quot;&gt;
     &lt;g id=&quot;line2d_5&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#me5044283a3&quot; y=&quot;185.039043&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_5&quot;&gt;
      &lt;!-- 200 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 19.1875 8.296875 
L 53.609375 8.296875 
L 53.609375 0 
L 7.328125 0 
L 7.328125 8.296875 
Q 12.9375 14.109375 22.625 23.890625 
Q 32.328125 33.6875 34.8125 36.53125 
Q 39.546875 41.84375 41.421875 45.53125 
Q 43.3125 49.21875 43.3125 52.78125 
Q 43.3125 58.59375 39.234375 62.25 
Q 35.15625 65.921875 28.609375 65.921875 
Q 23.96875 65.921875 18.8125 64.3125 
Q 13.671875 62.703125 7.8125 59.421875 
L 7.8125 69.390625 
Q 13.765625 71.78125 18.9375 73 
Q 24.125 74.21875 28.421875 74.21875 
Q 39.75 74.21875 46.484375 68.546875 
Q 53.21875 62.890625 53.21875 53.421875 
Q 53.21875 48.921875 51.53125 44.890625 
Q 49.859375 40.875 45.40625 35.40625 
Q 44.1875 33.984375 37.640625 27.21875 
Q 31.109375 20.453125 19.1875 8.296875 
z
&quot; id=&quot;DejaVuSans-50&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 188.838261)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-50&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_4&quot;&gt;
     &lt;g id=&quot;line2d_6&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#me5044283a3&quot; y=&quot;149.699501&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_6&quot;&gt;
      &lt;!-- 300 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 40.578125 39.3125 
Q 47.65625 37.796875 51.625 33 
Q 55.609375 28.21875 55.609375 21.1875 
Q 55.609375 10.40625 48.1875 4.484375 
Q 40.765625 -1.421875 27.09375 -1.421875 
Q 22.515625 -1.421875 17.65625 -0.515625 
Q 12.796875 0.390625 7.625 2.203125 
L 7.625 11.71875 
Q 11.71875 9.328125 16.59375 8.109375 
Q 21.484375 6.890625 26.8125 6.890625 
Q 36.078125 6.890625 40.9375 10.546875 
Q 45.796875 14.203125 45.796875 21.1875 
Q 45.796875 27.640625 41.28125 31.265625 
Q 36.765625 34.90625 28.71875 34.90625 
L 20.21875 34.90625 
L 20.21875 43.015625 
L 29.109375 43.015625 
Q 36.375 43.015625 40.234375 45.921875 
Q 44.09375 48.828125 44.09375 54.296875 
Q 44.09375 59.90625 40.109375 62.90625 
Q 36.140625 65.921875 28.71875 65.921875 
Q 24.65625 65.921875 20.015625 65.03125 
Q 15.375 64.15625 9.8125 62.3125 
L 9.8125 71.09375 
Q 15.4375 72.65625 20.34375 73.4375 
Q 25.25 74.21875 29.59375 74.21875 
Q 40.828125 74.21875 47.359375 69.109375 
Q 53.90625 64.015625 53.90625 55.328125 
Q 53.90625 49.265625 50.4375 45.09375 
Q 46.96875 40.921875 40.578125 39.3125 
z
&quot; id=&quot;DejaVuSans-51&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 153.49872)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-51&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_5&quot;&gt;
     &lt;g id=&quot;line2d_7&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#me5044283a3&quot; y=&quot;114.35996&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_7&quot;&gt;
      &lt;!-- 400 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 37.796875 64.3125 
L 12.890625 25.390625 
L 37.796875 25.390625 
z
M 35.203125 72.90625 
L 47.609375 72.90625 
L 47.609375 25.390625 
L 58.015625 25.390625 
L 58.015625 17.1875 
L 47.609375 17.1875 
L 47.609375 0 
L 37.796875 0 
L 37.796875 17.1875 
L 4.890625 17.1875 
L 4.890625 26.703125 
z
&quot; id=&quot;DejaVuSans-52&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 118.159179)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-52&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_6&quot;&gt;
     &lt;g id=&quot;line2d_8&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#me5044283a3&quot; y=&quot;79.020419&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_8&quot;&gt;
      &lt;!-- 500 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 10.796875 72.90625 
L 49.515625 72.90625 
L 49.515625 64.59375 
L 19.828125 64.59375 
L 19.828125 46.734375 
Q 21.96875 47.46875 24.109375 47.828125 
Q 26.265625 48.1875 28.421875 48.1875 
Q 40.625 48.1875 47.75 41.5 
Q 54.890625 34.8125 54.890625 23.390625 
Q 54.890625 11.625 47.5625 5.09375 
Q 40.234375 -1.421875 26.90625 -1.421875 
Q 22.3125 -1.421875 17.546875 -0.640625 
Q 12.796875 0.140625 7.71875 1.703125 
L 7.71875 11.625 
Q 12.109375 9.234375 16.796875 8.0625 
Q 21.484375 6.890625 26.703125 6.890625 
Q 35.15625 6.890625 40.078125 11.328125 
Q 45.015625 15.765625 45.015625 23.390625 
Q 45.015625 31 40.078125 35.4375 
Q 35.15625 39.890625 26.703125 39.890625 
Q 22.75 39.890625 18.8125 39.015625 
Q 14.890625 38.140625 10.796875 36.28125 
z
&quot; id=&quot;DejaVuSans-53&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 82.819638)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-53&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;ytick_7&quot;&gt;
     &lt;g id=&quot;line2d_9&quot;&gt;
      &lt;g&gt;
       &lt;use style=&quot;stroke:#000000;stroke-width:0.8;&quot; x=&quot;46.965625&quot; xlink:href=&quot;#me5044283a3&quot; y=&quot;43.680878&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
     &lt;g id=&quot;text_9&quot;&gt;
      &lt;!-- 600 --&gt;
      &lt;defs&gt;
       &lt;path d=&quot;M 33.015625 40.375 
Q 26.375 40.375 22.484375 35.828125 
Q 18.609375 31.296875 18.609375 23.390625 
Q 18.609375 15.53125 22.484375 10.953125 
Q 26.375 6.390625 33.015625 6.390625 
Q 39.65625 6.390625 43.53125 10.953125 
Q 47.40625 15.53125 47.40625 23.390625 
Q 47.40625 31.296875 43.53125 35.828125 
Q 39.65625 40.375 33.015625 40.375 
z
M 52.59375 71.296875 
L 52.59375 62.3125 
Q 48.875 64.0625 45.09375 64.984375 
Q 41.3125 65.921875 37.59375 65.921875 
Q 27.828125 65.921875 22.671875 59.328125 
Q 17.53125 52.734375 16.796875 39.40625 
Q 19.671875 43.65625 24.015625 45.921875 
Q 28.375 48.1875 33.59375 48.1875 
Q 44.578125 48.1875 50.953125 41.515625 
Q 57.328125 34.859375 57.328125 23.390625 
Q 57.328125 12.15625 50.6875 5.359375 
Q 44.046875 -1.421875 33.015625 -1.421875 
Q 20.359375 -1.421875 13.671875 8.265625 
Q 6.984375 17.96875 6.984375 36.375 
Q 6.984375 53.65625 15.1875 63.9375 
Q 23.390625 74.21875 37.203125 74.21875 
Q 40.921875 74.21875 44.703125 73.484375 
Q 48.484375 72.75 52.59375 71.296875 
z
&quot; id=&quot;DejaVuSans-54&quot; /&gt;
      &lt;/defs&gt;
      &lt;g transform=&quot;translate(20.878125 47.480096)scale(0.1 -0.1)&quot;&gt;
       &lt;use xlink:href=&quot;#DejaVuSans-54&quot; /&gt;
       &lt;use x=&quot;63.623047&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
       &lt;use x=&quot;127.246094&quot; xlink:href=&quot;#DejaVuSans-48&quot; /&gt;
      &lt;/g&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;text_10&quot;&gt;
     &lt;!-- Tokens --&gt;
     &lt;g transform=&quot;translate(14.798438 155.845469)rotate(-90)scale(0.1 -0.1)&quot;&gt;
      &lt;use xlink:href=&quot;#DejaVuSans-84&quot; /&gt;
      &lt;use x=&quot;44.083984&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
      &lt;use x=&quot;105.265625&quot; xlink:href=&quot;#DejaVuSans-107&quot; /&gt;
      &lt;use x=&quot;159.550781&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
      &lt;use x=&quot;221.074219&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
      &lt;use x=&quot;284.453125&quot; xlink:href=&quot;#DejaVuSans-115&quot; /&gt;
     &lt;/g&gt;
    &lt;/g&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_7&quot;&gt;
    &lt;path d=&quot;M 46.965625 255.718125 
L 46.965625 22.318125 
&quot; style=&quot;fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_8&quot;&gt;
    &lt;path d=&quot;M 417.490625 255.718125 
L 417.490625 22.318125 
&quot; style=&quot;fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_9&quot;&gt;
    &lt;path d=&quot;M 46.965625 255.718125 
L 417.490625 255.718125 
&quot; style=&quot;fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;patch_10&quot;&gt;
    &lt;path d=&quot;M 46.965625 22.318125 
L 417.490625 22.318125 
&quot; style=&quot;fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;&quot; /&gt;
   &lt;/g&gt;
   &lt;g id=&quot;text_11&quot;&gt;
    &lt;!-- Tokens before and after --&gt;
    &lt;defs&gt;
     &lt;path d=&quot;M 48.6875 27.296875 
Q 48.6875 37.203125 44.609375 42.84375 
Q 40.53125 48.484375 33.40625 48.484375 
Q 26.265625 48.484375 22.1875 42.84375 
Q 18.109375 37.203125 18.109375 27.296875 
Q 18.109375 17.390625 22.1875 11.75 
Q 26.265625 6.109375 33.40625 6.109375 
Q 40.53125 6.109375 44.609375 11.75 
Q 48.6875 17.390625 48.6875 27.296875 
z
M 18.109375 46.390625 
Q 20.953125 51.265625 25.265625 53.625 
Q 29.59375 56 35.59375 56 
Q 45.5625 56 51.78125 48.09375 
Q 58.015625 40.1875 58.015625 27.296875 
Q 58.015625 14.40625 51.78125 6.484375 
Q 45.5625 -1.421875 35.59375 -1.421875 
Q 29.59375 -1.421875 25.265625 0.953125 
Q 20.953125 3.328125 18.109375 8.203125 
L 18.109375 0 
L 9.078125 0 
L 9.078125 75.984375 
L 18.109375 75.984375 
z
&quot; id=&quot;DejaVuSans-98&quot; /&gt;
     &lt;path d=&quot;M 37.109375 75.984375 
L 37.109375 68.5 
L 28.515625 68.5 
Q 23.6875 68.5 21.796875 66.546875 
Q 19.921875 64.59375 19.921875 59.515625 
L 19.921875 54.6875 
L 34.71875 54.6875 
L 34.71875 47.703125 
L 19.921875 47.703125 
L 19.921875 0 
L 10.890625 0 
L 10.890625 47.703125 
L 2.296875 47.703125 
L 2.296875 54.6875 
L 10.890625 54.6875 
L 10.890625 58.5 
Q 10.890625 67.625 15.140625 71.796875 
Q 19.390625 75.984375 28.609375 75.984375 
z
&quot; id=&quot;DejaVuSans-102&quot; /&gt;
     &lt;path d=&quot;M 41.109375 46.296875 
Q 39.59375 47.171875 37.8125 47.578125 
Q 36.03125 48 33.890625 48 
Q 26.265625 48 22.1875 43.046875 
Q 18.109375 38.09375 18.109375 28.8125 
L 18.109375 0 
L 9.078125 0 
L 9.078125 54.6875 
L 18.109375 54.6875 
L 18.109375 46.1875 
Q 20.953125 51.171875 25.484375 53.578125 
Q 30.03125 56 36.53125 56 
Q 37.453125 56 38.578125 55.875 
Q 39.703125 55.765625 41.0625 55.515625 
z
&quot; id=&quot;DejaVuSans-114&quot; /&gt;
     &lt;path d=&quot;M 34.28125 27.484375 
Q 23.390625 27.484375 19.1875 25 
Q 14.984375 22.515625 14.984375 16.5 
Q 14.984375 11.71875 18.140625 8.90625 
Q 21.296875 6.109375 26.703125 6.109375 
Q 34.1875 6.109375 38.703125 11.40625 
Q 43.21875 16.703125 43.21875 25.484375 
L 43.21875 27.484375 
z
M 52.203125 31.203125 
L 52.203125 0 
L 43.21875 0 
L 43.21875 8.296875 
Q 40.140625 3.328125 35.546875 0.953125 
Q 30.953125 -1.421875 24.3125 -1.421875 
Q 15.921875 -1.421875 10.953125 3.296875 
Q 6 8.015625 6 15.921875 
Q 6 25.140625 12.171875 29.828125 
Q 18.359375 34.515625 30.609375 34.515625 
L 43.21875 34.515625 
L 43.21875 35.40625 
Q 43.21875 41.609375 39.140625 45 
Q 35.0625 48.390625 27.6875 48.390625 
Q 23 48.390625 18.546875 47.265625 
Q 14.109375 46.140625 10.015625 43.890625 
L 10.015625 52.203125 
Q 14.9375 54.109375 19.578125 55.046875 
Q 24.21875 56 28.609375 56 
Q 40.484375 56 46.34375 49.84375 
Q 52.203125 43.703125 52.203125 31.203125 
z
&quot; id=&quot;DejaVuSans-97&quot; /&gt;
     &lt;path d=&quot;M 45.40625 46.390625 
L 45.40625 75.984375 
L 54.390625 75.984375 
L 54.390625 0 
L 45.40625 0 
L 45.40625 8.203125 
Q 42.578125 3.328125 38.25 0.953125 
Q 33.9375 -1.421875 27.875 -1.421875 
Q 17.96875 -1.421875 11.734375 6.484375 
Q 5.515625 14.40625 5.515625 27.296875 
Q 5.515625 40.1875 11.734375 48.09375 
Q 17.96875 56 27.875 56 
Q 33.9375 56 38.25 53.625 
Q 42.578125 51.265625 45.40625 46.390625 
z
M 14.796875 27.296875 
Q 14.796875 17.390625 18.875 11.75 
Q 22.953125 6.109375 30.078125 6.109375 
Q 37.203125 6.109375 41.296875 11.75 
Q 45.40625 17.390625 45.40625 27.296875 
Q 45.40625 37.203125 41.296875 42.84375 
Q 37.203125 48.484375 30.078125 48.484375 
Q 22.953125 48.484375 18.875 42.84375 
Q 14.796875 37.203125 14.796875 27.296875 
z
&quot; id=&quot;DejaVuSans-100&quot; /&gt;
     &lt;path d=&quot;M 18.3125 70.21875 
L 18.3125 54.6875 
L 36.8125 54.6875 
L 36.8125 47.703125 
L 18.3125 47.703125 
L 18.3125 18.015625 
Q 18.3125 11.328125 20.140625 9.421875 
Q 21.96875 7.515625 27.59375 7.515625 
L 36.8125 7.515625 
L 36.8125 0 
L 27.59375 0 
Q 17.1875 0 13.234375 3.875 
Q 9.28125 7.765625 9.28125 18.015625 
L 9.28125 47.703125 
L 2.6875 47.703125 
L 2.6875 54.6875 
L 9.28125 54.6875 
L 9.28125 70.21875 
z
&quot; id=&quot;DejaVuSans-116&quot; /&gt;
    &lt;/defs&gt;
    &lt;g transform=&quot;translate(161.52375 16.318125)scale(0.12 -0.12)&quot;&gt;
     &lt;use xlink:href=&quot;#DejaVuSans-84&quot; /&gt;
     &lt;use x=&quot;44.083984&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
     &lt;use x=&quot;105.265625&quot; xlink:href=&quot;#DejaVuSans-107&quot; /&gt;
     &lt;use x=&quot;159.550781&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
     &lt;use x=&quot;221.074219&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
     &lt;use x=&quot;284.453125&quot; xlink:href=&quot;#DejaVuSans-115&quot; /&gt;
     &lt;use x=&quot;336.552734&quot; xlink:href=&quot;#DejaVuSans-32&quot; /&gt;
     &lt;use x=&quot;368.339844&quot; xlink:href=&quot;#DejaVuSans-98&quot; /&gt;
     &lt;use x=&quot;431.816406&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
     &lt;use x=&quot;493.339844&quot; xlink:href=&quot;#DejaVuSans-102&quot; /&gt;
     &lt;use x=&quot;528.544922&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
     &lt;use x=&quot;589.726562&quot; xlink:href=&quot;#DejaVuSans-114&quot; /&gt;
     &lt;use x=&quot;628.589844&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
     &lt;use x=&quot;690.113281&quot; xlink:href=&quot;#DejaVuSans-32&quot; /&gt;
     &lt;use x=&quot;721.900391&quot; xlink:href=&quot;#DejaVuSans-97&quot; /&gt;
     &lt;use x=&quot;783.179688&quot; xlink:href=&quot;#DejaVuSans-110&quot; /&gt;
     &lt;use x=&quot;846.558594&quot; xlink:href=&quot;#DejaVuSans-100&quot; /&gt;
     &lt;use x=&quot;910.035156&quot; xlink:href=&quot;#DejaVuSans-32&quot; /&gt;
     &lt;use x=&quot;941.822266&quot; xlink:href=&quot;#DejaVuSans-97&quot; /&gt;
     &lt;use x=&quot;1003.101562&quot; xlink:href=&quot;#DejaVuSans-102&quot; /&gt;
     &lt;use x=&quot;1036.556641&quot; xlink:href=&quot;#DejaVuSans-116&quot; /&gt;
     &lt;use x=&quot;1075.765625&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
     &lt;use x=&quot;1137.289062&quot; xlink:href=&quot;#DejaVuSans-114&quot; /&gt;
    &lt;/g&gt;
   &lt;/g&gt;
   &lt;g id=&quot;legend_1&quot;&gt;
    &lt;g id=&quot;patch_11&quot;&gt;
     &lt;path d=&quot;M 345.798437 59.674375 
L 410.490625 59.674375 
Q 412.490625 59.674375 412.490625 57.674375 
L 412.490625 29.318125 
Q 412.490625 27.318125 410.490625 27.318125 
L 345.798437 27.318125 
Q 343.798437 27.318125 343.798437 29.318125 
L 343.798437 57.674375 
Q 343.798437 59.674375 345.798437 59.674375 
z
&quot; style=&quot;fill:#ffffff;opacity:0.8;stroke:#cccccc;stroke-linejoin:miter;&quot; /&gt;
    &lt;/g&gt;
    &lt;g id=&quot;patch_12&quot;&gt;
     &lt;path d=&quot;M 347.798437 38.916562 
L 367.798437 38.916562 
L 367.798437 31.916562 
L 347.798437 31.916562 
z
&quot; style=&quot;fill:#1f77b4;&quot; /&gt;
    &lt;/g&gt;
    &lt;g id=&quot;text_12&quot;&gt;
     &lt;!-- Before --&gt;
     &lt;defs&gt;
      &lt;path d=&quot;M 19.671875 34.8125 
L 19.671875 8.109375 
L 35.5 8.109375 
Q 43.453125 8.109375 47.28125 11.40625 
Q 51.125 14.703125 51.125 21.484375 
Q 51.125 28.328125 47.28125 31.5625 
Q 43.453125 34.8125 35.5 34.8125 
z
M 19.671875 64.796875 
L 19.671875 42.828125 
L 34.28125 42.828125 
Q 41.5 42.828125 45.03125 45.53125 
Q 48.578125 48.25 48.578125 53.8125 
Q 48.578125 59.328125 45.03125 62.0625 
Q 41.5 64.796875 34.28125 64.796875 
z
M 9.8125 72.90625 
L 35.015625 72.90625 
Q 46.296875 72.90625 52.390625 68.21875 
Q 58.5 63.53125 58.5 54.890625 
Q 58.5 48.1875 55.375 44.234375 
Q 52.25 40.28125 46.1875 39.3125 
Q 53.46875 37.75 57.5 32.78125 
Q 61.53125 27.828125 61.53125 20.40625 
Q 61.53125 10.640625 54.890625 5.3125 
Q 48.25 0 35.984375 0 
L 9.8125 0 
z
&quot; id=&quot;DejaVuSans-66&quot; /&gt;
     &lt;/defs&gt;
     &lt;g transform=&quot;translate(375.798437 38.916562)scale(0.1 -0.1)&quot;&gt;
      &lt;use xlink:href=&quot;#DejaVuSans-66&quot; /&gt;
      &lt;use x=&quot;68.603516&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
      &lt;use x=&quot;130.126953&quot; xlink:href=&quot;#DejaVuSans-102&quot; /&gt;
      &lt;use x=&quot;165.332031&quot; xlink:href=&quot;#DejaVuSans-111&quot; /&gt;
      &lt;use x=&quot;226.513672&quot; xlink:href=&quot;#DejaVuSans-114&quot; /&gt;
      &lt;use x=&quot;265.376953&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
     &lt;/g&gt;
    &lt;/g&gt;
    &lt;g id=&quot;patch_13&quot;&gt;
     &lt;path d=&quot;M 347.798437 53.594687 
L 367.798437 53.594687 
L 367.798437 46.594687 
L 347.798437 46.594687 
z
&quot; style=&quot;fill:#ff7f0e;&quot; /&gt;
    &lt;/g&gt;
    &lt;g id=&quot;text_13&quot;&gt;
     &lt;!-- After --&gt;
     &lt;defs&gt;
      &lt;path d=&quot;M 34.1875 63.1875 
L 20.796875 26.90625 
L 47.609375 26.90625 
z
M 28.609375 72.90625 
L 39.796875 72.90625 
L 67.578125 0 
L 57.328125 0 
L 50.6875 18.703125 
L 17.828125 18.703125 
L 11.1875 0 
L 0.78125 0 
z
&quot; id=&quot;DejaVuSans-65&quot; /&gt;
     &lt;/defs&gt;
     &lt;g transform=&quot;translate(375.798437 53.594687)scale(0.1 -0.1)&quot;&gt;
      &lt;use xlink:href=&quot;#DejaVuSans-65&quot; /&gt;
      &lt;use x=&quot;64.783203&quot; xlink:href=&quot;#DejaVuSans-102&quot; /&gt;
      &lt;use x=&quot;98.238281&quot; xlink:href=&quot;#DejaVuSans-116&quot; /&gt;
      &lt;use x=&quot;137.447266&quot; xlink:href=&quot;#DejaVuSans-101&quot; /&gt;
      &lt;use x=&quot;198.970703&quot; xlink:href=&quot;#DejaVuSans-114&quot; /&gt;
     &lt;/g&gt;
    &lt;/g&gt;
   &lt;/g&gt;
  &lt;/g&gt;
 &lt;/g&gt;
 &lt;defs&gt;
  &lt;clipPath id=&quot;pa0ce76070e&quot;&gt;
   &lt;rect height=&quot;233.4&quot; width=&quot;370.525&quot; x=&quot;46.965625&quot; y=&quot;22.318125&quot; /&gt;
  &lt;/clipPath&gt;
 &lt;/defs&gt;
&lt;/svg&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_n_closest_questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;kan min hamster bli smittad?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocessing_func_stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;0.66: Kan man bli smittad av en person som har covid-19 men som inte har några symtom?
0.64: Kan covid-19 smitta mellan djur och människa och kan mitt husdjur smittas av viruset?
0.54: Kan viruset smitta till människa via post och paket?
0.41: Kan smitta överföras från mygg till människa?
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_n_closest_questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hur får jag min son att förstå?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocessing_func_stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;0.83: Vad är covid-19?
0.83: Hur pratar man med barn om det nya coronaviruset?
0.80: Hur sjuk blir man av covid-19?
0.80: Hur länge är man sjuk av covid-19?
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;h4 id=&quot;Further-analyzing&quot;&gt;Further analyzing&lt;a class=&quot;anchor-link&quot; href=&quot;#Further-analyzing&quot;&gt; &lt;/a&gt;&lt;/h4&gt;&lt;p&gt;In my mind we've some pretty good responses, in a way better and another way worse than lemmatizaton. Certainly not a set-back but neither a step forward.&lt;br /&gt;
Testing different approaches and turning things on and off is a great way to increase data understanding and also gives a better sense of what different preprocessing functions actually does.&lt;br /&gt;
In fact this is actually part of the most common Machine Learning development approach, working much like agile, which is iteratively circular and called &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-industry_standard_process_for_data_mining&quot;&gt;CRISP-DM&lt;/a&gt;. I won't go deeply into CRISP-DM (already did once in my Master Thesis), but the following image gives you the gist.&lt;br /&gt;
&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/CRISP-DM_Process_Diagram.png/220px-CRISP-DM_Process_Diagram.png&quot; alt=&quot;CRISP-DM&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, as we see no great impact by applying either lemmatization nor stop-words we might just give up at the lower-case + stanza tokenization, but I'd like to make one last shot in the dark - custom stop words! Let's see how it fares...&lt;/p&gt;
&lt;h5 id=&quot;Custom-Stop-Words-(breaking-the-rules)&quot;&gt;Custom Stop Words (breaking the rules)&lt;a class=&quot;anchor-link&quot; href=&quot;#Custom-Stop-Words-(breaking-the-rules)&quot;&gt; &lt;/a&gt;&lt;/h5&gt;&lt;p&gt;So I decided to break the rules and create a small simple heuristic by applying custom stop words.&lt;br /&gt;
Let's figure out which words we should remove using the following steps (which could in fact be automated)!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find the most common words&lt;/li&gt;
&lt;li&gt;Remove the ones which does not give any greater value&lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;question&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocess_funcs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;



&lt;div class=&quot;output_text output_subarea output_execute_result&quot;&gt;
&lt;pre&gt;[(&amp;#39;?&amp;#39;, 75),
 (&amp;#39;covid-19&amp;#39;, 28),
 (&amp;#39;vad&amp;#39;, 25),
 (&amp;#39;och&amp;#39;, 22),
 (&amp;#39;hur&amp;#39;, 21),
 (&amp;#39;för&amp;#39;, 20),
 (&amp;#39;det&amp;#39;, 15),
 (&amp;#39;kan&amp;#39;, 14),
 (&amp;#39;i&amp;#39;, 14),
 (&amp;#39;jag&amp;#39;, 13),
 (&amp;#39;av&amp;#39;, 13),
 (&amp;#39;gäller&amp;#39;, 12),
 (&amp;#39;som&amp;#39;, 12),
 (&amp;#39;är&amp;#39;, 11),
 (&amp;#39;en&amp;#39;, 11)]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;och&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jag&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;är&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;en&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;min&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;clean_stop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;preprocessing_func_stop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lowercase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stanza_tokenize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clean_stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uSIF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ft_wv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang_freq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sv&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;question&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocessing_func_stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# We don&amp;#39;t need to remove stop-words in the sentences in our &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sfe_format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IndexedList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sfe_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;preprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;hur förklarar jag för min dotter och son?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocessing_func_stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;



&lt;div class=&quot;output_text output_subarea output_execute_result&quot;&gt;
&lt;pre&gt;[&amp;#39;hur&amp;#39;, &amp;#39;förklarar&amp;#39;, &amp;#39;för&amp;#39;, &amp;#39;dotter&amp;#39;, &amp;#39;son&amp;#39;]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_n_closest_questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hur får jag min son att förstå?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocessing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preprocess_funcs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;0.83: Hur pratar man med barn om det nya coronaviruset?
0.83: Vad är covid-19?
0.80: Hur sjuk blir man av covid-19?
0.79: Hur länge är man sjuk av covid-19?
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

    
    
&lt;div class=&quot;cell border-box-sizing code_cell rendered&quot;&gt;
&lt;div class=&quot;input&quot;&gt;

&lt;div class=&quot;inner_cell&quot;&gt;
    &lt;div class=&quot;input_area&quot;&gt;
&lt;div class=&quot; highlight hl-ipython3&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_n_closest_questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;kan min hamster bli smittad?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preprocessing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preprocess_funcs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;output_wrapper&quot;&gt;
&lt;div class=&quot;output&quot;&gt;

&lt;div class=&quot;output_area&quot;&gt;

&lt;div class=&quot;output_subarea output_stream output_stdout output_text&quot;&gt;
&lt;pre&gt;0.66: Kan man bli smittad av en person som har covid-19 men som inte har några symtom?
0.63: Kan covid-19 smitta mellan djur och människa och kan mitt husdjur smittas av viruset?
0.54: Kan viruset smitta till människa via post och paket?
0.41: Kan smitta överföras från mygg till människa?
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    

&lt;div class=&quot;cell border-box-sizing text_cell rendered&quot;&gt;&lt;div class=&quot;inner_cell&quot;&gt;
&lt;div class=&quot;text_cell_render border-box-sizing rendered_html&quot;&gt;
&lt;p&gt;Not bad, not amazing - I feel pretty happy about this.&lt;/p&gt;
&lt;p&gt;So what can be done from now on if time and resources where available?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a classifier + TF-IDF&lt;/li&gt;
&lt;li&gt;BERT / ALBERT QA (the State-of-the-Art right now)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for this time,&lt;br /&gt;
- Hampus Londögård&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Hampus Londögård</name></author><category term="jupyter" /><category term="nlp" /><category term="machine-learning" /><category term="deep-learning" /><summary type="html"></summary></entry><entry><title type="html">SQL - Different Abstraction Levels (&amp;amp; how I came to love SQLDelight)</title><link href="https://blog.londogard.com/jvm/kotlin/sql/multiplatform/2020/06/01/sqldelight-kotlin.html" rel="alternate" type="text/html" title="SQL - Different Abstraction Levels (&amp;amp; how I came to love SQLDelight)" /><published>2020-06-01T00:00:00-05:00</published><updated>2020-06-01T00:00:00-05:00</updated><id>https://blog.londogard.com/jvm/kotlin/sql/multiplatform/2020/06/01/sqldelight-kotlin</id><content type="html" xml:base="https://blog.londogard.com/jvm/kotlin/sql/multiplatform/2020/06/01/sqldelight-kotlin.html">&lt;h1 id=&quot;sql---different-abstraction-levels-and-how-i-came-to-love-sqldelight&quot;&gt;SQL - different abstraction levels and how I came to love SQLDelight&lt;/h1&gt;

&lt;p&gt;In this blog I’ll cover a few different abstraction levels of database access, focusing purely on SQL and not NoSQL / Reddis or anything like that. The purpose is to share the knowledge that there exist these types of abstractions and they do exist in all or at least most of the popular languages.&lt;/p&gt;

&lt;p&gt;I’ll try to move from &quot;raw SQL&quot; to the modern &quot;Object-Relational Mapping&quot;-style, a.k.a ORM.&lt;/p&gt;

&lt;p&gt;In the end I wish to make a short piece leaving out a lot of details but maintaining a feel of each style and some pros/cons. I bet you already guessed my preferred approach straight from the title :wink:.&lt;/p&gt;

&lt;h3 id=&quot;how-to-interact-with-a-sql-database-from-a-programming-language&quot;&gt;How to interact with a SQL Database from a programming language&lt;/h3&gt;

&lt;p&gt;Structured Query Language (SQL) is as the name, once spelled out, a Domain Specific Language (DSL) just like regex. It’s basically a programming language written to facilitate and simplify the experience with the underlying engine. By using a DSL you gain capabilities that would be natural to integrate with most languages, and it also makes the engine do the same with the same code across languages.&lt;/p&gt;

&lt;p&gt;I think that Regex and SQL are the most famous DSLs and for good reason, having regex work (almost) the same across languages simplifies the guides and the same applies to SQL.&lt;/p&gt;

&lt;p&gt;Going forward let’s see how we communicate with a SQL-db from a programming language like Java using their famous jdbc (Java Database Connectivity) which is the driver that communicates with the db.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Connecting to database...\&quot;);
&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DriverManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DB_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PASS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;//STEP 4: Execute a query&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Creating statement...\&quot;);
&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;createStatement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT id, first, last, age FROM Employees\&quot;;
&lt;/span&gt;      &lt;span class=&quot;nc&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;executeQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;//STEP 5: Extract data from result set&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()){&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;//Retrieve by column name&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id\&quot;);
&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;age\&quot;);
&lt;/span&gt;         &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;first\&quot;);
&lt;/span&gt;         &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;last\&quot;);
&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;//Display values&lt;/span&gt;
         &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ID: \&quot; + id);
&lt;/span&gt;         &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;, Age: \&quot; + age);
&lt;/span&gt;         &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;, First: \&quot; + first);
&lt;/span&gt;         &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;, Last: \&quot; + last);
&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//STEP 6: Clean-up environment&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not very convenient right? Personally I think this looks horrible, it’s filled with horrible getters &amp;amp; setters like we’re stuck in the Middle Ages or something.
Personally my mind directly flows to serialization and how that must work somehow with databases, and that’s right - we can move into the future today!&lt;/p&gt;

&lt;h3 id=&quot;moving-one-abstraction-level-up&quot;&gt;Moving one abstraction level up&lt;/h3&gt;

&lt;p&gt;Welcome &lt;a href=&quot;https://developer.android.com/topic/libraries/architecture/room&quot;&gt;Room&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://scala-slick.org/&quot;&gt;slick&lt;/a&gt; (two libraries I’ve experience with) to the room!
Both of these libraries provide a type of serialization to classes and more convenient syntax to write the code. The first one heavily leans on annotation to make it work while the other one uses a more slick approach of &quot;copying&quot; the way you work with the standard Scala Collections (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter, map, flatMap, reduce&lt;/code&gt; etc).&lt;/p&gt;

&lt;p&gt;I’d say that both do count as ORMs but they’re still not as abstract as other solutions such as &lt;em&gt;peewee&lt;/em&gt; which we’ll discuss later. Let’s get into Room and how it works. First you define entities like a class with the added annotation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Entity&lt;/code&gt; and then you define a &lt;em&gt;Data Access Object&lt;/em&gt; (DAO) to interact with the table / object. The DAO is where you define your queries, let’s take a look.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Dao&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT * FROM user\&quot;)
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SELECT * FROM user WHERE uid IN (:userIds)\&quot;)
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadAllByIds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userIds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IntArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my opinion this approach strikes a really good balance between simple-to-use but still powerful and very configurable because you still use SQL, a bonus here is that it’s safe from SQL-injection as you’re making use of so-called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prepared-statements&lt;/code&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;wikipedia&lt;/a&gt;). The biggest drawback is that it’s hard to write easy-to-read SQL in the annotation and for the annotation-haters we’ve a lot of annotations (which often slows down the compile-time noticeably among other things).&lt;/p&gt;

&lt;p&gt;Moving on we’ve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slick&lt;/code&gt; which is also a really cool approach! &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slick&lt;/code&gt; allows you to this but instead you write your queries in something that feels like using the normal Scala Collection library. This allows you to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt; etc to create queries, and even &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for-comprehension&lt;/code&gt;. Let’s see!&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Read all coffees and print them to the console&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Coffees:\&quot;)
db.run(coffees.result).map(_.foreach {
  case (name, supID, price, sales, total) =&amp;gt;
    println(\&quot;  \&quot; + name + \&quot;\\t\&quot; + supID + \&quot;\\t\&quot; + price + \&quot;\\t\&quot; + sales + \&quot;\\t\&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Read coffee with price lower than 9 and join with matching supplier using for-comprehension&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;q2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coffees&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;9.0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suppliers&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;supID&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// A find using filter&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;headOption&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pretty slick right?&lt;/p&gt;

&lt;h3 id=&quot;moving-another-level-up-python--peewee&quot;&gt;Moving another level up (Python + Peewee)&lt;/h3&gt;

&lt;p&gt;Ok, maybe it’s not actually moving one level up from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slick&lt;/code&gt; but I’d say it’s still a little bit further away from raw SQL as we make more use of objects, in the case of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slick&lt;/code&gt; you can more easily see the generated SQL-code. Let’s take a look at &lt;a href=&quot;http://docs.peewee-orm.com/en/latest/index.html&quot;&gt;peewee&lt;/a&gt; which supports most databases (sqlite, mysql, postgresql and cockroachdb).&lt;/p&gt;

&lt;p&gt;So where do we begin? Create the database and tables! 
It’s done by initiating a database and then creating different classes which each maps to their own tables automatically.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SqliteDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;birthday&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DateField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uses&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;people.db\&quot; database.
&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ForeignKeyField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;backref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pets&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;animal_type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uses&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;people.db\&quot; database
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And how would one create entries and then query them? It’s simply done through object creation as in the following examples.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;uncle_bob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Bob'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;birthday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1960&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;uncle_bob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Sometimes the class already has a \&quot;create method\&quot; as in
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Sarah'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;birthday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1980&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# And create a pet which belongs to uncle_bob
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bob_dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uncle_bob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Doggy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animal_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'dog'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And to query the tables we also make use of the object fully, as in the following small example.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bobby&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bob'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# or all persons!
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we’ve gone through the different abstraction layers that you usually see available in most languages. Going forward I’d like to show SQLDelight which turns the abstraction a little bit upside down.&lt;/p&gt;

&lt;h3 id=&quot;sqldelight-abstraction-level-left-to-the-right&quot;&gt;SQLDelight: Abstraction level left to the right&lt;/h3&gt;

&lt;p&gt;In SQLDelight I’d say we get the ideal balance of abstraction and configurability. We deal with raw SQL which is both a pro &amp;amp; con, people will need to know SQL unlike in a abstracted ORM but you also get the full potential and it’s really simple to do complex joins (which is really messy in ORMs).&lt;/p&gt;

&lt;p&gt;I was delighted at how simple it was to use from my Kotlin code while also providing a simple way to write my DB-interactions. No confusion and there’s a million guides out there showing how you write SQL code for complex joins if you ever need a hand.&lt;/p&gt;

&lt;p&gt;Let’s begin with how you define a table and queries, through a so-called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.sq&lt;/code&gt;-file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sqlite&quot;&gt;-- .sq-file

CREATE TABLE person (
  name TEXT NOT NULL,
  birthday DATE NOT NULL
);
-- You can actually also insert a Person directly in this file if you'd like using the normal SQL insert statement.

selectAll:
SELECT *
FROM person;

insert:
INSERT INTO person(name, birthday)
VALUES (?, ?);

insertPerson:
INSERT INTO person(name, birthday)
VALUES ?;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For those that don’t know SQL this does the following&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Define the table&lt;/li&gt;
  &lt;li&gt;Create queries on the table
    &lt;ol&gt;
      &lt;li&gt;These queries makes use of the custom format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;methodName:&lt;/code&gt; and then define the method using the SQL code beneath until it hits end &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;; &lt;/code&gt;.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we have some SQL code defined in a  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.sq&lt;/code&gt;-file, how do we actually use this from our Kotlin-code?
We build the project, while building the project the code is generated to our build project with the Kotlin-code. It’ll provide&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data Classes (like structs / objects / case classes)&lt;/li&gt;
  &lt;li&gt;Queries for each table&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And on top of this you’ll have &lt;em&gt;full&lt;/em&gt; typing, which is pretty damn awesome! Let’s take a look at how we’d use this from Kotlin.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Not optimal code, should use injection or something in reality for the db.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;personQueries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PersonQueries&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;personQueries&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;personQueries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;selectAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;executeAsList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Prints []&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;personQueries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bob\&quot;, birthday = Date(2010, 1, 10))
&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;personQueries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;selectAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;executeAsList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Prints [Person.Impl(\&quot;Bob\&quot;, Date(2010, 1, 10))]&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ronald McDonald\&quot;, Date(2020, 1, 5))
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;personQueries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insertPerson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;personQueries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;selectAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;executeAsList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Prints [Person.Impl(\&quot;Bob\&quot;, Date(2010, 1, 10)), Person.Impl(\&quot;Ronald McDonald\&quot;, Date(2020, 1, 5))]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let me just say, I’m amazed about this kind of reverse thinking of generating code from SQL. It gives us the convenience of a ORM but the flexibility of raw SQL :happy:.&lt;/p&gt;

&lt;h3 id=&quot;comparison-table&quot;&gt;Comparison Table&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Database&lt;/th&gt;
      &lt;th&gt;Simplicity&lt;/th&gt;
      &lt;th&gt;Requires SQL knowledge&lt;/th&gt;
      &lt;th&gt;Configurability (complex queries etc)&lt;/th&gt;
      &lt;th&gt;Score (5)&lt;/th&gt;
      &lt;th&gt;Comment&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;JDBC&lt;/td&gt;
      &lt;td&gt;I&lt;/td&gt;
      &lt;td&gt;III&lt;/td&gt;
      &lt;td&gt;III&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;To much overhead&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Room / Slick&lt;/td&gt;
      &lt;td&gt;II&lt;/td&gt;
      &lt;td&gt;II&lt;/td&gt;
      &lt;td&gt;II&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Strikes a good balance between natural in normal code while configurable*&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Peewee&lt;/td&gt;
      &lt;td&gt;III&lt;/td&gt;
      &lt;td&gt;I&lt;/td&gt;
      &lt;td&gt;I&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Really easy and fits into code great, but the complex queries becomes really hard and feels forced&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SQLDelight&lt;/td&gt;
      &lt;td&gt;II&lt;/td&gt;
      &lt;td&gt;III&lt;/td&gt;
      &lt;td&gt;III&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;Natural to use in the code, great customability &amp;amp; little overhead*&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Both Room &amp;amp; SQLDelight are enforcing SQLite right now which is a major con for those that needs postgresql etc. Personally I only use SQLite as was discussed in &lt;a href=&quot;https://blog.expensify.com/2018/01/08/scaling-sqlite-to-4m-qps-on-a-single-server/&quot;&gt;expensify’s blog&lt;/a&gt; SQLite can be squeezed to the extreme - expensify managed to handle up to 4 million queries per second!&lt;/p&gt;

&lt;h3 id=&quot;outro&quot;&gt;Outro&lt;/h3&gt;

&lt;p&gt;In its essence today there’s a great variety of different kinds of wrappers for databases in almost all languages and it is all about finding one that strikes your balance of perfect. For a really simple database perhaps an ORM such as &lt;em&gt;peewee&lt;/em&gt; where no SQL knowledge is really required could be enough. But be sure to know the trade-offs, once your database grows complex so does peewee grow complex fast, same applies to slick and others. Raw SQL as a fall-back is always good to have and a lot of the libraries are starting to add it (e.g. slick), but it never feels natural and always is a bit like a bandaid, ugly right?&lt;/p&gt;

&lt;p&gt;Anyhow, I hope this was interesting and perhaps someone learned about a new abstraction-level for databases or was inspired to pick up their own.&lt;/p&gt;

&lt;p&gt;~Hampus&lt;/p&gt;</content><author><name>Hampus Londögård</name></author><category term="jvm" /><category term="kotlin" /><category term="sql" /><category term="multiplatform" /><summary type="html">SQL - different abstraction levels and how I came to love SQLDelight</summary></entry><entry><title type="html">A simple FAQ search engine in Swedish using fastText &amp;amp; Smooth Inverse Frequency</title><link href="https://blog.londogard.com/faq/nlp/machine-learning/2020/05/13/faq-search-covid-1.html" rel="alternate" type="text/html" title="A simple FAQ search engine in Swedish using fastText &amp;amp; Smooth Inverse Frequency" /><published>2020-05-13T00:00:00-05:00</published><updated>2020-05-13T00:00:00-05:00</updated><id>https://blog.londogard.com/faq/nlp/machine-learning/2020/05/13/faq-search-covid-1</id><content type="html" xml:base="https://blog.londogard.com/faq/nlp/machine-learning/2020/05/13/faq-search-covid-1.html">&lt;h1 id=&quot;covid-19-swedish-qa&quot;&gt;CoViD-19 Swedish QA&lt;/h1&gt;
&lt;p&gt;I decided to scratch a small itch I’ve had for a while now - creating a search engine using an unsupervised approach. The final product, or the first iteration rather, ended up pretty good and I wanted to share what I’ve done so far.&lt;/p&gt;

&lt;h3 id=&quot;introduction-to-the-problem-and-requirements&quot;&gt;Introduction to the problem and requirements&lt;/h3&gt;
&lt;p&gt;An unsupervised approach where we never edit the data nor supply any manually annotated data? Every Data Scientist dream I suppose. There’s a reason as of why supervised approaches generally result in better performance but there is some light at the end of the tunnel for unsupervised approaches too.&lt;/p&gt;

&lt;p&gt;Let’s begin with my own requirements, which are mainly created to only keep the fun problem-solving left.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The end-product must be unsupervised
    &lt;ul&gt;
      &lt;li&gt;No manually annotated data&lt;/li&gt;
      &lt;li&gt;No heuristic applied (at least in first iteration)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;It should be light enough to run on a Raspberry Pi later on (hopefully on the JVM to keep it simple with my back-end)&lt;/li&gt;
  &lt;li&gt;Must be Swedish all the way through - no translations (English models you can transfer knowledge from tends to be stronger, but I want to keep this fun!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this in mind I set out to build my own FAQ search engine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is required to answer questions using a FAQ?&lt;/strong&gt; We need to find the most relevant Q/A to the question posed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do we do this?&lt;/strong&gt; There is numerous types of ways to do this unsupervised. I’ll account for a few here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Latent Dirichlet Allocation (LDA) which is a way to find topics through clever statistical analysis (basically soft clusters of documents)&lt;/li&gt;
  &lt;li&gt;Embedding and &lt;a href=&quot;https://en.wikipedia.org/wiki/Cosine_similarity&quot;&gt;Cosine Similarity&lt;/a&gt;, find the distance between the two arrays of numbers in the embedded space. One can also apply Euclidean Distance which isn’t especially good because of &lt;a href=&quot;https://en.wikipedia.org/wiki/Curse_of_dimensionality&quot;&gt;Curse of Dimensionality&lt;/a&gt;. Other possible approaches includes &lt;a href=&quot;https://arxiv.org/pdf/1912.00509.pdf&quot;&gt;Word Mover Distance&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Simple word counting and Bag of Words&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;tools-chosen&quot;&gt;Tools Chosen&lt;/h3&gt;
&lt;p&gt;After a little research I found a few tools which fit my need.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;fastText&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;fastText that came out of Facebook AI Research (FAIR) and &lt;a href=&quot;https://arxiv.org/abs/1607.04606&quot;&gt;this&lt;/a&gt; paper. It’s a type of Word Embeddings where also subwords are embedded through ngrams of characters, this means that we are able to embedd words that are out of vocabulary, which can be the reason because of either misspelling or just a missing word.
On their &lt;a href=&quot;https://fasttext.cc/&quot;&gt;homepage&lt;/a&gt; they have a plethora of models including a Swedish one that has been derived from Wikipedia, pretty awesome!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smooth Inverse Frequency&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Smooth Inverse Frequency (SIF) is an algorithm to embed sentences which was proposed in &lt;a href=&quot;https://openreview.net/pdf?id=SyK00v5xx&quot;&gt;&quot;A Simple but Tough-To-Beat Baseline for Sentence Embeddings&quot;&lt;/a&gt; in 2017. In its essence they propose to embed the sentence using a weighted average and thereafter modify them a bit using PCA/SVD.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Folkhälsomyndigheten FAQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally I need the FAQ to use, in my case it’s Covid-19 FAQ from Folkhälsomyndigheten. It was parsed into pandas dataframes using requests &amp;amp; BeautifulSoup4 (bs4).&lt;/p&gt;

&lt;h3 id=&quot;final-result&quot;&gt;Final Result&lt;/h3&gt;
&lt;p&gt;So after all this was figured out I sat down an afternoon and cooked some code together, the result ended up more impressive than I had imagined. The questions posed are being responded with pretty good results. I’m especially impressed by question about &lt;em&gt;astma&lt;/em&gt;, &lt;em&gt;son&lt;/em&gt; and &lt;em&gt;regler&lt;/em&gt;. Here’s a few of them:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; Hur sjuk blir jag?

Hur sjuk blir man av covid-19? - 0.98
Hur länge är man sjuk av covid-19? - 0.97
Hur lång är inkubationstiden? - 0.81
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; Hur vet jag om det är astma?

Hur vet jag om mina symtom beror på pollenallergi eller på covid-19? - 0.63
Hur sjuk blir man av covid-19? - 0.53
Hur länge är man sjuk av covid-19? - 0.53
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; Hur förklarar jag corona för min son?

Hur pratar man med barn om det nya coronaviruset? - 0.58
Hur lång är inkubationstiden? - 0.53
Hur sjuk blir man av covid-19? - 0.49
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; Hur minskar vi spridningen i sverige?

Hur gör ni för att mäta förekomsten av covid-19 i samhället? - 0.65
Hur övervakar ni på Folkhälsomyndigheten spridningen av covid-19? - 0.57
Hur stor är dödligheten till följd av covid-19? - 0.56
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; Vad för regler finns?

Vad gäller för olika verksamheter? - 0.76
Vad gäller för handeln? - 0.75
Vad är covid-19? - 0.71
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One can directly note the correlation of the beginning. It seems like the first word has a high correlation with the most similar question. Weird. Removing stop words could probably improve this, but that’d be for the second implementation.&lt;/p&gt;

&lt;h3 id=&quot;further-improvements-for-iteration-2-3-and-beyond&quot;&gt;Further improvements for iteration 2, 3 and beyond!&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Pre-processing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As mentioned right above we can apply some basic pre-processing  such as removing stop words. In reality this should be handled by SIF but looking at our similarity scores there’s a 1-1 relation between the first word of the sentence.&lt;/p&gt;

&lt;p&gt;Other improvements worth trying out is lemmatizing or stemming the words (&quot;cutting them to the root&quot; in simple terms) and further using a better tokenization is worth trying out (currently splitting on whitespace). &lt;em&gt;spaCy&lt;/em&gt; offers a strong tokenizer, but I haven’t tried it out for Swedish yet. Once again &lt;em&gt;fastText&lt;/em&gt; should handle this but it’s worth trying out if it improves or keep the result at the same level.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Different Embedding Techniques&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There exist a certain Sentence Embedding that’s basically made for this task - MULE (Multimodal Universal Language Embeddings). MULE is even multilingual but unfortunately they’re not able to embed Swedish so we’d require a translation from Swedish to one of the 16 languages supported by MULE. This means that it is out of the question because of my requirements, but could still be fun to check out.&lt;/p&gt;

&lt;p&gt;Other embeddings such as FLAIR (by Zalando), BERT (using BERT-as-a-service) or even training my own embeddings (perhaps using StarSpace) could prove interesting also.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Completely other technique&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I mentioned first of all LDA, and I think LDA could be interesting. Most often LDA is applied to larger documents but as with everything it is never wrong to try out and verify the results.&lt;/p&gt;

&lt;p&gt;Supervised approaches would certainly be able to show us some good performance but that requires annotating data in one way or another which is a boring task - but very important. Perhaps I’ll revisit and label some data, with todays Transfer Learning we can achieve higher accuracy with less data using other pre-trained  Language Models such as BERT or Multifit (from Ulmfit).&lt;/p&gt;

&lt;h3 id=&quot;ending-words&quot;&gt;Ending words&lt;/h3&gt;
&lt;p&gt;This was a really fun task and I’m happy that I tried it out. I’m sure I’ll revisit and improve it further by applying some of the possible improvements. Further I think I might actually try to do this for all FAQs available by our authorities to create a &quot;Multi FAQ&quot; which could prove pretty cool. With more data the results should also be better.&lt;/p&gt;

&lt;p&gt;And as an ending note my model ended up using 2.5-3 GB of memory during run-time which means it’s possible to run on my Raspberry Pi 4! Further reduction of size can be done by removing the most uncommon words in the vocabulary (vocab is 2M words, which is very large). I applied a dimension reduction using the built in version of &lt;em&gt;fastText&lt;/em&gt; (ending up using d=100 and still achieving good search results).&lt;/p&gt;

&lt;p&gt;The implementation is available at my &lt;a href=&quot;https://github.com/londogard/nlp-projects/blob/master/python/CoViD_19_QA.ipynb&quot;&gt;GitHub (Londogard)&lt;/a&gt; or directly launched in &lt;a href=&quot;https://colab.research.google.com/github/londogard/nlp-projects/blob/master/python/CoViD_19_QA.ipynb&quot;&gt;Google Colaboratory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for this time, I’ll be back with more!&lt;br /&gt;
 Hampus Londögård&lt;/p&gt;</content><author><name>Hampus Londögård</name></author><category term="faq" /><category term="nlp" /><category term="machine-learning" /><summary type="html">CoViD-19 Swedish QA I decided to scratch a small itch I’ve had for a while now - creating a search engine using an unsupervised approach. The final product, or the first iteration rather, ended up pretty good and I wanted to share what I’ve done so far.</summary></entry><entry><title type="html">How I created a email generator in Kotlin (for Afry Tipsrundan)</title><link href="https://blog.londogard.com/email/kotlin/html/css/serialization/2020/03/31/email-generator-kotlin-tipsrundan.html" rel="alternate" type="text/html" title="How I created a email generator in Kotlin (for Afry Tipsrundan)" /><published>2020-03-31T00:00:00-05:00</published><updated>2020-03-31T00:00:00-05:00</updated><id>https://blog.londogard.com/email/kotlin/html/css/serialization/2020/03/31/email-generator-kotlin-tipsrundan</id><content type="html" xml:base="https://blog.londogard.com/email/kotlin/html/css/serialization/2020/03/31/email-generator-kotlin-tipsrundan.html">&lt;h1 id=&quot;email-generation---tipsrundan--&quot;&gt;Email Generation - Tipsrundan -&lt;/h1&gt;
&lt;p&gt;At AFRY IT South I’m co-responsible with Hassan Ftouni at driving the competence. One of my initiatives that we both now drive is to have a biweekly, every second week for all you picky readers out there, newsletter called &quot;Tipsrundan&quot;.&lt;/p&gt;

&lt;p&gt;Tipsrundan has lately gathered some fuss around and Afry IT West now wants to join in. This means new challenges to somehow build an email together with more people, collaborating on what to have and what to keep regional. Let me say that this is a fun challenge!&lt;/p&gt;

&lt;p&gt;In this post I’ll go through how I built our completely new &quot;Email Generator&quot; in Kotlin that I built a Sunday afternoon. This includes a few things such as&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Learning how CSS works in emails (in comparison to browsers)&lt;/li&gt;
  &lt;li&gt;Kotlin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me start at how Tipsrundan has evolved since we initiated it in October (crazy how time flies).&lt;/p&gt;

&lt;h2 id=&quot;the-evolution-of-tipsrundan&quot;&gt;The evolution of Tipsrundan&lt;/h2&gt;
&lt;p&gt;When we sent the first Tipsrundan, called TL;DR back then, I used a &quot;email templating language&quot; called &lt;a href=&quot;https://mjml.io/&quot;&gt;MJML&lt;/a&gt; and a pre-built template found on their homepage.&lt;br /&gt;
With this we got a responsive email using their &quot;homemade&quot; templating language. I enjoyed it at the same time as I hated it, there was way to much manual labour copying the sections and inserting my own code, the indentation in the web-editor wasn’t great and so on. I bet it’s a great tool but it didn’t cut it for me, after two or three issues and a ton of research I found a new tool I liked, with a good free variant, called &lt;a href=&quot;https://stripo.email/&quot;&gt;Stripo&lt;/a&gt;. Stripo is a &lt;em&gt;really&lt;/em&gt; good tool which has excellent support with its drag n’ drop editor where you can save modules and much more. We got a good looking &amp;amp; responsive email that worked out great, everything good right?&lt;/p&gt;

&lt;p&gt;It was really good until I realized we had to share the template with new people and Stripo requires premium for this (can’t blame them, they need their cut) which honestly I was to lazy to fix through management.&lt;/p&gt;

&lt;p&gt;With this knowledge I set out to create a tool which we could use internally that is simple and keeps simple. Forward comes a solution I built over a Sunday afternoon where we generate emails from JSON.&lt;/p&gt;

&lt;h2 id=&quot;tipsrundan-generation&quot;&gt;Tipsrundan generation&lt;/h2&gt;
&lt;p&gt;I had some pretty simple requirement:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;JSON or yaml as the filetype which we’d generate Tipsrundan-email from.&lt;/li&gt;
  &lt;li&gt;Have different sections and easily extendable&lt;/li&gt;
  &lt;li&gt;Decent looking &amp;amp; responsive (i.e. work on a phone and desktop)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By having these requirements I knew that it’ll be easy to sync over git or whatever tool we need and that we can potentially create themed Tipsrundan editions in the future.&lt;/p&gt;

&lt;p&gt;I also knew that I wanted to do this in Kotlin, mainly because I really enjoy coding in Kotlin.&lt;/p&gt;

&lt;h3 id=&quot;step-1-defining-the-format&quot;&gt;Step 1: Defining the format&lt;/h3&gt;
&lt;p&gt;The first step was to decide what format to use, or at least begin with. Both yaml and JSON was considered and in the end JSON felt like the best fit.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: string,
  &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;issue&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: number,
  &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;regional&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: [item],
  .. more categories
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;item &lt;/code&gt; is&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: string,
  &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: string,
  &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: string
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pretty straight-forward, as I said I prefer to keep it simple.&lt;/p&gt;

&lt;h3 id=&quot;step-2-reading-the-data&quot;&gt;Step 2: Reading the data&lt;/h3&gt;
&lt;p&gt;Now that we have a definition of the data we need to read it, this is really a solved problem in most languages through some kind of library. In my case I choose the serialization library provided by Kotlin in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kotlinx&lt;/code&gt;-library. As a FYI this library can serialize using CBOR (Concise Binary Object Representation) and other formats. The name of the library is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kotlinx-serialization&lt;/code&gt; and can be found &lt;a href=&quot;https://github.com/Kotlin/kotlinx.serialization&quot;&gt;here&lt;/a&gt;. It’s easiest installed through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gradle&lt;/code&gt; (using the Kotlin DSL):&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;kotlin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;plugin.serialization\&quot;) version \&quot;1.3.70\&quot; // same version as kotlin
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.20.0\&quot;) // Requires jcenter() as a repository
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kotlinx-serialization&lt;/code&gt; is actually cross-platform compatible meaning that it exists for Kotlin targeting JVM, Native &amp;amp; JS (yes we can target all these platforms through Kotlin!).&lt;/p&gt;

&lt;p&gt;Once installed it’s pretty easy to serialize &amp;amp; deserialize, like any other library really. Create the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data class&lt;/code&gt;es, which is the equivalent of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case class&lt;/code&gt; in Scala.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Currently &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kotlinx-serialization&lt;/code&gt; can do the serialization through two different methods, either add an annotation to the class that we’ll use Reflection - this does not work for native. Or we mark the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data class&lt;/code&gt; as Serializable, the latter being preferred as it’s  truly cross-platform and is more performant. 
If anyone is wondering a  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data class&lt;/code&gt; is basically a class that   provides setters, getters, equality, toString and more! It’s really awesome.
Adding the annotation we end up with the following:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Serializable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;step-3-how-to-write-html-in-kotlin&quot;&gt;Step 3: How to write html in Kotlin?&lt;/h3&gt;

&lt;p&gt;We all probably know about html-templating that’s available in most languages, I decided against that and went for a DSL. Kotlin is the language for DSL (Domain Specific Language), for good and bad. Through yet another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kotlinx&lt;/code&gt; library we got &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kotlinx-html&lt;/code&gt; which provides this DSL.&lt;/p&gt;

&lt;p&gt;It looks something like this&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BODY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;createFooter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;footer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;hr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Thank you for this time see you in two weeks\&quot; }
&lt;/span&gt;            &lt;span class=&quot;nf&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hampus &amp;amp; Hassan\&quot;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By using a DSL we get types (as you can see on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BODY&lt;/code&gt;) and other bonuses. Although this DSL is pretty verbose it works pretty good. In the end using a DSL or html-template engine does not matter that much in my opinion.
By the way, the way this function is typed is called a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extension function&lt;/code&gt; in Kotlin and is one of my favorite tools. It means that we extend the class, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BODY&lt;/code&gt; with a new method which is usable on a object of the class. Cool right?&lt;/p&gt;

&lt;p&gt;Let’s move on to the styling and how CSS can be annoying.&lt;/p&gt;

&lt;h3 id=&quot;step-4-styling&quot;&gt;Step 4: Styling&lt;/h3&gt;

&lt;p&gt;There was some important parts going into this, we want the email to look at least decent and also be responsive so that it’s viewable on both a phone and computer.&lt;/p&gt;

&lt;p&gt;CSS and emails are not as simple as with a webpage I learned rather fast. I had great issues actually getting the HTML to look good in gmail/outlook. In the end I found &lt;a href=&quot;https://litmus.com/blog/do-email-marketers-and-designers-still-need-to-inline-css&quot;&gt;this&lt;/a&gt; awesome post from Litmus which is one of the leading Email Marketing providers. I learned that&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;External CSS is a no-go for emails (a lot of the providers turned it off because of security concerns)&lt;/li&gt;
  &lt;li&gt;Embedded CSS (using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;style&lt;/code&gt;-tag in the header) works on most places today (not true a few years ago)&lt;/li&gt;
  &lt;li&gt;Inline CSS is the best&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Because I want to keep it simple I went with the second approach, this mean that I can keep the code a bit cleaner and not write as many wrappers for the styled elements.&lt;/p&gt;

&lt;p&gt;So knowing how I should implement my styling I needed to find a good style, in the end I remembered an old Reddit-post where I found &quot;MVP.css&quot; which is a small CSS that gives cards, buttons and more. Really brilliant in my opinion, made by Andy Brewer and can be found &lt;a href=&quot;https://andybrewer.github.io/mvp/&quot;&gt;here&lt;/a&gt;. I’ve personally tweaked it a bit to keep the email a bit more compact and informative as this is really made for webpages, but the essentials are the same.&lt;/p&gt;

&lt;h3 id=&quot;step-5-wrapping-it-all-up&quot;&gt;Step 5: Wrapping it all up&lt;/h3&gt;

&lt;p&gt;Combining all this into a few files in a git repo we can now generate emails from a JSON easily and have multiple categories.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The JSON is used as a data structure&lt;/li&gt;
  &lt;li&gt;Kotlin used as language&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kotlinx-serialization&lt;/code&gt; used as a JSON deserializer&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kotlinx-html&lt;/code&gt; used to build the HTML directly in Kotlin with types&lt;/li&gt;
  &lt;li&gt;Embedded CSS used as it’s widely usable by today in email clients&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The repository can be found &lt;a href=&quot;https://github.com/londogard/email-gen-kt&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope this was somewhat interesting &amp;amp; something learned. If you’ve any comments please reach out to me through any of the available channels!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hampus Londögård&lt;/em&gt;&lt;/p&gt;</content><author><name>Hampus Londögård</name></author><category term="email" /><category term="kotlin" /><category term="html" /><category term="css" /><category term="serialization" /><summary type="html">Email Generation - Tipsrundan - At AFRY IT South I’m co-responsible with Hassan Ftouni at driving the competence. One of my initiatives that we both now drive is to have a biweekly, every second week for all you picky readers out there, newsletter called &quot;Tipsrundan&quot;.</summary></entry><entry><title type="html">[2019-02-04] AFRY NLP Competence Meeting: Text Classification IMDB</title><link href="https://blog.londogard.com/python/competence/machine-learning/nlp/text-classification/2020/02/23/competence-meeting-imdb-text-classification.html" rel="alternate" type="text/html" title="[2019-02-04] AFRY NLP Competence Meeting: Text Classification IMDB" /><published>2020-02-23T00:00:00-06:00</published><updated>2020-02-23T00:00:00-06:00</updated><id>https://blog.londogard.com/python/competence/machine-learning/nlp/text-classification/2020/02/23/competence-meeting-imdb-text-classification</id><content type="html" xml:base="https://blog.londogard.com/python/competence/machine-learning/nlp/text-classification/2020/02/23/competence-meeting-imdb-text-classification.html">&lt;h1 id=&quot;2019-02-04-afry-nlp-competence-meeting-text-classification-imdb&quot;&gt;2019-02-04 AFRY NLP Competence Meeting: Text Classification IMDB&lt;/h1&gt;

&lt;p&gt;I’ve set a goal to create one blog post per Competence Meeting I’ve held at AFRY to spread the knowledge further. This goal will also grab all the older meetings, my hope is that I’ll be finished before summer 2020, but we’ll see.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Most of my Competence Meetings take place in the form of Jupyter Notebooks (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ipynb&lt;/code&gt;). Notebooks are awesome as they allow us to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Mix and match &lt;em&gt;markdown&lt;/em&gt; &amp;amp; &lt;em&gt;code&lt;/em&gt;-blocks&lt;/li&gt;
  &lt;li&gt;Keep the state of the program, i.e. very explorative&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is really good in combination with the workshop-format that we usually have. 
Using services such as &lt;a href=&quot;colab.research.google.com&quot;&gt;Google Colab&lt;/a&gt; one can take the file and open it in the browser and run it there. This means that we don’t need any downloads and pretty often we also have a speed gain because the node used is faster than a laptop with its GPU.&lt;/p&gt;

&lt;p&gt;Let’s get on to the competence evening.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;text-classification&quot;&gt;Text Classification&lt;/h2&gt;

&lt;p&gt;Today we’ll go through text classification, what it is, how it is used and how to make it yourself while trying to keep have a great mix of both theory and practical use. Text classification is just what the name suggest, a way to classify texts. Let it be spam or reviews, you train it and it’ll predict what class the text belongs to.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;a-good-baseline&quot;&gt;A good baseline&lt;/h3&gt;

&lt;p&gt;To have a good baseline is incredibly important in Machine Learning. In summary you want the following&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simple model to predict outcome&lt;/li&gt;
  &lt;li&gt;Use this model to compare your new, more complex model to&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is to be able to know what progress you’re making. You don’t want to do anything more complex without any gains.&lt;/p&gt;

&lt;p&gt;One pretty common simple baseline is just to pick a random class as prediction.&lt;/p&gt;

&lt;h3 id=&quot;classes--features&quot;&gt;Classes &amp;amp; Features&lt;/h3&gt;

&lt;p&gt;What is a class and feature?&lt;/p&gt;

&lt;p&gt;Features are the input to the model, you can see a machine learning system as a &quot;consumer&quot; of features. You can view this as a cookie monster consuming cookies and then he says if they taste good or bad. He has the input, cookie, that can be a feature. He then has a output, class, that is good/bad. Repeat this a lot of times and you can retrieve statistics if Cookie Y is good or bad.&lt;/p&gt;

&lt;p&gt;To generalize this system we would divide the feature into multiple feature, like what ingredients the cookie contains. So instead of saying this is a &quot;Chocolate Chip Cookie&quot; we know tell the system the features are:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;chocolate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sugar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;honey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;oat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cinnamon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sweet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;\&lt;span class=&quot;s&quot;&gt;&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;. In numerical input it would translate to something as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1,1,0,0,0,1,0]&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;one-hot-encoding---how-we-represent-features--classes&quot;&gt;One-Hot-Encoding - how we represent features &amp;amp; classes&lt;/h4&gt;

&lt;p&gt;As shown in the translation to numerical vectors we don’t represent words as actual words. We always use numbers, often we even use something called &lt;em&gt;One-Hot-Encoding&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;One-Hot-Encoding means that we have an array of one 1 and the rest is 0s. This is to optimize math performed by the GPU (or CPU).&lt;/p&gt;

&lt;p&gt;Using the example of &lt;em&gt;Good&lt;/em&gt; &amp;amp; &lt;em&gt;Bad&lt;/em&gt; cookies with the extension of &lt;em&gt;Decent&lt;/em&gt; we will One-Hot-Encode these as the following&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Good&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Bad&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Decent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The same is applied to our features. If you’re using a framework (such as Keras) it is pretty common that they include an method to do this, or even that it is done automatically for you.&lt;/p&gt;

&lt;h3 id=&quot;back-to-text-classification&quot;&gt;Back to text classification&lt;/h3&gt;

&lt;p&gt;To classify a text we do what is called an &lt;em&gt;sentiment analysis&lt;/em&gt; meaning that we try to estimate the &lt;em&gt;sentiment polarity&lt;/em&gt; of a text body. In the first part of this workshop we’ll be assuming that there’s only two sentiments, &lt;em&gt;Negative&lt;/em&gt; and &lt;em&gt;Positive&lt;/em&gt;. Then we can express this as the following classification problem:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;Bad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Good&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The output, &lt;em&gt;Classes&lt;/em&gt;, are easy to One-Hot-Encode but how do we succesfully One-Hot-Encode a string? A character can be seen as a class but is that really something we can learn from? To solve this we need to preprocess our input somehow.&lt;/p&gt;

&lt;h3 id=&quot;preprocessing&quot;&gt;Preprocessing&lt;/h3&gt;

&lt;p&gt;Preprocessing is an incredibly important part of Machine Learning. Combining preprocessing with &lt;em&gt;Data Mining&lt;/em&gt; is actually around 70% of the workload (IBM) when developing models through the CRISP-DM. From my experience this is true.&lt;/p&gt;

&lt;p&gt;Having good data and finding the most important features is incredibly important to have a competent system. In this task we need to preprocess the text to simplify the learning process for our system. We will do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Clean the text&lt;/li&gt;
  &lt;li&gt;Vectorize the texts into numerical vectors&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cleaning-the-text&quot;&gt;Cleaning the text&lt;/h4&gt;

&lt;p&gt;Why do we need to clean the text? It is to remove weird stuff &amp;amp; outliers. If we have the text &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I'm a cat.&lt;/code&gt;we want to simplify this into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[i'm, a, cat]&lt;/code&gt; or even &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[im, a, cat]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Removing data such as non-alphabetical characters and the letter case makes more data look a like and reduces the dimension of our input – this simplifies the learning of the system. But removing features can be bad also, if someone writes in all CAPS we can guess that they’re angry. But let’s take that later.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;regex&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clean_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    \&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
    Applies some pre-processing on the given text.

    Steps :
    - Removing punctuation
    - Lowering text
    &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\&quot;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
    
    # remove the characters [&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;], ['] and [&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;]
    text = re.sub(r&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\\\\\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, text)    
    text = re.sub(r&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, text)    # Extra: Is regex needed? Other ways to accomplish this.
    text = re.sub(r&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\\\&quot;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, text)
    # replace all non alphanumeric with space 
    text = re.sub(r&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;W+&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, text)
    # text = re.sub(r&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;.+?&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, text) # &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;hej&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
    
    # Extra: How would we go ahead and remove HTML? Time to learn some Regex!
    
    return text.strip().lower()
clean_text(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Wow, we can clean text now. Isn't that amazing!?&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;).split()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;vectorization&quot;&gt;Vectorization&lt;/h4&gt;

&lt;p&gt;Now that we can extract text we need to be able to input it to the system. We have to vectorize it. In this part we’ll vectorize each word as a number. The simplest approach to this is using &lt;em&gt;Bag of Words&lt;/em&gt; (BOW).&lt;/p&gt;

&lt;p&gt;Bag of Words creates a list of words which is called the &lt;em&gt;Dictionary&lt;/em&gt;. The Dictionary is just a list of the words from the training data.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Training&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;\&lt;span class=&quot;s&quot;&gt;&quot;ÅF is a big company&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ÅF making future&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;]
--&amp;gt; Dictionary: [ÅF, is, a, big, company, making, future]

New text: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ÅF company is a future company&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --&amp;gt; [1,1,1,0,2,0,1]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our new text is vectorized on top of the dictionary. You take the dictionary and replace the words position with the count of it that is found in the new text.&lt;/p&gt;

&lt;h4 id=&quot;finalizing-the-preprocessing&quot;&gt;Finalizing the preprocessing&lt;/h4&gt;

&lt;p&gt;We can actually do some more things to improve the system which I won’t go into detail about (read the code). We remove stop-words and so on.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.feature_extraction.text&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CountVectorizer&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;training_texts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    \&lt;span class=&quot;s&quot;&gt;&quot;ÅF is a big company&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, 
    &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ÅF making future&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
]

test_texts = [
    &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ÅF company is a future company&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
]

# this is the vectorizer
vectorizer = CountVectorizer(
    stop_words=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;english&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,    # Removes english stop words (such as 'a', 'is' and so on.)
    preprocessor=clean_text  # Customized preprocessor
)

# fit the vectorizer on the training text
vectorizer.fit(training_texts)

# get the vectorizer's vocabulary
inv_vocab = {v: k for k, v in vectorizer.vocabulary_.items()}
vocabulary = [inv_vocab[i] for i in range(len(inv_vocab))]

# vectorization example
pd.DataFrame(
    data=vectorizer.transform(test_texts).toarray(),
    index=[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Test sentence&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;],
    columns=vocabulary
)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lets-do-something-fun-out-of-this&quot;&gt;Let’s do something fun out of this!&lt;/h3&gt;

&lt;p&gt;To begin with we need data. Luckily I know a perfect dataset for this – the IMDB movie reviews from stanford. This is a widely used dataset throughout &lt;em&gt;Sentiment Analysis&lt;/em&gt;. The data contains 50 000 reviews where 50 % is positive and the rest negative. First we fetch a dataset. Download &lt;a href=&quot;http://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz&quot;&gt;this file&lt;/a&gt; and unpack it (into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aclImdb&lt;/code&gt;) if the first code-snippet was unsuccessful.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_train_test_imdb_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    \&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
    Loads the IMDB train/test datasets from a folder path.
    Input:
    data_dir: path to the &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;aclImdb&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; folder.
    
    Returns:
    train/test datasets as pandas dataframes.
    &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\&quot;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;

    data = {}
    for split in [&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;]:
        data[split] = []
        for sentiment in [&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;neg&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;]:
            score = 1 if sentiment == &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; else 0

            path = os.path.join(data_dir, split, sentiment)
            file_names = os.listdir(path)
            for f_name in file_names:
                with open(os.path.join(path, f_name), &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;) as f:
                    review = f.read()
                    data[split].append([review, score])
  
    # We shuffle the data to make sure we don't train on sorted data. This results in some bad training.
    np.random.shuffle(data[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;])        
    data[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;] = pd.DataFrame(data[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;],
                                 columns=['text', 'sentiment'])

    np.random.shuffle(data[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;])
    data[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;] = pd.DataFrame(data[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;],
                                columns=['text', 'sentiment'])

    return data[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;], data[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;]
train_data, test_data = load_train_test_imdb_data(
    data_dir=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;aclImdb/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lets-create-our-classifier&quot;&gt;Let’s create our classifier&lt;/h3&gt;

&lt;p&gt;We now have a dataset that we have successfully partitioned into a dictionary so that we can use it for our classifier.&lt;/p&gt;

&lt;p&gt;Do you see an issue with our baseline right now?&lt;/p&gt;

&lt;p&gt;…As mentioned we want to only have important features to simplify training. Right now we have an enormous amount of features, our BOW-approach result in an 80 000-dimensional vector. Because of this we &lt;em&gt;must&lt;/em&gt; use simple algorithms that learn fast &amp;amp; easy, e.g. &lt;a href=&quot;https://en.wikipedia.org/wiki/Support-vector_machine&quot;&gt;Linear SVM&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Naive_Bayes_classifier&quot;&gt;Naive Bayes&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Logistic_regression&quot;&gt;Logistic Regression&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s create some code that actually let’s us train a Linear SVM!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.metrics&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accuracy_score&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.svm&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinearSVC&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Transform each text into a vector of word counts
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CountVectorizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;\&lt;span class=&quot;s&quot;&gt;&quot;english&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,
                             preprocessor=clean_text)

training_features = vectorizer.fit_transform(train_data[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;])    
test_features = vectorizer.transform(test_data[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;])

# Training
model = LinearSVC()
model.fit(training_features, train_data[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sentiment&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;])
y_pred = model.predict(test_features)

# Evaluation
acc = accuracy_score(test_data[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sentiment&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;], y_pred)

print(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Accuracy on the IMDB dataset: {:.2f}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.format(acc*100))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;comparison-to-state-of-the-art&quot;&gt;Comparison to state-of-the-art&lt;/h3&gt;

&lt;p&gt;Our accuracy is somewhere around 83.5-84 % which is really good! With this simple model and incredibly simplistic feature extraction we achieve a really high amount of correct answer! Comparing this to state-of-the-art we’re around 11 percent units beneat (~95% accuracy achieved &lt;a href=&quot;https://arxiv.org/pdf/1801.06146.pdf&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Incredible right? Exciting!? For me it is at least!&lt;/p&gt;

&lt;p&gt;How do we improve from here?&lt;/p&gt;

&lt;h3 id=&quot;improving-the-model&quot;&gt;Improving the model&lt;/h3&gt;

&lt;p&gt;We have some huge improvements to make outside of fine-tuning, so we’ll skip the fine-tuning from now.&lt;/p&gt;

&lt;p&gt;The first step is to improve our vectorization.&lt;/p&gt;

&lt;h4 id=&quot;tf-idf&quot;&gt;TF-IDF&lt;/h4&gt;

&lt;p&gt;If you were at &lt;em&gt;first friday (@ÅF)&lt;/em&gt; you have heard about TF-IDF earlier. TF-IDF stands for &lt;em&gt;Term Frequence-Inverse Document Frequency&lt;/em&gt; and is a measurement that aims to fight imbalances in texts.&lt;/p&gt;

&lt;p&gt;In our vectorization step we look at the word-count meaning that we’ll have some biases to how much a word is present, the longer the text the more the bias. To reduce this we can take the word-count divided by the total amount of words in the text (TF). We also want to downscale the words that are incredibly frequent such as stop words and topic-related words, and upscale unusual words somewhat, e.g.&lt;em&gt;glamorous&lt;/em&gt; might not be frequent but it is important to the text most likely. We use &lt;em&gt;IDF&lt;/em&gt; for this. We then take these two and combine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*FgQgJYozG7colT9rys066w.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;implementation-details&quot;&gt;Implementation details&lt;/h3&gt;

&lt;p&gt;This is actually really easy to do as &lt;em&gt;sklearn&lt;/em&gt; already has a finished &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TfIdfVectorizer&lt;/code&gt; so all we have to do is to replace the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CountVectorizer&lt;/code&gt;. Let’s see how it goes!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.svm&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinearSVC&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.metrics&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accuracy_score&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.feature_extraction.text&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TfidfVectorizer&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Transform each text into a vector of word counts
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TfidfVectorizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop_words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;\&lt;span class=&quot;s&quot;&gt;&quot;english&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;,
                             preprocessor=clean_text)

training_features = vectorizer.fit_transform(train_data[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;])    
test_features = vectorizer.transform(test_data[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;])

# Training
model = LinearSVC()
model.fit(training_features, train_data[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sentiment&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;])
y_pred = model.predict(test_features)

# Evaluation
acc = accuracy_score(test_data[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sentiment&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;], y_pred)

print(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Accuracy on the IMDB dataset: {:.2f}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.format(acc*100))

# Extra: Implement our own TfIdfVectorizer.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;conclusion-of-tf-idf&quot;&gt;Conclusion of TF-IDF&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TfIdVectorizer&lt;/code&gt; improved our scoring with 2 percent units, that’s incredible for such an easy improvement!&lt;/p&gt;

&lt;p&gt;This for me shows how important it is to understand the data and what is important. You really need to grasp how to extract the important and what tools are available.&lt;/p&gt;

&lt;p&gt;But let’s not stop here, lets reiterate and improve further.&lt;/p&gt;

&lt;p&gt;What is the next natural step? Context I believe. During my master-thesis on spell correction of Street Names it was very obvious how important context is to increase the models understanding. Unfortunately we couldn’t use the context of a sentence in the thesis (as of the nature of street names) but here we can!&lt;/p&gt;

&lt;h3 id=&quot;use-of-context&quot;&gt;Use of context&lt;/h3&gt;

&lt;p&gt;Words by themself prove some meaning but sometimes they’re used in a negated sense, e.g. &lt;em&gt;not good&lt;/em&gt;. &lt;em&gt;Good&lt;/em&gt; in itself would most likely be positive but if we can get the context around the word we can be more sure about in what manner it is applied.&lt;/p&gt;

&lt;p&gt;We call this &lt;em&gt;N-grams&lt;/em&gt; where N is equal to the amount of words taken into consideration for each word. Using bigrams (N=2) we get the following:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;companies&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;often&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;corporate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;companies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;often&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slogans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;companies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;often&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;often&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slogans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sometimes you include a start &amp;amp; ending word so that it would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(\\t, companies)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(slogans, \\r)&lt;/code&gt; or such. In this case as we are not finetuning we won’t go into that. We’ll keep it simple.&lt;/p&gt;

&lt;p&gt;The all-mighty sklearn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TfIdfVectorizer&lt;/code&gt; actually already have included N-gram support using the parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ngram_range=(1, N)&lt;/code&gt;. So let’s make it simple for us and make use of that!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.svm&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinearSVC&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.metrics&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accuracy_score&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.feature_extraction.text&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TfidfVectorizer&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Transform each text into a vector of word counts
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vectorizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TfidfVectorizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ngram_range&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;strip_accents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ascii'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;max_df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.98&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;training_features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vectorizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit_transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;\&lt;span class=&quot;s&quot;&gt;&quot;text&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;])    
test_features = vectorizer.transform(test_data[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;])

# Training
model = LinearSVC()
model.fit(training_features, train_data[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sentiment&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;])
y_pred = model.predict(test_features)

# Evaluation
acc = accuracy_score(test_data[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sentiment&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;], y_pred)

print(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Accuracy on the IMDB dataset: {:.2f}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.format(acc*100))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;conclusion-of-n-gram&quot;&gt;Conclusion of N-gram&lt;/h3&gt;

&lt;p&gt;Once again we see a massive improvement. We’re almost touching 89 % now! That’s just a mere 6 percent units below state-of-the-art. What can we do to improve now?&lt;/p&gt;

&lt;p&gt;Some possible improvements for you to try!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use a custom threshold to reduce the dimensions&lt;/li&gt;
  &lt;li&gt;Play around with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ngram_range&lt;/code&gt; (don’t forget a threshold if you do this)&lt;/li&gt;
  &lt;li&gt;Improve the preprocessing&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Try some fun things here if you want too :)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion-of-phase-1&quot;&gt;Conclusion of phase 1&lt;/h2&gt;

&lt;p&gt;We have created a strong baseline for text classification with great accuracy for its simplicity. The following steps has been done&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First a simple preprocessing step which is of great importance. We have to remember to not make it to complex, the complexity of preprocessing is like an evil circle in the end. In our case we remove punctuations, stopwords and lower the case.&lt;/li&gt;
  &lt;li&gt;Secondly we vectorize the data to make it readable by the system. A classifier requires numerical features. For this we had a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TfIdfVectorizer&lt;/code&gt; that computes frequency of words while downsampling words that are to common &amp;amp; upsampling unusual words.&lt;/li&gt;
  &lt;li&gt;Finally we added N-gram to the model to increase the understanding of the sentence by supplying context.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;phase-2&quot;&gt;Phase 2&lt;/h2&gt;

&lt;p&gt;How do we improve from here? TF-IDF has its cons and pros. Some of the cons are that they:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t account for any kind of positioning at all&lt;/li&gt;
  &lt;li&gt;The dimensions are ridiculous large&lt;/li&gt;
  &lt;li&gt;They can’t capture semantics.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Improvements upon this is made by using neural networks and word embeddings.&lt;/p&gt;

&lt;h2 id=&quot;word-embeddings&quot;&gt;Word Embeddings&lt;/h2&gt;

&lt;p&gt;Word Embeddings &amp;amp; Neural Networks are where we left off. By change our model to instead utilize these two concepts we can improve the accuracy once again.&lt;/p&gt;

&lt;h3 id=&quot;word-embeddings-1&quot;&gt;Word Embeddings&lt;/h3&gt;

&lt;p&gt;Word Embeddings (WE) are actually a type of Neural Network. It uses &lt;em&gt;embedding&lt;/em&gt; to create the model. I quickly explained WE during my presentation on Summarization and how to build a great summarizer. Today we’ll go a little more into depth.&lt;/p&gt;

&lt;p&gt;To begin with I’ll take the most common example, WE lets us do the following arithmetiric with words:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;King&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Man&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Woman&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queen&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is, in my opinion, completely amazing and fascinating. How does this work? Where do I learn more? Those are my first thoughts. In fact the theory is pretty basic until you get to the nittygritty details, as with most things.&lt;/p&gt;

&lt;p&gt;WE is built on the concept ot learn how words are related to eachother. What company do a word have? To make the example more complex we can redefine this too the following: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A is to B what C is to D&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Currently there is three &quot;big&quot; models that are widely used. The first one Word2Vec (&lt;a href=&quot;https://arxiv.org/abs/1301.3781&quot;&gt;Mikolov et al 2013&lt;/a&gt;), the second is GloVe (MIT &lt;a href=&quot;https://nlp.stanford.edu/projects/glove/&quot;&gt;MIT&lt;/a&gt;, &lt;a href=&quot;https://nlp.stanford.edu/pubs/glove.pdf&quot;&gt;Pennington et al 2014&lt;/a&gt;) and the final one is fastText (&lt;a href=&quot;https://github.com/facebookresearch/fastText&quot;&gt;facebook&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;We will look into how you can achieve this without Deep Learning / Neural Networks unlike the models mentioned.&lt;/p&gt;

&lt;h4 id=&quot;step-1-how-to-represent-words-in-a-numerical-vector&quot;&gt;Step 1: How to represent words in a numerical vector&lt;/h4&gt;

&lt;p&gt;The first thing we have to do to actually understand/achieve word embeddings is to represent words in a numerical vector. In relation to this a quick explanation of sparse &amp;amp; dense representations would be great. Read more in detail at &lt;a href=&quot;https://en.wikipedia.org/wiki/Sparse_matrix&quot;&gt;Wikipedia: Sparse Matrix&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sparse representation&lt;/strong&gt; is when we represent something very sparsely. It tells us that the points in the space is very few in regards to the dimensions and that most elements are empty. Think one-hot-encoding.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;Dense representation&lt;/strong&gt; in comparison has few dimensions in comparison to possible values and most elements are filled. Think of something continuous.&lt;/p&gt;

&lt;p&gt;The most simple way to represent words in a numerical vector is something we touched earlier, by one-hot-encoding them, i.e. a sparse representation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1200/1*YEJf9BQQh0ma1ECs6x_7yQ.png&quot; alt=&quot;Source :(Marco Bonzanini, 2017)&quot; /&gt;(Source: Marco Bonzanini, 2017)&lt;/p&gt;

&lt;p&gt;Because of how languages are structured having one-hot-encoding means that we will have an incredibly sparse matrix (can be good) but it will have an enormous amount of dimensions (bad).&lt;/p&gt;

&lt;p&gt;On top of this how would we go ahead and measure the distance between words? Normally one would use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cosine_similarity&quot;&gt;cosine similarity&lt;/a&gt; but if we have a one-hot-encoding all the words would be orthogonal against eachother meaning that the dot-product will be zero.&lt;/p&gt;

&lt;p&gt;Creating a dense representation however would indeed capture similarity as we could make use of cosine-similarity and more. Introducing Word2Vec.&lt;/p&gt;

&lt;h4 id=&quot;step-2-word2vec-representing-data-densely&quot;&gt;Step 2: Word2Vec, representing data densely&lt;/h4&gt;

&lt;p&gt;The goal of Word2Vec, at least to my understanding, is to actually predict the context of a word. Or in other words we learn embeddings by prediciting the context of the word. The &lt;em&gt;context&lt;/em&gt; here being the same definition as in N-grams. Word2Vec uses &lt;em&gt;shallow neural network&lt;/em&gt; to learn word vectors so that each word is good at predicting its own contexts (more about his in &lt;strong&gt;Skip-Grams&lt;/strong&gt;) and how to predict a word given a context (more about this in &lt;strong&gt;CBOW&lt;/strong&gt;).&lt;/p&gt;

&lt;h4 id=&quot;skip-gram&quot;&gt;Skip-gram&lt;/h4&gt;

&lt;p&gt;Skip-gram very simplified is when you train on the N-grams but without the real word. &lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*swlaqv7p_3xI4eL37C1pAA.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As of now we have empirical results showing how this technique is very successful at learning the meaning of the words. On top of this the embedding that we get has both &lt;em&gt;direction of semantic and syntatic meaning&lt;/em&gt; that are exposed in example such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;King - Man...&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another example would be: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vector(Madrid) - Vector(Spain) + Vector(Sweden) ~ Vector(Stockholm)&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;so-how-do-the-arithmetic-of-words-actually-work&quot;&gt;So how do the arithmetic of words actually work?&lt;/h4&gt;

&lt;p&gt;I won’t go into details (some complicated math, see &lt;a href=&quot;http://www.aclweb.org/anthology/P17-1007&quot;&gt;Gittens et al&lt;/a&gt;) but if we assume the following to be true:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All words are distributed uniformly&lt;/li&gt;
  &lt;li&gt;The embedding model is linear&lt;/li&gt;
  &lt;li&gt;The conditional distributions of words are indepedent&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we can prove that the embedding of the paraphrase of a set of words is obtained by taking the sum over the embeddings of all of the individual words.&lt;/p&gt;

&lt;p&gt;Using this result it’s easy to show how the famous man-woman, king-queen relationship works.&lt;/p&gt;

&lt;p&gt;Extra note: You can show this then by havingn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;King&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Queen&lt;/code&gt; having the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Male-Female&lt;/code&gt;relationship as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;King&lt;/code&gt; then is the paraphrase of the set of words &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{Queen, X}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I want to note that these assumptions are not 100 percent accurate. In reality word distributions are thought to follow Zipf’s law.&lt;/p&gt;

&lt;h4 id=&quot;glove&quot;&gt;GloVe&lt;/h4&gt;

&lt;p&gt;A year after Word2Vec was a fact to the world the scientist decided to reiterate again. This time we got GloVe. GloVe tried to improve upon Word2Vec by that given a word its relationship(s) can be recovered from co-occurence statistics of a large corpus. GloVe is expensive and memory hungry, but it’s only one load so the issue isn’t that big. Nitty bitty details&lt;/p&gt;

&lt;h4 id=&quot;fasttext&quot;&gt;fastText&lt;/h4&gt;

&lt;p&gt;With fastText one of the biggest problems is solved, both GloVe and Word2Vec only learn embeddings of word of the vocabulary. Because of this we can’t find an embedding for a word that isn’t in the dictionary.&lt;/p&gt;

&lt;p&gt;Bojanowski et al solved this by learning the word embeddings using subword information. To summarize fastText learns embeddings of character n-grams instead.&lt;/p&gt;

&lt;h4 id=&quot;the-simple-way&quot;&gt;The simple way&lt;/h4&gt;

&lt;p&gt;A simple approach to create your own word embeddings without a neural network is by factorizing a co-occurence matrix using SVD (singular-value-decomposition). As mentioned Word2Vec is barely a neural network as it has no hidden layers nor an y non-linearities. GloVe factorizes a co-occurense matrix while gaining even better results.&lt;/p&gt;

&lt;p&gt;I highly recommend you to go check this blog out: https://multithreaded.stitchfix.com/blog/2017/10/18/stop-using-word2vec/ by Stitch Fix. An awesome read and we can go implement this too!&lt;/p&gt;</content><author><name>Hampus Londögård</name></author><category term="python" /><category term="competence" /><category term="machine-learning" /><category term="nlp" /><category term="text-classification" /><summary type="html">2019-02-04 AFRY NLP Competence Meeting: Text Classification IMDB</summary></entry><entry><title type="html">Gradle, JVM and GitHub Packages</title><link href="https://blog.londogard.com/gradle/jvm/library/2020/02/10/gradle-github-packages.html" rel="alternate" type="text/html" title="Gradle, JVM and GitHub Packages" /><published>2020-02-10T00:00:00-06:00</published><updated>2020-02-10T00:00:00-06:00</updated><id>https://blog.londogard.com/gradle/jvm/library/2020/02/10/gradle-github-packages</id><content type="html" xml:base="https://blog.londogard.com/gradle/jvm/library/2020/02/10/gradle-github-packages.html">&lt;h1 id=&quot;gradle-jvm-and-github-packages&quot;&gt;Gradle, JVM and GitHub Packages&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Initial comment&lt;/em&gt; this is mainly done as a reminder to myself.&lt;/p&gt;

&lt;p&gt;So about 6 months ago GitHub launched a new exciting service; &lt;a href=&quot;https://github.blog/2019-05-10-introducing-github-package-registry/&quot;&gt;GitHub Package Registry&lt;/a&gt;. This service lets you as a GitHub-user upload your Open Source code for free on GitHubs registry supporting a wide array of languagues and build systems - JavaScript (npm), Java/JVM-languages (Maven/Gradle), Ruby (RubyGems), .NET (NuGet), and Docker images. Perhaps more have been added since I last verified.&lt;/p&gt;

&lt;p&gt;In this post I’ll try to keep to the point and give clear easy instruction that you’ll be able to bookmark and go back to whenever you need to set this up.&lt;/p&gt;

&lt;p&gt;I’ll give the instruction directly beneath with some comments afterwards for the one who’d like to read some extra.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;1-add-maven-publish-plugin&quot;&gt;1. Add Maven Publish Plugin&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle.kts&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;`maven-publish`&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Add this&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;kotlin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jvm\&quot;) version \&quot;1.3.60\&quot;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;maven-publish\&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; (using the &lt;em&gt;old&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply&lt;/code&gt; way of things)&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'maven-publish'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-add-publication-part&quot;&gt;2. Add Publication Part&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle.kts&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;publishing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;maven&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GitHubPackages\&quot;
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://maven.pkg.github.com/OWNER/REPO\&quot;)
&lt;/span&gt;            &lt;span class=&quot;nf&quot;&gt;credentials&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;findProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gpr.user\&quot;) as String? ?: System.getenv(\&quot;GITHUB_ACTOR\&quot;)
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;findProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gpr.key\&quot;) as String? ?: System.getenv(\&quot;GITHUB_TOKEN\&quot;)
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;publications&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MavenPublication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gpr\&quot;){
&lt;/span&gt;            &lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;java\&quot;])
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;publishing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GitHubPackages\&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://maven.pkg.github.com/OWNER/REPOSITORY\&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gpr.user\&quot;) ?: System.getenv(\&quot;GITHUB_ACTOR\&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gpr.key\&quot;) ?: System.getenv(\&quot;GITHUB_TOKEN\&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;publications&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gpr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MavenPublication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-automating-release-workflow&quot;&gt;3. Automating Release Workflow&lt;/h2&gt;

&lt;p&gt;To simplify our lifes further;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JitPack is already automated and tracking your repository automatically adding the new releases ones a release is created.&lt;/li&gt;
  &lt;li&gt;GitHub is &lt;em&gt;not&lt;/em&gt; automated and we need to upload our assets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Automating GitHub packages upload through release &amp;amp; GitHub Actions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We’ll use GitHub Actions to create a workflow where once a release passes stage ‘published’ the assets will be uploaded to the repository/artifactory of GitHub Packages.
This integration is really awesome as once we’ve set it up we only need to press &quot;Create Release&quot; on the GitHub page to deploy our library to both GitHub Packages &amp;amp; JitPack!&lt;/p&gt;

&lt;p&gt;Create the directory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows&lt;/code&gt; in your root-folder of the project if it doesn’t exist yet. Add the following file:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Release &amp;amp; Publish Build&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;published&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v1&lt;/span&gt;

      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Set up JDK &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.8&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-java@v1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;java-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.8&lt;/span&gt;

      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Clean Build&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./gradlew clean build&lt;/span&gt;

      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Publish Build&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./gradlew publish&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secrets.GITHUB_TOKEN&lt;/code&gt; is automatically supplied by GitHub itself during the run of the GitHub Actions-script.&lt;/p&gt;

&lt;p&gt;Pretty awesome right? Go build your libraries and deploy!&lt;/p&gt;</content><author><name>Hampus Londögård</name></author><category term="gradle" /><category term="jvm" /><category term="library" /><summary type="html">Gradle, JVM and GitHub Packages</summary></entry></feed>